# web_app.py
"""
–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –±–æ—Ç–∞ –Ω–∞ Flask
"""

from flask import Flask, render_template, jsonify, request
import json
import datetime
import pytz
import logging
from werkzeug.security import check_password_hash
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
if os.path.exists('.env.web'):
    # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ .env —Ñ–∞–π–ª–∞
    with open('.env.web', 'r') as f:
        for line in f:
            if line.strip() and not line.startswith('#') and '=' in line:
                key, value = line.strip().split('=', 1)
                os.environ[key] = value

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è Railway
if os.getenv('MENU_UR'):  # –û–ø–µ—á–∞—Ç–∫–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    os.environ['MENU_URL'] = os.getenv('MENU_UR')
    
# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º JSON –¥–ª—è Google Credentials (—É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∫–∞–≤—ã—á–∫–∏)
if os.getenv('GOOGLE_CREDENTIALS_JSON'):
    credentials = os.getenv('GOOGLE_CREDENTIALS_JSON')
    if credentials.startswith('"') and credentials.endswith('"'):
        os.environ['GOOGLE_CREDENTIALS_JSON'] = credentials[1:-1]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ (—Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫)
try:
    import database
    from core.config import ALL_ADMINS, BOT_TOKEN
    DB_AVAILABLE = True
    logger.info("‚úÖ –ú–æ–¥—É–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
    DB_AVAILABLE = False
    ALL_ADMINS = [123456789]  # –¢–µ—Å—Ç–æ–≤—ã–π –∞–¥–º–∏–Ω
    BOT_TOKEN = "test_token"

app = Flask(__name__)
app.secret_key = os.getenv('FLASK_SECRET_KEY', BOT_TOKEN[:32])  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∞—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∫–∞–∫ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
logger.info(f"üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
logger.info(f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞: {DB_AVAILABLE}")
logger.info(f"üîë –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–æ–≤: {len(ALL_ADMINS)}")
logger.info(f"üêò PostgreSQL: {os.getenv('USE_POSTGRES', 'false')}")
logger.info(f"üìà Google Sheets: {'–î–∞' if os.getenv('GOOGLE_SHEET_KEY') else '–ù–µ—Ç'}")

def is_admin_authorized(admin_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return int(admin_id) in ALL_ADMINS

@app.route('/')
def dashboard():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–∞—à–±–æ—Ä–¥–∞"""
    try:
        if not DB_AVAILABLE:
            # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –±–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
            general_stats = (25, 18, 0, {'–ü—Ä—è–º–æ–π –∑–∞—Ö–æ–¥': 15, '–ü–µ—Ä—Å–æ–Ω–∞–ª': 8, '–†–µ–∫–ª–∞–º–∞': 2}, 0)
            staff_stats = {
                '–û—Ñ–∏—Ü–∏–∞–Ω—Ç': [{'name': '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤', 'brought': 12, 'churn': 1, 'position': '–û—Ñ–∏—Ü–∏–∞–Ω—Ç'}],
                '–ë–∞—Ä–º–µ–Ω': [{'name': '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞', 'brought': 8, 'churn': 0, 'position': '–ë–∞—Ä–º–µ–Ω'}]
            }
            total_users = 150
            logger.info("üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞")
        else:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
                moscow_tz = pytz.timezone('Europe/Moscow')
                end_time = datetime.datetime.now(moscow_tz)
                start_time = end_time - datetime.timedelta(hours=24)
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                general_stats = database.get_report_data_for_period(start_time, end_time)
                staff_stats = database.get_staff_performance_for_period(start_time, end_time)
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                total_users = len(database.get_all_users())
                logger.info("üìä –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
                
            except Exception as db_error:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π: {db_error}")
                # Fallback –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                general_stats = (25, 18, 0, {'–ü—Ä—è–º–æ–π –∑–∞—Ö–æ–¥': 15, '–ü–µ—Ä—Å–æ–Ω–∞–ª': 8, '–†–µ–∫–ª–∞–º–∞': 2}, 0)
                staff_stats = {
                    '–û—Ñ–∏—Ü–∏–∞–Ω—Ç': [{'name': '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤', 'brought': 12, 'churn': 1, 'position': '–û—Ñ–∏—Ü–∏–∞–Ω—Ç'}],
                    '–ë–∞—Ä–º–µ–Ω': [{'name': '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞', 'brought': 8, 'churn': 0, 'position': '–ë–∞—Ä–º–µ–Ω'}]
                }
                total_users = 150
        
        return render_template('dashboard.html', 
                             general_stats=general_stats,
                             staff_stats=staff_stats,
                             total_users=total_users,
                             start_time=datetime.datetime.now() - datetime.timedelta(hours=24),
                             end_time=datetime.datetime.now(),
                             db_available=DB_AVAILABLE)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ dashboard: {e}")
        return f"""
        <h1>‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞</h1>
        <p>–î–µ—Ç–∞–ª–∏: {str(e)}</p>
        <p>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'–ü–æ–¥–∫–ª—é—á–µ–Ω–∞' if DB_AVAILABLE else '–ù–µ –¥–æ—Å—Ç—É–ø–Ω–∞'}</p>
        <a href='/health'>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å</a>
        """, 500

@app.route('/api/stats')
def api_stats():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        days = int(request.args.get('days', 7))
        
        if not DB_AVAILABLE:
            # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            daily_stats = []
            for i in range(days):
                date = datetime.datetime.now() - datetime.timedelta(days=i)
                issued = max(0, 20 + (i * 2) + (i % 3 * 5))
                redeemed = max(0, int(issued * (0.6 + (i % 4) * 0.1)))
                daily_stats.append({
                    'date': date.strftime('%Y-%m-%d'),
                    'issued': issued,
                    'redeemed': redeemed,
                    'conversion': round((redeemed / issued) * 100, 1) if issued > 0 else 0
                })
            daily_stats.reverse()
        else:
            moscow_tz = pytz.timezone('Europe/Moscow')
            end_time = datetime.datetime.now(moscow_tz)
            start_time = end_time - datetime.timedelta(days=days)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º
            daily_stats = []
            for i in range(days):
                day_end = end_time - datetime.timedelta(days=i)
                day_start = day_end - datetime.timedelta(days=1)
                
                stats = database.get_report_data_for_period(day_start, day_end)
                daily_stats.append({
                    'date': day_start.strftime('%Y-%m-%d'),
                    'issued': stats[0],
                    'redeemed': stats[1],
                    'conversion': round((stats[1] / stats[0]) * 100, 1) if stats[0] > 0 else 0
                })
            
            daily_stats.reverse()  # –û—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
        
        return jsonify({
            'success': True,
            'data': daily_stats
        })
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ api_stats: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/users')
def api_users():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        page = int(request.args.get('page', 1))
        per_page = int(request.args.get('per_page', 50))
        
        if not DB_AVAILABLE:
            # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            test_users = []
            for i in range(100):
                test_users.append({
                    'user_id': 100000 + i,
                    'username': f'user{i}' if i % 3 == 0 else None,
                    'first_name': f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {i}',
                    'real_name': f'–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ {i}' if i % 2 == 0 else None,
                    'phone_number': f'+7999123{i:04d}' if i % 4 == 0 else None,
                    'status': ['registered', 'active', 'redeemed'][i % 3],
                    'source': ['–ü—Ä—è–º–æ–π –∑–∞—Ö–æ–¥', '–ü–µ—Ä—Å–æ–Ω–∞–ª', '–†–µ–∫–ª–∞–º–∞'][i % 3],
                    'signup_date': (datetime.datetime.now() - datetime.timedelta(days=i)).isoformat(),
                    'contact_shared_date': (datetime.datetime.now() - datetime.timedelta(days=i-1)).isoformat() if i % 4 == 0 else None,
                    'birth_date': f'1990-{(i % 12) + 1:02d}-{(i % 28) + 1:02d}' if i % 5 == 0 else None,
                    'redeem_date': (datetime.datetime.now() - datetime.timedelta(days=i-2)).isoformat() if i % 3 == 2 else None
                })
            
            # –ü—Ä–æ—Å—Ç–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è
            start = (page - 1) * per_page
            end = start + per_page
            users_page = test_users[start:end]
            total = len(test_users)
        else:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏ —Ç—É—Ç –±—É–¥–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—è)
            all_users = database.get_all_users()
            
            # –ü—Ä–æ—Å—Ç–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è
            start = (page - 1) * per_page
            end = start + per_page
            users_page = all_users[start:end]
            total = len(all_users)
        
        return jsonify({
            'success': True,
            'users': users_page,
            'total': total,
            'page': page,
            'per_page': per_page
        })
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ api_users: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/users')
def users_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    return render_template('users.html')

@app.route('/analytics')
def analytics_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π"""
    return render_template('analytics.html')

@app.route('/debug')
def debug_info():
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    return f"""
    <h1>üîß Debug Information</h1>
    <h3>Database Status:</h3>
    <ul>
        <li>DB Available: {DB_AVAILABLE}</li>
        <li>USE_POSTGRES: {os.getenv('USE_POSTGRES')}</li>
        <li>DATABASE_PATH: {os.getenv('DATABASE_PATH')}</li>
        <li>DATABASE_URL set: {'Yes' if os.getenv('DATABASE_URL') else 'No'}</li>
    </ul>
    
    <h3>Environment Variables:</h3>
    <ul>
        <li>BOT_TOKEN set: {'Yes' if os.getenv('BOT_TOKEN') else 'No'}</li>
        <li>GOOGLE_SHEET_KEY set: {'Yes' if os.getenv('GOOGLE_SHEET_KEY') else 'No'}</li>
        <li>PORT: {os.getenv('PORT', '8080')}</li>
        <li>Admins count: {len(ALL_ADMINS)}</li>
    </ul>
    
    <h3>Actions:</h3>
    <ul>
        <li><a href="/">Dashboard</a></li>
        <li><a href="/health">Health Check</a></li>
        <li><a href="/api/stats">API Stats</a></li>
        <li><a href="/users">Users Page</a></li>
    </ul>
    """

@app.route('/health')
def health_check():
    """Healthcheck –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    try:
        status_info = {
            'status': 'OK',
            'timestamp': datetime.datetime.now().isoformat(),
            'service': 'evgenich-bot-admin',
            'database_available': DB_AVAILABLE,
            'environment': {
                'USE_POSTGRES': os.getenv('USE_POSTGRES'),
                'DATABASE_PATH': os.getenv('DATABASE_PATH'),
                'DATABASE_URL_SET': bool(os.getenv('DATABASE_URL')),
                'GOOGLE_SHEETS_ENABLED': bool(os.getenv('GOOGLE_SHEET_KEY')),
                'BOT_TOKEN_SET': bool(os.getenv('BOT_TOKEN')),
            }
        }
        
        if DB_AVAILABLE:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
                database.get_db_connection().close()
                status_info['database_connection'] = "OK"
            except Exception as db_error:
                status_info['database_connection'] = f"ERROR: {str(db_error)}"
                status_info['status'] = 'WARNING'
        else:
            status_info['database_connection'] = "NOT_AVAILABLE"
            
        return jsonify(status_info)
    except Exception as e:
        return jsonify({
            'status': 'ERROR',
            'error': str(e),
            'timestamp': datetime.datetime.now().isoformat()
        }), 500

if __name__ == '__main__':
    port = int(os.getenv('PORT', 8080))
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    logger.info(f"üåê Railway URL: https://evgenich-gift-production.up.railway.app")
    app.run(host='0.0.0.0', port=port, debug=False)

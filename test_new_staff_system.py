#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã QR-–∫–æ–¥–æ–≤ —Å source = "staff"
"""

import sqlite3
import os
import sys
from datetime import datetime, timedelta

def test_new_staff_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Å source = 'staff'."""
    db_path = "data/evgenich_data.db"
    
    if not os.path.exists(db_path):
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ó–∞–ø—É—Å—Ç–∏—Ç–µ init_correct_db.py")
        return
    
    print("üß™ –¢–ï–°–¢ –ù–û–í–û–ô –°–ò–°–¢–ï–ú–´ QR-–ö–û–î–û–í –° SOURCE = 'staff'")
    print("=" * 55)
    
    conn = sqlite3.connect(db_path)
    conn.row_factory = sqlite3.Row
    cur = conn.cursor()
    
    # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    cur.execute("DELETE FROM users WHERE user_id >= 700000000")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    cur.execute("SELECT * FROM staff WHERE status = 'active'")
    staff_members = cur.fetchall()
    
    print(f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {len(staff_members)}")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã –ø–æ QR-–∫–æ–¥–∞–º —Ä–∞–∑–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    test_users = []
    
    for i, staff in enumerate(staff_members):
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        for j in range(3 + i):  # –†–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
            user_id = 700000000 + i * 100 + j
            
            try:
                cur.execute("""
                    INSERT INTO users 
                    (user_id, username, first_name, source, brought_by_staff_id, status, registration_time)
                    VALUES (?, ?, ?, 'staff', ?, 'issued', datetime('now', '-' || ? || ' hours'))
                """, (
                    user_id,
                    f"testuser{i}_{j}",
                    f"–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {i}_{j}",
                    staff['staff_id'],
                    j  # –†–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è
                ))
                
                test_users.append({
                    'user_id': user_id,
                    'staff_name': staff['full_name'],
                    'staff_code': staff['unique_code']
                })
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ direct –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    for i in range(5):
        user_id = 799000000 + i
        try:
            cur.execute("""
                INSERT INTO users 
                (user_id, username, first_name, source, status, registration_time)
                VALUES (?, ?, ?, 'direct', 'issued', datetime('now', '-' || ? || ' hours'))
            """, (
                user_id,
                f"directuser{i}",
                f"–ü—Ä—è–º–æ–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {i}",
                i
            ))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è direct –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    conn.commit()
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(test_users)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ QR-–∫–æ–¥–∞–º")
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ 5 —Ç–µ—Å—Ç–æ–≤—ã—Ö direct –ø–µ—Ä–µ—Ö–æ–¥–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ò–°–¢–û–ß–ù–ò–ö–ê–ú:")
    print("-" * 35)
    
    cur.execute("""
        SELECT source, COUNT(*) as count 
        FROM users 
        WHERE user_id >= 700000000
        GROUP BY source 
        ORDER BY count DESC
    """)
    
    sources = cur.fetchall()
    for source in sources:
        print(f"‚Ä¢ {source['source']}: {source['count']} –ø–µ—Ä–µ—Ö–æ–¥–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
    print(f"\nüë• –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –°–û–¢–†–£–î–ù–ò–ö–ê–ú:")
    print("-" * 35)
    
    cur.execute("""
        SELECT 
            s.full_name,
            s.unique_code,
            COUNT(u.user_id) as attracted_users
        FROM staff s
        LEFT JOIN users u ON s.staff_id = u.brought_by_staff_id 
            AND u.source = 'staff'
            AND u.user_id >= 700000000
        WHERE s.status = 'active'
        GROUP BY s.staff_id, s.full_name, s.unique_code
        ORDER BY attracted_users DESC
    """)
    
    staff_stats = cur.fetchall()
    for staff in staff_stats:
        print(f"‚Ä¢ {staff['full_name']} ({staff['unique_code']}): {staff['attracted_users']} –≥–æ—Å—Ç–µ–π")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ç–æ–ø–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    print(f"\nüèÜ –¢–û–ü –°–û–¢–†–£–î–ù–ò–ö–û–í –ó–ê –ü–û–°–õ–ï–î–ù–ò–ï 24 –ß–ê–°–ê:")
    print("-" * 45)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ database.py
    sys.path.append('.')
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    import test_config
    
    try:
        # –í—Ä–µ–º–µ–Ω–Ω–æ –ø–∞—Ç—á–∏–º sys.modules —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–æ–∫ config.py
        import sys
        sys.modules['config'] = test_config
        
        import database
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–∏–æ–¥ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        end_time = datetime.now()
        start_time = end_time - timedelta(hours=24)
        
        leaderboard = database.get_staff_leaderboard(start_time, end_time)
        
        if leaderboard:
            for i, staff in enumerate(leaderboard, 1):
                print(f"{i}. {staff['full_name']} ({staff['position']})")
                print(f"   –ü—Ä–∏–≤–ª–µ–∫: {staff['attracted_users']} –≥–æ—Å—Ç–µ–π")
                print(f"   –í—ã–¥–∞–Ω–æ –∫—É–ø–æ–Ω–æ–≤: {staff['issued_coupons']}")
                print(f"   –ü–æ–≥–∞—à–µ–Ω–æ –∫—É–ø–æ–Ω–æ–≤: {staff['redeemed_coupons']}")
                print(f"   QR-–∫–æ–¥: {staff['unique_code']}")
                print()
        else:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–æ–ø–∞: {e}")
    
    conn.close()
    print("üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    test_new_staff_system()

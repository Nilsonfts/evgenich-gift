#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤–æ –≤—Ç–æ—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Railway –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
"""

import os
import sys
import json
import gspread
from google.oauth2.service_account import Credentials
import logging
import time
from datetime import datetime, timedelta
import pytz

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

def get_moscow_time():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è (UTC+3)."""
    try:
        moscow_tz = pytz.timezone('Europe/Moscow')
        moscow_time = datetime.now(moscow_tz)
        return moscow_time.strftime('%d.%m.%Y %H:%M')
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        moscow_time = datetime.utcnow() + timedelta(hours=3)
        return moscow_time.strftime('%d.%m.%Y %H:%M')

def parse_booking_date(date_str):
    """–ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä –¥–∞—Ç."""
    if date_str.lower() == '–∑–∞–≤—Ç—Ä–∞':
        tomorrow = datetime.now() + timedelta(days=1)
        return tomorrow.strftime('%d.%m.%Y')
    return date_str

def test_after_railway_fix():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç –≤–æ –≤—Ç–æ—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Railway."""
    
    print("üöÇ –¢–ï–°–¢ –ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø RAILWAY")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    google_sheet_key_raw = os.getenv("GOOGLE_SHEET_KEY")
    google_credentials_json = os.getenv("GOOGLE_CREDENTIALS_JSON")
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    if not google_sheet_key_raw:
        print("‚ùå GOOGLE_SHEET_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("üí° –ù–∞ Railway –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é GOOGLE_SHEET_KEY")
        return False
        
    if not google_credentials_json:
        print("‚ùå GOOGLE_CREDENTIALS_JSON –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ü–∞—Ä—Å–∏–º –∫–ª—é—á–∏
    keys = [key.strip() for key in google_sheet_key_raw.split(',') if key.strip()]
    print(f"üîë –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–π Google Sheets: {len(keys)}")
    
    if len(keys) < 2:
        print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∫–ª—é—á!")
        print("üîß –†–ï–®–ï–ù–ò–ï: –î–æ–±–∞–≤–∏—Ç—å –≤—Ç–æ—Ä–æ–π –∫–ª—é—á —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
        print("   –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ GOOGLE_SHEET_KEY:")
        print(f"   {google_sheet_key_raw}")
        print()
        print("   –ù—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞:")
        print(f"   {google_sheet_key_raw},1QL1CRY3M9Av-WlDS5gswA2Lq14OPdt0TME_dpwPIuC4")
        return False
    
    primary_key = keys[0]
    secondary_key = keys[1]
    
    print(f"‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞: {primary_key}")
    print(f"‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞: {secondary_key}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –∫–ª—é—á –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
    expected_secondary_key = "1QL1CRY3M9Av-WlDS5gswA2Lq14OPdt0TME_dpwPIuC4"
    if secondary_key != expected_secondary_key:
        print(f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ö–ª—é—á –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É")
        print(f"   –¢–µ–∫—É—â–∏–π: {secondary_key}")
        print(f"   –û–∂–∏–¥–∞–µ–º—ã–π: {expected_secondary_key}")
    
    print()
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
        print("üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Google Sheets...")
        credentials_info = json.loads(google_credentials_json)
        credentials = Credentials.from_service_account_info(
            credentials_info,
            scopes=['https://www.googleapis.com/auth/spreadsheets']
        )
        
        gc = gspread.authorize(credentials)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        print("üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É...")
        secondary_sheet = gc.open_by_key(secondary_key)
        print(f"‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –æ—Ç–∫—Ä—ã—Ç–∞: '{secondary_sheet.title}'")
        
        # –ò—â–µ–º —Ü–µ–ª–µ–≤—É—é –≤–∫–ª–∞–¥–∫—É
        target_gid = "871899838"
        target_worksheet = None
        
        print("üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏:")
        for ws in secondary_sheet.worksheets():
            print(f"   - {ws.title} (id={ws.id})")
            if str(ws.id) == target_gid:
                target_worksheet = ws
        
        if not target_worksheet:
            print(f"‚ùå –í–∫–ª–∞–¥–∫–∞ —Å ID {target_gid} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return False
        
        print(f"‚úÖ –¶–µ–ª–µ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: '{target_worksheet.title}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        try:
            headers = target_worksheet.row_values(1)
            print(f"üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã ({len(headers)} –∫–æ–ª–æ–Ω–æ–∫):")
            for i, header in enumerate(headers):
                column_letter = chr(65 + i)  # A, B, C...
                print(f"   {column_letter}: {header}")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏: {e}")
        
        print()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
        print("üìù –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å...")
        
        test_booking_data = {
            'name': f'–¢–ï–°–¢-–ü–æ—Å–ª–µ-–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è-{int(time.time())}',
            'phone': '+79991234567',
            'date': '–∑–∞–≤—Ç—Ä–∞',
            'time': '21:00',
            'guests': '2',
            'reason': '–¢–µ—Å—Ç –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Railway',
            'source': 'source_bot_tg'
        }
        
        user_id = 196614680
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        creation_datetime = get_moscow_time()
        booking_date = parse_booking_date(test_booking_data.get('date', ''))
        datetime_combined = f"{booking_date} {test_booking_data.get('time', '')}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏ (–∫–æ–ª–æ–Ω–∫–∏ A-P)
        row_data = [
            creation_datetime,                      # A: –î–∞—Ç–∞ –ó–∞—è–≤–∫–∏
            "–ì–æ—Å—Ç–µ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",               # B: –ö–∞–Ω–∞–ª
            "üë§ –ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å (—á–µ—Ä–µ–∑ –±–æ—Ç–∞)",          # C: –ö—Ç–æ —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É
            '–ù–æ–≤–∞—è',                               # D: –°—Ç–∞—Ç—É—Å
            f"BID-{int(time.time())}",            # E: ID us (ID –∑–∞—è–≤–∫–∏)
            test_booking_data.get('name', ''),     # F: –ò–º—è –ì–æ—Å—Ç—è
            test_booking_data.get('phone', ''),    # G: –¢–µ–ª–µ—Ñ–æ–Ω
            datetime_combined,                     # H: –î–∞—Ç–∞ / –í—Ä–µ–º—è
            test_booking_data.get('guests', ''),   # I: –ö–æ–ª-–≤–æ –≥–æ—Å—Ç–µ–π
            test_booking_data.get('reason', ''),   # J: –ü–æ–≤–æ–¥ –í–∏–∑–∏—Ç–∞
            'bot_tg',                              # K: UTM Source
            'guest_booking',                       # L: UTM Medium
            'direct_guest',                        # M: UTM Campaign
            'bot_guest_booking',                   # N: UTM Content
            'guest_direct',                        # O: UTM Term
            user_id                                # P: ID TG
        ]
        
        print(f"üìä –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∏–∑ {len(row_data)} –∫–æ–ª–æ–Ω–æ–∫")
        print("üìä –î–∞–Ω–Ω—ã–µ:")
        for i, value in enumerate(row_data):
            column_letter = chr(65 + i)
            print(f"   {column_letter}: {value}")
        
        print()
        print("üíæ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É...")
        target_worksheet.append_row(row_data)
        print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        
        print()
        print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê:")
        print("‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_after_railway_fix()
    
    print()
    print("=" * 60)
    if success:
        print("üéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print("üí° –¢–µ–ø–µ—Ä—å –≤—Å–µ –∑–∞—è–≤–∫–∏ –±—É–¥—É—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –æ–±–µ —Ç–∞–±–ª–∏—Ü—ã")
    else:
        print("‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Railway –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        print("üìã –°–º. –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤ —Ñ–∞–π–ª–µ RAILWAY_SECOND_TABLE_FIX.md")

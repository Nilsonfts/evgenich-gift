#!/usr/bin/env python3
"""
–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç config
"""

import sqlite3
import os

def init_correct_database():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–ø–∫–µ data."""
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data
    data_dir = "data"
    os.makedirs(data_dir, exist_ok=True)
    
    db_path = os.path.join(data_dir, "evgenich_data.db")
    
    print(f"üîß –°–æ–∑–¥–∞—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {db_path}")
    
    conn = sqlite3.connect(db_path)
    cur = conn.cursor()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É staff
    cur.execute("""
        CREATE TABLE IF NOT EXISTS staff (
            staff_id INTEGER PRIMARY KEY AUTOINCREMENT,
            telegram_id INTEGER UNIQUE,
            full_name TEXT NOT NULL,
            short_name TEXT NOT NULL,
            unique_code TEXT UNIQUE NOT NULL,
            position TEXT NOT NULL,
            status TEXT DEFAULT 'active',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É users
    cur.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            source TEXT DEFAULT 'direct',
            referrer_id INTEGER,
            brought_by_staff_id INTEGER,
            status TEXT DEFAULT 'registered',
            phone_number TEXT,
            real_name TEXT,
            birth_date TEXT,
            concept TEXT DEFAULT 'evgenich',
            registration_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (brought_by_staff_id) REFERENCES staff(staff_id)
        )
    """)
    
    # –°–æ–∑–¥–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    cur.execute("""
        CREATE TABLE IF NOT EXISTS settings (
            key TEXT PRIMARY KEY,
            value TEXT,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)
    
    cur.execute("""
        CREATE TABLE IF NOT EXISTS newsletters (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL,
            content TEXT NOT NULL,
            status TEXT DEFAULT 'draft',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            sent_at TIMESTAMP
        )
    """)
    
    conn.commit()
    conn.close()
    
    print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞: {db_path}")
    return db_path

def add_test_staff(db_path):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º telegram_id."""
    conn = sqlite3.connect(db_path)
    cur = conn.cursor()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    test_staff = {
        'telegram_id': 12345678,  # –¢–µ—Å—Ç–æ–≤—ã–π telegram ID
        'full_name': '–¢–µ—Å—Ç –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤–∏—á',
        'short_name': '–¢–µ—Å—Ç –°.',
        'unique_code': 'TEST2024',
        'position': '–¢–µ—Å—Ç–µ—Ä'
    }
    
    try:
        cur.execute("""
            INSERT OR REPLACE INTO staff (telegram_id, full_name, short_name, unique_code, position, status)
            VALUES (?, ?, ?, ?, ?, 'active')
        """, (
            test_staff['telegram_id'],
            test_staff['full_name'], 
            test_staff['short_name'],
            test_staff['unique_code'],
            test_staff['position']
        ))
        
        conn.commit()
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫:")
        print(f"   Telegram ID: {test_staff['telegram_id']}")
        print(f"   –ò–º—è: {test_staff['full_name']}")
        print(f"   –ö–æ–¥: {test_staff['unique_code']}")
        print(f"   QR-—Å—Å—ã–ª–∫–∞: https://t.me/EvgenichTapBarBot?start=w_{test_staff['unique_code']}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {e}")
    
    conn.close()

def check_database(db_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {db_path}")
        return
    
    conn = sqlite3.connect(db_path)
    conn.row_factory = sqlite3.Row
    cur = conn.cursor()
    
    print(f"\nüìä –°–û–î–ï–†–ñ–ò–ú–û–ï –ë–ê–ó–´ –î–ê–ù–ù–´–•: {db_path}")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    cur.execute("SELECT * FROM staff")
    staff = cur.fetchall()
    
    print(f"üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –±–∞–∑–µ: {len(staff)}")
    for s in staff:
        print(f"  ‚Ä¢ {s['full_name']} (ID: {s['staff_id']}, Telegram: {s['telegram_id']}, –ö–æ–¥: {s['unique_code']})")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cur.execute("SELECT COUNT(*) as count FROM users")
    user_count = cur.fetchone()['count']
    print(f"\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {user_count}")
    
    if user_count > 0:
        cur.execute("SELECT user_id, source, brought_by_staff_id FROM users ORDER BY rowid DESC LIMIT 5")
        recent_users = cur.fetchall()
        print("  –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        for u in recent_users:
            print(f"    - {u['user_id']}: {u['source']} (staff_id: {u['brought_by_staff_id']})")
    
    conn.close()

if __name__ == "__main__":
    print("üöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ê–í–ò–õ–¨–ù–û–ô –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –ë–î
    db_path = init_correct_database()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    add_test_staff(db_path)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    check_database(db_path)

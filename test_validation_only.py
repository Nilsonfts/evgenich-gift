#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞—Ç –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import re
import datetime

def test_date_validation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞—Ç —Ä–æ–∂–¥–µ–Ω–∏—è"""
    print("üìÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞—Ç —Ä–æ–∂–¥–µ–Ω–∏—è...")
    
    test_cases = [
        ("15.03.1990", True, "–û–±—ã—á–Ω–∞—è –¥–∞—Ç–∞"),
        ("29.02.2020", True, "–í–∏—Å–æ–∫–æ—Å–Ω—ã–π –≥–æ–¥"),
        ("29.02.2021", False, "–ù–µ –≤–∏—Å–æ–∫–æ—Å–Ω—ã–π –≥–æ–¥"),
        ("32.01.2000", False, "–ù–µ–≤–µ—Ä–Ω—ã–π –¥–µ–Ω—å"),
        ("15.13.2000", False, "–ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Å—è—Ü"),
        ("15/03/1990", False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"),
        ("15.3.1990", False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"),
        ("1.01.2000", False, "–û–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–π –¥–µ–Ω—å"),
        ("01.1.2000", False, "–û–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–π –º–µ—Å—è—Ü"),
        ("01.01.2030", False, "–î–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º"),
        ("01.01.1920", False, "–°–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è –¥–∞—Ç–∞"),
    ]
    
    passed = 0
    total = len(test_cases)
    
    for date_str, expected, description in test_cases:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç DD.MM.YYYY
            if not re.match(r'^\d{2}\.\d{2}\.\d{4}$', date_str):
                is_valid = False
                error_reason = "–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
                day, month, year = map(int, date_str.split('.'))
                birth_date = datetime.date(year, month, day)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –±—É–¥—É—â–µ–º –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è
                today = datetime.date.today()
                if birth_date > today:
                    is_valid = False
                    error_reason = "–¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º"
                else:
                    age = today.year - birth_date.year - ((today.month, today.day) < (birth_date.month, birth_date.day))
                    if age > 100:
                        is_valid = False
                        error_reason = "—Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è –¥–∞—Ç–∞"
                    else:
                        is_valid = True
                        error_reason = "–≤–∞–ª–∏–¥–Ω–∞—è"
            
        except (ValueError, TypeError) as e:
            is_valid = False
            error_reason = f"–∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_correct = is_valid == expected
        if result_correct:
            passed += 1
            
        status = "‚úÖ PASS" if result_correct else "‚ùå FAIL"
        print(f"{status} {date_str:12} | {description:20} | {error_reason}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    return passed == total

def test_name_validation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏–º–µ–Ω"""
    print("\nüë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–º–µ–Ω...")
    
    test_cases = [
        ("–ò–≤–∞–Ω", True, "–û–±—ã—á–Ω–æ–µ –∏–º—è"),
        ("–ê–Ω–Ω–∞-–ú–∞—Ä–∏—è", True, "–ò–º—è —Å –¥–µ—Ñ–∏—Å–æ–º"),
        ("–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞", True, "–ò–º—è —Å –æ—Ç—á–µ—Å—Ç–≤–æ–º"),
        ("–ê", False, "–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ"),
        ("", False, "–ü—É—Å—Ç–æ–µ"),
        ("–ê" * 51, False, "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ"),
        ("–ò–≤–∞–Ω123", True, "–° —Ü–∏—Ñ—Ä–∞–º–∏ (–¥–æ–ø—É—Å—Ç–∏–º–æ)"),
        ("   –ò–≤–∞–Ω   ", True, "–° –ø—Ä–æ–±–µ–ª–∞–º–∏ (–æ–±—Ä–µ–∑–∞–µ—Ç—Å—è)"),
    ]
    
    passed = 0
    total = len(test_cases)
    
    for name, expected, description in test_cases:
        # –õ–æ–≥–∏–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–º–µ–Ω–∏
        clean_name = name.strip()
        is_valid = 2 <= len(clean_name) <= 50
        
        result_correct = is_valid == expected
        if result_correct:
            passed += 1
            
        status = "‚úÖ PASS" if result_correct else "‚ùå FAIL"
        print(f"{status} '{name}' ({len(clean_name)} —Å–∏–º–≤–æ–ª–æ–≤) | {description}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    return passed == total

def main():
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è\n")
    
    dates_ok = test_date_validation()
    names_ok = test_name_validation()
    
    if dates_ok and names_ok:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É")

if __name__ == "__main__":
    main()

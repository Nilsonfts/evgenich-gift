#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
"""

import sqlite3
from datetime import datetime, timedelta
import random

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = "data/evgenich_data.db"

def create_test_data():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç—á–µ—Ç–æ–≤"""
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    
    print("üîß –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
    
    # –°–µ–≥–æ–¥–Ω—è
    today = datetime.now()
    
    # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ 08.08 12:00 - 16:44
    test_period_start = datetime(2025, 8, 8, 12, 0, 0)
    test_period_end = datetime(2025, 8, 8, 16, 44, 0)
    
    # –ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞
    sources = [
        "qr_table", "qr_bar", "qr_wc", "qr_entrance", 
        "instagram", "telegram", "whatsapp", "direct",
        "staff", "recommendation"
    ]
    
    # –°—Ç–∞—Ç—É—Å—ã
    statuses = ["issued", "redeemed", "redeemed_and_left"]
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    test_users = []
    
    # 15 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥
    for i in range(15):
        user_id = 100000 + i
        signup_time = test_period_start + timedelta(
            minutes=random.randint(0, int((test_period_end - test_period_start).total_seconds() / 60))
        )
        
        # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø–æ–¥–∞—Ä–∫–∏
        redeem_time = None
        status = random.choice(statuses)
        if status in ["redeemed", "redeemed_and_left"]:
            redeem_time = signup_time + timedelta(hours=random.randint(1, 3))
        else:
            status = "issued"
        
        source = random.choice(sources)
        
        test_user = {
            'user_id': user_id,
            'username': f'testuser{i}',
            'first_name': f'–¢–µ—Å—Ç{i}',
            'last_name': f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å{i}',
            'signup_date': signup_time.isoformat(),
            'redeem_date': redeem_time.isoformat() if redeem_time else None,
            'status': status,
            'source': source
        }
        test_users.append(test_user)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –µ—â–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è (–Ω–æ –≤–Ω–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞)
    for i in range(10):
        user_id = 200000 + i
        # –î–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è, –Ω–æ –Ω–µ –≤ –ø–µ—Ä–∏–æ–¥ 12:00-16:44
        if random.choice([True, False]):
            # –£—Ç—Ä–µ–Ω–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
            signup_time = today.replace(hour=random.randint(8, 11), minute=random.randint(0, 59))
        else:
            # –í–µ—á–µ—Ä–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
            signup_time = today.replace(hour=random.randint(17, 22), minute=random.randint(0, 59))
        
        status = random.choice(statuses)
        redeem_time = None
        if status in ["redeemed", "redeemed_and_left"]:
            redeem_time = signup_time + timedelta(hours=random.randint(1, 4))
        else:
            status = "issued"
        
        source = random.choice(sources)
        
        test_user = {
            'user_id': user_id,
            'username': f'todayuser{i}',
            'first_name': f'–°–µ–≥–æ–¥–Ω—è{i}',
            'last_name': f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å{i}',
            'signup_date': signup_time.isoformat(),
            'redeem_date': redeem_time.isoformat() if redeem_time else None,
            'status': status,
            'source': source
        }
        test_users.append(test_user)
    
    # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
    for user in test_users:
        cur.execute('''
            INSERT OR REPLACE INTO users 
            (user_id, username, first_name, last_name, signup_date, redeem_date, status, source)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            user['user_id'], user['username'], user['first_name'], user['last_name'],
            user['signup_date'], user['redeem_date'], user['status'], user['source']
        ))
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    staff_members = [
        ("–ê–Ω–Ω–∞ –ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤–∞", "–ú–µ–Ω–µ–¥–∂–µ—Ä"),
        ("–ü–µ—Ç—Ä –û—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤", "–û—Ñ–∏—Ü–∏–∞–Ω—Ç"),
        ("–ú–∞—Ä–∏—è –ë–∞—Ä–º–µ–Ω–æ–≤–∞", "–ë–∞—Ä–º–µ–Ω"),
        ("–ò–≤–∞–Ω –ü–æ–≤–∞—Ä–æ–≤", "–ü–æ–≤–∞—Ä")
    ]
    
    for name, position in staff_members:
        cur.execute('''
            INSERT OR IGNORE INTO staff (name, position, is_active)
            VALUES (?, ?, 1)
        ''', (name, position))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ iiko –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    cur.execute('''
        INSERT OR REPLACE INTO iiko_data (date, nastoika_count)
        VALUES (?, ?)
    ''', (today.strftime('%Y-%m-%d'), random.randint(50, 100)))
    
    conn.commit()
    conn.close()
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(test_users)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(staff_members)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
    print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ iiko")

def show_test_data():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    cur = conn.cursor()
    
    print("\nüìä –ê–Ω–∞–ª–∏–∑ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
    
    # –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cur.execute("SELECT COUNT(*) FROM users")
    total = cur.fetchone()[0]
    print(f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}")
    
    # –ó–∞ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥
    test_start = "2025-08-08 12:00:00"
    test_end = "2025-08-08 16:44:00"
    
    cur.execute('''
        SELECT COUNT(*) FROM users 
        WHERE signup_date BETWEEN ? AND ? 
        AND status IN ('issued', 'redeemed', 'redeemed_and_left')
    ''', (test_start, test_end))
    test_period_issued = cur.fetchone()[0]
    
    cur.execute('''
        SELECT COUNT(*) FROM users 
        WHERE redeem_date BETWEEN ? AND ?
    ''', (test_start, test_end))
    test_period_redeemed = cur.fetchone()[0]
    
    print(f"üé´ –í —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ (12:00-16:44) –≤—ã–¥–∞–Ω–æ: {test_period_issued}")
    print(f"üéÅ –í —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {test_period_redeemed}")
    
    # –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥
    cur.execute('''
        SELECT source, COUNT(*) as count 
        FROM users 
        WHERE signup_date BETWEEN ? AND ? 
        GROUP BY source
        ORDER BY count DESC
    ''', (test_start, test_end))
    
    sources = cur.fetchall()
    if sources:
        print("üìä –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥:")
        for row in sources:
            print(f"  {row['source']}: {row['count']}")
    
    # –ó–∞ —Å–µ–≥–æ–¥–Ω—è
    today = datetime.now().strftime('%Y-%m-%d')
    cur.execute("SELECT COUNT(*) FROM users WHERE date(signup_date) = ?", (today,))
    today_total = cur.fetchone()[0]
    print(f"üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è –≤—Å–µ–≥–æ: {today_total}")
    
    conn.close()

if __name__ == "__main__":
    create_test_data()
    show_test_data()

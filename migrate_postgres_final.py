#!/usr/bin/env python3
"""
–§–ò–ù–ê–õ–¨–ù–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø POSTGRESQL –î–õ–Ø –°–ò–°–¢–ï–ú–´ –†–ê–°–°–´–õ–û–ö
==================================================

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è:
- –°–∏—Å—Ç–µ–º—ã —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (referrer_rewarded, referrer_rewarded_date)  
- –°–∏—Å—Ç–µ–º—ã —Ä–∞—Å—Å—ã–ª–æ–∫ (blocked, block_date)

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
1. –í Railway/production: python migrate_postgres_final.py
2. –õ–æ–∫–∞–ª—å–Ω–æ —Å —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î: DATABASE_URL="your_url" python migrate_postgres_final.py
"""

import os
import sys
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def run_migration():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é PostgreSQL"""
    
    print("üöÄ –ú–ò–ì–†–ê–¶–ò–Ø POSTGRESQL - –°–ò–°–¢–ï–ú–ê –†–ê–°–°–´–õ–û–ö")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º DATABASE_URL
    database_url = os.getenv("DATABASE_URL")
    if not database_url:
        print("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("üí° –î–ª—è Railway —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        print("üí° –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: export DATABASE_URL='your_postgres_url'")
        return False
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º PostgreSQL –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
        import psycopg2
        from urllib.parse import urlparse
        
        # –ü–∞—Ä—Å–∏–º DATABASE_URL
        parsed = urlparse(database_url)
        
        print(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...")
        print(f"   Host: {parsed.hostname}")
        print(f"   Database: {parsed.path[1:]}")
        print(f"   User: {parsed.username}")
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = psycopg2.connect(database_url)
        cursor = conn.cursor()
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
        cursor.execute("""
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name = 'users' AND table_schema = 'public'
        """)
        
        existing_columns = [row[0] for row in cursor.fetchall()]
        print(f"üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ã users: {len(existing_columns)}")
        
        # –ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        columns_to_add = [
            ("referrer_rewarded", "BOOLEAN DEFAULT false"),
            ("referrer_rewarded_date", "TIMESTAMP"),
            ("blocked", "BOOLEAN DEFAULT false"), 
            ("block_date", "TIMESTAMP")
        ]
        
        migration_executed = False
        
        for column_name, column_definition in columns_to_add:
            if column_name not in existing_columns:
                sql = f"ALTER TABLE users ADD COLUMN {column_name} {column_definition};"
                print(f"‚ûï –î–æ–±–∞–≤–ª—è—é –∫–æ–ª–æ–Ω–∫—É: {column_name}")
                cursor.execute(sql)
                migration_executed = True
            else:
                print(f"‚úÖ –ö–æ–ª–æ–Ω–∫–∞ {column_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        if migration_executed:
            conn.commit()
            print("üíæ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        else:
            print("‚ÑπÔ∏è –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        cursor.execute("""
            SELECT column_name, data_type, is_nullable, column_default
            FROM information_schema.columns 
            WHERE table_name = 'users' AND table_schema = 'public'
            AND column_name IN ('referrer_rewarded', 'referrer_rewarded_date', 'blocked', 'block_date')
            ORDER BY column_name
        """)
        
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ú–ò–ì–†–ê–¶–ò–ò:")
        for row in cursor.fetchall():
            column_name, data_type, is_nullable, default_value = row
            print(f"   {column_name}: {data_type} (nullable: {is_nullable}, default: {default_value})")
        
        cursor.close()
        conn.close()
        
        print("\nüéâ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("üöÄ –°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—Å—ã–ª–æ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install psycopg2-binary")
        return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        logger.error(f"Migration error: {e}")
        return False

def show_manual_migration_info():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Ä—É—á–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("\n" + "=" * 60)
    print("üìñ –†–£–ß–ù–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø (–µ—Å–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞)")
    print("=" * 60)
    print("–í—ã–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–∏ SQL –∫–æ–º–∞–Ω–¥—ã –≤ –≤–∞—à–µ–π PostgreSQL –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
    print()
    print("ALTER TABLE users ADD COLUMN IF NOT EXISTS referrer_rewarded BOOLEAN DEFAULT false;")
    print("ALTER TABLE users ADD COLUMN IF NOT EXISTS referrer_rewarded_date TIMESTAMP;")
    print("ALTER TABLE users ADD COLUMN IF NOT EXISTS blocked BOOLEAN DEFAULT false;")
    print("ALTER TABLE users ADD COLUMN IF NOT EXISTS block_date TIMESTAMP;")
    print()
    print("=" * 60)

if __name__ == "__main__":
    print("PostgreSQL Migration for Broadcast System")
    print("=" * 40)
    
    success = run_migration()
    
    if not success:
        show_manual_migration_info()
    
    print(f"\n{'‚úÖ SUCCESS' if success else '‚ö†Ô∏è  CHECK REQUIRED'}")

#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç config
"""

import sqlite3
import os
from datetime import datetime
import pytz

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = "data/evgenich_data.db"

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å–æ –≤—Å–µ–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏"""
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cur.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            phone TEXT,
            birthday TEXT,
            signup_date TEXT,
            redeem_date TEXT,
            status TEXT DEFAULT 'registered',
            source TEXT DEFAULT 'direct',
            staff_member TEXT,
            visit_time INTEGER DEFAULT 0
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
    cur.execute('''
        CREATE TABLE IF NOT EXISTS staff (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            position TEXT NOT NULL,
            is_active BOOLEAN DEFAULT 1
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö iiko
    cur.execute('''
        CREATE TABLE IF NOT EXISTS iiko_data (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            date TEXT NOT NULL,
            nastoika_count INTEGER DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
    cur.execute('''
        CREATE TABLE IF NOT EXISTS conversation_history (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            role TEXT,
            text TEXT,
            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    conn.commit()
    conn.close()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")

def check_database():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    print(f"üìÅ –ü—É—Ç—å –∫ –ë–î: {DB_PATH}")
    
    if not os.path.exists(DB_PATH):
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return
    
    file_size = os.path.getsize(DB_PATH)
    print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ë–î: {file_size} –±–∞–π—Ç")
    
    if file_size == 0:
        print("‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è")
        return
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    cur = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
    cur.execute("SELECT name FROM sqlite_master WHERE type='table'")
    tables = [row[0] for row in cur.fetchall()]
    print(f"üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {tables}")
    
    if 'users' in tables:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cur.execute("SELECT COUNT(*) FROM users")
        total_users = cur.fetchone()[0]
        print(f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")
        
        if total_users > 0:
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
            cur.execute("SELECT user_id, signup_date, status, source FROM users ORDER BY signup_date DESC LIMIT 3")
            print("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:")
            for row in cur.fetchall():
                print(f"  ID: {row['user_id']}, –î–∞—Ç–∞: {row['signup_date']}, –°—Ç–∞—Ç—É—Å: {row['status']}, –ò—Å—Ç–æ—á–Ω–∏–∫: {row['source']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            today = datetime.now().strftime('%Y-%m-%d')
            cur.execute("SELECT COUNT(*) FROM users WHERE date(signup_date) = ?", (today,))
            today_users = cur.fetchone()[0]
            print(f"üìÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è ({today}): {today_users}")
    
    if 'staff' in tables:
        cur.execute("SELECT COUNT(*) FROM staff")
        staff_count = cur.fetchone()[0]
        print(f"üë®‚Äçüíº –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –±–∞–∑–µ: {staff_count}")
    
    conn.close()

def test_report_period():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç—á–µ—Ç–∞ (08.08 12:00 - 16:44)...")
    
    if not os.path.exists(DB_PATH) or os.path.getsize(DB_PATH) == 0:
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return
    
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    cur = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–∏–æ–¥
    start_time = "2025-08-08 12:00:00"
    end_time = "2025-08-08 16:44:00"
    
    cur.execute("SELECT COUNT(*) FROM users WHERE signup_date BETWEEN ? AND ? AND status IN ('issued', 'redeemed', 'redeemed_and_left')", (start_time, end_time))
    issued = cur.fetchone()[0]
    print(f"üé´ –í—ã–¥–∞–Ω–æ –ø–æ–¥–∞—Ä–∫–æ–≤: {issued}")
    
    cur.execute("SELECT COUNT(*) FROM users WHERE redeem_date BETWEEN ? AND ?", (start_time, end_time))
    redeemed = cur.fetchone()[0]
    print(f"üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥–∞—Ä–∫–æ–≤: {redeemed}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    cur.execute("SELECT source, COUNT(*) as count FROM users WHERE signup_date BETWEEN ? AND ? GROUP BY source", (start_time, end_time))
    sources = cur.fetchall()
    if sources:
        print("üìä –ò—Å—Ç–æ—á–Ω–∏–∫–∏:")
        for row in sources:
            print(f"  {row['source']}: {row['count']}")
    else:
        print("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥")
    
    conn.close()

if __name__ == "__main__":
    check_database()
    
    # –ï—Å–ª–∏ –±–∞–∑–∞ –ø—É—Å—Ç–∞, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
    if not os.path.exists(DB_PATH) or os.path.getsize(DB_PATH) == 0:
        init_db()
        print("üîÑ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –±—ã–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        check_database()
    
    test_report_period()

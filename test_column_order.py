#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø–æ—Ä—è–¥–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
"""

import os
import sys
import json
import gspread
from google.oauth2.service_account import Credentials
import logging
import time
from datetime import datetime, timedelta
import pytz

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

def get_moscow_time():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è (UTC+3)."""
    try:
        moscow_tz = pytz.timezone('Europe/Moscow')
        moscow_time = datetime.now(moscow_tz)
        return moscow_time.strftime('%d.%m.%Y %H:%M')
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        moscow_time = datetime.utcnow() + timedelta(hours=3)
        return moscow_time.strftime('%d.%m.%Y %H:%M')

def test_column_order():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–æ—Ä—è–¥–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ."""
    
    print("üîç –¢–ï–°–¢ –ü–û–†–Ø–î–ö–ê –ö–û–õ–û–ù–û–ö –í –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ô –¢–ê–ë–õ–ò–¶–ï")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    google_sheet_key_secondary = os.getenv("GOOGLE_SHEET_KEY_SECONDARY")
    google_credentials_json = os.getenv("GOOGLE_CREDENTIALS_JSON")
    
    if not google_sheet_key_secondary or not google_credentials_json:
        print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
        print("   –≠—Ç–æ—Ç —Ç–µ—Å—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ Railway")
        return False
    
    # –û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–ª–æ–Ω–æ–∫ (–∫–∞–∫ –Ω–∞ —Ñ–æ—Ç–æ)
    expected_structure = [
        "A: –ò–º—è –ì–æ—Å—Ç—è",
        "B: –¢–µ–ª–µ—Ñ–æ–Ω", 
        "C: –î–∞—Ç–∞ / –í—Ä–µ–º—è",
        "D: –ö–æ–ª-–≤–æ –≥–æ—Å—Ç–µ–π",
        "E: –ü–æ–≤–æ–¥ –í–∏–∑–∏—Ç–∞",
        "F: UTM Source (–ò—Å—Ç–æ—á–Ω–∏–∫)",
        "G: –î–∞—Ç–∞ –ó–∞—è–≤–∫–∏",
        "H: –ö–∞–Ω–∞–ª",
        "I: –ö—Ç–æ —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É",
        "J: –°—Ç–∞—Ç—É—Å",
        "K: ID us",
        "L: UTM Medium (–ö–∞–Ω–∞–ª)",
        "M: UTM Campaign (–ö–∞–º–ø–∞–Ω–∏—è)",
        "N: UTM Content (–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ)",
        "O: UTM Term (–ö–ª—é—á/–î–∞—Ç–∞)",
        "P: ID TG"
    ]
    
    print("üìã –û–ñ–ò–î–ê–ï–ú–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –ö–û–õ–û–ù–û–ö:")
    for i, col in enumerate(expected_structure):
        print(f"   {col}")
    print()
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
        print("üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ...")
        credentials_info = json.loads(google_credentials_json)
        credentials = Credentials.from_service_account_info(
            credentials_info,
            scopes=['https://www.googleapis.com/auth/spreadsheets']
        )
        
        gc = gspread.authorize(credentials)
        secondary_sheet = gc.open_by_key(google_sheet_key_secondary)
        
        # –ù–∞–π—Ç–∏ –Ω—É–∂–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        target_gid = "871899838"
        target_worksheet = None
        
        for ws in secondary_sheet.worksheets():
            if str(ws.id) == target_gid:
                target_worksheet = ws
                break
        
        if not target_worksheet:
            print(f"‚ùå –¶–µ–ª–µ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return False
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≤–∫–ª–∞–¥–∫–∞: '{target_worksheet.title}'")
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = target_worksheet.row_values(1)
        print(f"üìä –¢–ï–ö–£–©–ò–ï –ó–ê–ì–û–õ–û–í–ö–ò –í –¢–ê–ë–õ–ò–¶–ï ({len(headers)} –∫–æ–ª–æ–Ω–æ–∫):")
        for i, header in enumerate(headers):
            column_letter = chr(65 + i)  # A, B, C...
            print(f"   {column_letter}: {header}")
        print()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö
        print("üìù –¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï:")
        creation_datetime = get_moscow_time()
        datetime_combined = "31.07.2025 20:00"
        
        test_row_data = [
            "–¢–ï–°–¢-–ü–æ—Ä—è–¥–æ–∫-–ö–æ–ª–æ–Ω–æ–∫",              # A: –ò–º—è –ì–æ—Å—Ç—è
            "+79991234567",                      # B: –¢–µ–ª–µ—Ñ–æ–Ω
            datetime_combined,                   # C: –î–∞—Ç–∞ / –í—Ä–µ–º—è
            "3",                                 # D: –ö–æ–ª-–≤–æ –≥–æ—Å—Ç–µ–π
            "–¢–µ—Å—Ç –ø–æ—Ä—è–¥–∫–∞ –∫–æ–ª–æ–Ω–æ–∫",              # E: –ü–æ–≤–æ–¥ –í–∏–∑–∏—Ç–∞
            "bot_tg",                            # F: UTM Source
            creation_datetime,                   # G: –î–∞—Ç–∞ –ó–∞—è–≤–∫–∏
            "–ì–æ—Å—Ç–µ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",             # H: –ö–∞–Ω–∞–ª
            "üë§ –ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å (—á–µ—Ä–µ–∑ –±–æ—Ç–∞)",        # I: –ö—Ç–æ —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É
            "–ù–æ–≤–∞—è",                             # J: –°—Ç–∞—Ç—É—Å
            f"BID-{int(time.time())}",          # K: ID us
            "guest_booking",                     # L: UTM Medium
            "direct_guest",                      # M: UTM Campaign
            "bot_guest_booking",                 # N: UTM Content
            "guest_direct",                      # O: UTM Term
            196614680                            # P: ID TG
        ]
        
        for i, value in enumerate(test_row_data):
            column_letter = chr(65 + i)
            print(f"   {column_letter}: {value}")
        print()
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        print("üíæ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É...")
        target_worksheet.append_row(test_row_data)
        print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞!")
        
        print()
        print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print("‚úÖ –ü–æ—Ä—è–¥–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É")
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏")
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_column_order()
    
    print()
    print("=" * 60)
    if success:
        print("üéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –ü–æ—Ä—è–¥–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π!")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É - –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö")
    else:
        print("‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã")

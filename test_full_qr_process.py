#!/usr/bin/env python3
"""
–°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ QR-–∫–æ–¥–∞: –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≥–æ—Å—Ç—è
"""

import sqlite3
import os
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ
logging.basicConfig(level=logging.INFO, format='%(asctime)s [%(levelname)s] %(message)s')

def simulate_staff_registration():
    """–°–∏–º—É–ª–∏—Ä—É–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞."""
    print("üë§ –°–ò–ú–£–õ–Ø–¶–ò–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –°–û–¢–†–£–î–ù–ò–ö–ê")
    print("=" * 50)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    telegram_id = 999999999  # –¢–µ—Å—Ç–æ–≤—ã–π ID
    full_name = "–¢–µ—Å—Ç –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"
    position = "–¢–µ—Å—Ç–µ—Ä"
    
    conn = sqlite3.connect('bot_database.db')
    conn.row_factory = sqlite3.Row
    cur = conn.cursor()
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è
    parts = full_name.split()
    short_name = f"{parts[0]} {parts[1][0]}." if len(parts) > 1 else parts[0]
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥
    base_code = parts[0].lower().strip().replace(' ', '')
    unique_code = f"{base_code.upper()}2024"
    
    print(f"üìù –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:")
    print(f"   Telegram ID: {telegram_id}")
    print(f"   –ü–æ–ª–Ω–æ–µ –∏–º—è: {full_name}")
    print(f"   –ö–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è: {short_name}")
    print(f"   –î–æ–ª–∂–Ω–æ—Å—Ç—å: {position}")
    print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥: {unique_code}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫
    cur.execute("SELECT * FROM staff WHERE telegram_id = ?", (telegram_id,))
    existing = cur.fetchone()
    
    if existing:
        print(f"   ‚ö†Ô∏è –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º...")
        cur.execute("""
            UPDATE staff 
            SET full_name = ?, short_name = ?, position = ?, status = 'active'
            WHERE telegram_id = ?
        """, (full_name, short_name, position, telegram_id))
    else:
        print(f"   ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞...")
        cur.execute("""
            INSERT INTO staff (telegram_id, full_name, short_name, unique_code, position, status)
            VALUES (?, ?, ?, ?, ?, 'active')
        """, (telegram_id, full_name, short_name, unique_code, position))
    
    conn.commit()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    cur.execute("SELECT * FROM staff WHERE telegram_id = ?", (telegram_id,))
    staff_member = cur.fetchone()
    
    if staff_member:
        print(f"   üéâ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
        print(f"   üîë ID –≤ –±–∞–∑–µ: {staff_member['staff_id']}")
        print(f"   üì± QR-—Å—Å—ã–ª–∫–∞: https://t.me/EvgenichTapBarBot?start=w_{staff_member['unique_code']}")
        
        conn.close()
        return staff_member['unique_code']
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!")
        conn.close()
        return None

def simulate_guest_transition(staff_code):
    """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –≥–æ—Å—Ç—è –ø–æ QR-–∫–æ–¥—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞."""
    print(f"\nüë• –°–ò–ú–£–õ–Ø–¶–ò–Ø –ü–ï–†–ï–•–û–î–ê –ì–û–°–¢–Ø")
    print("=" * 50)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥–æ—Å—Ç—è
    user_id = 888888888
    username = "test_guest"
    first_name = "–¢–µ—Å—Ç–æ–≤—ã–π –ì–æ—Å—Ç—å"
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º payload –æ—Ç QR-–∫–æ–¥–∞
    payload = f"w_{staff_code}"
    
    print(f"üîó –ì–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –ø–æ —Å—Å—ã–ª–∫–µ:")
    print(f"   https://t.me/EvgenichTapBarBot?start={payload}")
    print(f"   User ID: {user_id}")
    print(f"   Username: @{username}")
    print()
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ user_commands.py
    conn = sqlite3.connect('bot_database.db')
    conn.row_factory = sqlite3.Row
    cur = conn.cursor()
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º payload
    referrer_id = None
    brought_by_staff_id = None
    source = 'direct'
    
    if payload.startswith('w_'):
        staff_code_extracted = payload.replace('w_', '')
        logging.info(f"üîç –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É —Å –∫–æ–¥–æ–º: {staff_code_extracted} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id})")
        
        # –ò—â–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        cur.execute("SELECT * FROM staff WHERE unique_code = ? AND status = 'active'", (staff_code_extracted,))
        staff_member = cur.fetchone()
        
        if staff_member:
            brought_by_staff_id = staff_member['staff_id']
            source = f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {staff_member['short_name']}"
            logging.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username}) —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É: {staff_member['full_name']} (ID: {staff_member['staff_id']}, –∫–æ–¥: {staff_code_extracted})")
            
            print(f"‚úÖ –£–°–ü–ï–®–ù–ê–Ø –ü–†–ò–í–Ø–ó–ö–ê –ö –°–û–¢–†–£–î–ù–ò–ö–£:")
            print(f"   –ù–∞–π–¥–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: {staff_member['full_name']}")
            print(f"   ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {staff_member['staff_id']}")
            print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {source}")
        else:
            logging.warning(f"‚ùå QR-–∫–æ–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω! –ö–æ–¥ '{staff_code_extracted}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤. –ü–µ—Ä–µ—Ö–æ–¥ –∑–∞—Å—á–∏—Ç–∞–Ω –∫–∞–∫ 'direct'.")
            source = 'direct'
            brought_by_staff_id = None
            
            print(f"‚ùå –°–û–¢–†–£–î–ù–ò–ö –ù–ï –ù–ê–ô–î–ï–ù:")
            print(f"   –ö–æ–¥: {staff_code_extracted}")
            print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {source}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    cur.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    existing_user = cur.fetchone()
    
    if existing_user:
        print(f"   ‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ")
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–º–∏—Ç–∏—Ä—É–µ–º add_new_user)
        try:
            cur.execute("""
                INSERT INTO users (user_id, username, first_name, source, referrer_id, brought_by_staff_id, status, created_at)
                VALUES (?, ?, ?, ?, ?, ?, 'registered', datetime('now'))
            """, (user_id, username, first_name, source, referrer_id, brought_by_staff_id))
            
            conn.commit()
            print(f"   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É")
            print(f"   üìä –ò—Å—Ç–æ—á–Ω–∏–∫ –≤ –ë–î: {source}")
            print(f"   üë§ brought_by_staff_id: {brought_by_staff_id}")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    conn.close()

def check_results():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–º—É–ª—è—Ü–∏–∏."""
    print(f"\nüìä –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("=" * 50)
    
    conn = sqlite3.connect('bot_database.db')
    conn.row_factory = sqlite3.Row
    cur = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cur.execute("""
        SELECT u.user_id, u.source, u.brought_by_staff_id, s.full_name as staff_name, u.created_at
        FROM users u
        LEFT JOIN staff s ON u.brought_by_staff_id = s.staff_id
        ORDER BY u.rowid DESC
        LIMIT 5
    """)
    
    recent_users = cur.fetchall()
    
    print("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    for user in recent_users:
        if user['brought_by_staff_id']:
            print(f"   ‚úÖ {user['user_id']}: {user['source']} ‚Üí –ø—Ä–∏–≤–µ–ª {user['staff_name']} (ID: {user['brought_by_staff_id']})")
        else:
            print(f"   ‚ùå {user['user_id']}: {user['source']} ‚Üí –±–µ–∑ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
    
    conn.close()

if __name__ == "__main__":
    print("üß™ –ü–û–õ–ù–ê–Ø –°–ò–ú–£–õ–Ø–¶–ò–Ø –ü–†–û–¶–ï–°–°–ê QR-–ö–û–î–ê –°–û–¢–†–£–î–ù–ò–ö–ê")
    print("=" * 60)
    
    # –®–∞–≥ 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    staff_code = simulate_staff_registration()
    
    if staff_code:
        # –®–∞–≥ 2: –ü–µ—Ä–µ—Ö–æ–¥ –≥–æ—Å—Ç—è
        simulate_guest_transition(staff_code)
        
        # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        check_results()
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, —Ç–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω")

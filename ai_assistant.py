import openai
import logging
from config import OPENAI_API_KEY

openai.api_key = OPENAI_API_KEY

def get_ai_recommendation(user_query: str, menu_data: list) -> str:
    """
    Отправляет запрос пользователя и меню в нейросеть для получения рекомендации.
    """
    # Форматируем данные меню в строку, понятную для ИИ
    menu_string = ""
    for category in menu_data:
        menu_string += f"\n## Категория: {category['title']}\n"
        menu_string += f"Описание категории: {category.get('category_narrative', '')}\n"
        for item in category['items']:
            menu_string += f"\n### Настойка: {item['name']} ({item['price']})\n"
            menu_string += f"История и атмосфера: {item.get('narrative_desc', 'Нет описания.')}\n"
            details_str = ", ".join([f"{k}: {v}" for k, v in item.get('details', {}).items()])
            menu_string += f"Технические детали (вкус, формула): {details_str}\n"

    # --- ВАШ НОВЫЙ, ОБНОВЛЕННЫЙ SYSTEM_PROMPT ---
    system_prompt = (
        "Ты — «Евгенич», он же Сергей Жуков, хозяин хаты и главный по настроению в советской рюмочной-караоке на Невском 53. "
        "По совместительству — харизматичный, чуть подвыпивший ИИ-сомелье-советчик.\n\n"

        "К каждому гостю обращаешься исключительно «товарищ», говоришь тепло, с юмором и ностальгией по 80-м: "
        "шутки про ГОСТ, дефицит, плёнки, самовары и Пугачёву приветствуются. "
        "Мата не злоупотребляй — лишь лёгкий «перчик» для задора.\n\n"

        "У тебя в памяти меню настоек. Для каждой позиции есть:\n"
        "• «История и атмосфера» — романтичные, смешные или ламповые байки.\n"
        "• «Технические детали» — вкус, ингредиенты, ощущения.\n\n"

        "Алгоритм работы:\n"
        "1. Внимательно прочитай, чего хочет товарищ.\n"
        "2. По «Техническим деталям» подбери 1-2 настойки, идеально попадающие во вкус запроса.\n"
        "3. Объясни выбор: сначала по вкусу, потом живо через «Историю и атмосферу» — как настоящий Жуков-рассказчик.\n\n"

        "Стиль ответа:\n"
        "• Душевный, остроумный, чуть ироничный, как тост за праздничным столом.\n"
        "• Не перечисляй всё меню, дай максимум две рекомендации.\n"
        "• Вставляй колоритные обороты («бахнем», «лампово», «как очередь за сервелатом»), но не перебарщивай.\n"
• Заверши лёгким приглашением к бару или фирменным тостом-подмигиванием.\n\n"

        "Если запрос размытый — предложи универсальную настойку.\n"
        "Если конкретный — будь максимально точен.\n"
        "И помни, товарищ: тут не ресторан — тут душа поёт, а Евгенич наливает!"
    )

    try:
        completion = openai.chat.completions.create(
            model="gpt-4o",  # gpt-4o отлично справится с такой ролью
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": f"Вот полное меню, которое нужно использовать для ответа:\n{menu_string}\n\nА вот мой запрос: {user_query}"}
            ],
            temperature=0.8,  # Чуть повысим "креативность" для более живых ответов
            max_tokens=350    # Немного увеличим лимит для развернутых ответов
        )
        return completion.choices[0].message.content
    except Exception as e:
        logging.error(f"Ошибка при обращении к OpenAI API: {e}")
        return "Товарищ, мой мыслительный аппарат дал сбой. Провода, видать, заискрили. Попробуй обратиться ко мне чуть позже."

import openai
import logging
from config import OPENAI_API_KEY

openai.api_key = OPENAI_API_KEY

def get_ai_recommendation(user_query: str, menu_data: list, food_menu_data: dict, conversation_history: list) -> str:
    """
    Отправляет запрос, оба меню и историю диалога в нейросеть для получения рекомендации.
    """
    # 1. Форматирование меню в понятный для ИИ текст
    menu_string = ""
    for category in menu_data:
        menu_string += f"\n## Категория: {category['title']}\n"
        for item in category['items']:
            menu_string += f"\n### Настойка: {item['name']} ({item['price']})\n"
            menu_string += f"История и атмосфера: {item.get('narrative_desc', 'Нет описания.')}\n"
            details_str = ", ".join([f"{k}: {v}" for k, v in item.get('details', {}).items()])
            menu_string += f"Технические детали: {details_str}\n"
    
    food_string = ""
    for category, items in food_menu_data.items():
        food_string += f"\n## {category}\n"
        for item in items:
            food_string += f"- {item['name']} ({item['price']}р)\n"

    # 2. ФИНАЛЬНЫЙ SYSTEM_PROMPT: ОБЪЕДИНЕНИЕ ХАРАКТЕРА И ЛОГИКИ
    system_prompt = (
        "# РОЛЬ И ХАРАКТЕР\n"
        "Ты — «Евгенич», он же Сергей Жуков, хозяин хаты и главный по настроению в советской рюмочной-караоке на Невском 53. "
        "По совместительству — харизматичный, чуть подвыпивший ИИ-сомелье-советчик.\n"
        "К каждому гостю обращаешься исключительно «товарищ», говоришь тепло, с юмором и ностальгией по 80-м: "
        "шутки про ГОСТ, дефицит, плёнки, самовары и Пугачёву приветствуются. "
        "Мата не злоупотребляй — лишь лёгкий «перчик» для задора.\n\n"

        "# СТИЛЬ ОТВЕТА\n"
        "Душевный, остроумный, чуть ироничный, как тост за праздничным столом. "
        "Вставляй колоритные обороты («бахнем», «лампово», «как очередь за сервелатом»), но не перебарщивай. "
        "И помни, товарищ: тут не ресторан — тут душа поёт, а Евгенич наливает!\n\n"

        "# ЗАДАЧИ И АЛГОРИТМЫ\n"
        "## 1. Рекомендация еды и напитков:\n"
        "Если гость просит совета, используй «Технические детали» для точного подбора и «Историю и атмосферу» для красивого рассказа. "
        "Всегда предлагай закуску к настойке. Давай не более 1-2 рекомендаций, чтобы не утомлять.\n\n"

        "## 2. Бронирование столов:\n"
        "Это четкая последовательность действий.\n"
        "**ШАГ 1: ПРЕДЛОЖИ ВАРИАНТЫ.**\n"
        "СРАЗУ, как только услышал слова 'бронь', 'столик', 'занять место', твой ПЕРВЫЙ ответ должен быть строго по этому шаблону:\n"
        "'Конечно, товарищ! Занять местечко у нас можно по-разному, выбирай, как тебе удобнее:\n"
        "- **Для своих:** Написать в наш секретный чат в Telegram: @stolik_evgenicha\n"
        "- **По-старинке:** Позвонить по дисковому телефону: 8 (812) 317-23-53\n"
        "- **Самостоятельно:** Через модную онлайн-форму: https://evgenichspb.restoplace.ws/\n"
        "- **Через меня:** Если хочешь, я могу сам записать твою заявку, только скажи.'\n\n"
        
        "**ШАГ 2: СОБЕРИ ДАННЫЕ.**\n"
        "ТОЛЬКО если гость ответил 'давай ты', 'запиши сам' или что-то похожее, начинай сбор информации. Задавай по одному вопросу за раз. Список данных для сбора:\n"
        "1. Имя\n"
        "2. Контактный номер телефона (ОБЯЗАТЕЛЬНО!)\n"
        "3. Количество гостей\n"
- "4. Дата\n"
        "5. Время\n"
        "6. Повод (День Рождения и т.д.)\n\n"

        "**ШАГ 3: ПОДТВЕРДИ И ОТПРАВЬ.**\n"
        "Когда все данные собраны, покажи их гостю для подтверждения ('Всё верно, товарищ?'). После его 'да', сгенерируй финальный ответ с тегом `[BOOKING_REQUEST]`.\n"
        "Пример финального ответа: 'Принято! Передал твою заявку. [BOOKING_REQUEST]Имя: Сергей, Телефон: 89211234567, Гостей: 4, Дата: 15.07, Время: 20:00, Повод: посидеть с друзьями'"
    )
    
    # 4. Сборка сообщения для отправки
    messages_to_send = []
    messages_to_send.append({"role": "system", "content": system_prompt})
    messages_to_send.extend(conversation_history)
    messages_to_send.append({"role": "user", "content": f"Вот меню для справки, если понадобится:\nНастойки:\n{menu_string}\n\nЕда:\n{food_string}\n\nМой запрос: {user_query}"})

    try:
        completion = openai.chat.completions.create(
            model="gpt-4o",
            messages=messages_to_send,
            temperature=0.8,
            max_tokens=250
        )
        return completion.choices[0].message.content
    except Exception as e:
        logging.error(f"Ошибка при обращении к OpenAI API: {e}")
        return "Товарищ, мой мыслительный аппарат дал сбой. Провода, видать, заискрили. Попробуй обратиться ко мне чуть позже."

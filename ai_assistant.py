# ai_assistant.py
"""
Evgenich AI Assistant
=====================
Unified module that powers the conversational logic of the
r—é–º–æ—á–Ω–∞—è‚Äë–∫–≤–∞—Ä—Ç–∏—Ä–Ω–∏–∫ helper ¬´–ï–≤–≥–µ–Ω–∏—á¬ª.
"""

from __future__ import annotations
import logging
from typing import List, Dict, Any

import openai
from config import OPENAI_API_KEY
from knowledge_base import KNOWLEDGE_BASE_TEXT

# OpenAI initialisation
openai.api_key = OPENAI_API_KEY
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s ‚Äî %(levelname)s ‚Äî %(name)s ‚Äî %(message)s",
)
logger = logging.getLogger("evgenich_ai")

# --- Helper‚Äëformatting functions ---
def _format_drink_menu(menu_data: List[Dict[str, Any]] | None) -> str:
    """Return drink menu in a markdown‚Äëlike string expected by the prompt."""
    if not menu_data:
        return ""
    parts: list[str] = []
    for category in menu_data:
        parts.append(f"\n## –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category['title']}")
        for item in category.get("items", []):
            parts.append(
                f"\n### –ù–∞—Å—Ç–æ–π–∫–∞: {item['name']} ({item['price']})\n"
                f"–ò—Å—Ç–æ—Ä–∏—è –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞: {item.get('narrative_desc', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è.')}\n"
            )
    return "\n".join(parts)

def _format_food_menu(food_menu_data: Dict[str, Any] | None) -> str:
    """Return food menu in a markdown‚Äëlike string expected by the prompt."""
    if not food_menu_data:
        return ""
    parts: list[str] = []
    for category, items in food_menu_data.items():
        parts.append(f"\n## {category}")
        for item in items:
            parts.append(f"- {item['name']} ({item['price']}—Ä)")
    return "\n".join(parts)


def _create_system_prompt(updates_string: str) -> str:
    """Compose the large system prompt that defines –ï–≤–≥–µ–Ω–∏—á‚Äôs persona."""
    logger.info("–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –ï–≤–≥–µ–Ω–∏—á–∞‚Ä¶")

    return (
        "# –†–û–õ–¨\n"
        "–¢—ã ‚Äî ¬´–ï–≤–≥–µ–Ω–∏—á¬ª. –î—É—à–∞ —Ä—é–º–æ—á–Ω–æ–π-–∫–≤–∞—Ä—Ç–∏—Ä–Ω–∏–∫–∞. –¢–≤–æ–π –æ–±—Ä–∞–∑ ‚Äî —ç—Ç–æ –°–µ—Ä–≥–µ–π –ñ—É–∫–æ–≤ –∏–∑ ¬´–†—É–∫–∏ –í–≤–µ—Ä—Ö!¬ª –≤ –∞—Ç–º–æ—Å—Ñ–µ—Ä–µ 80‚Äë—Ö: —Å–≤–æ–π –ø–∞—Ä–µ–Ω—å, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ —Ä–∞–¥ –≥–æ—Å—Ç—è–º.\n\n"

        "# –•–ê–†–ê–ö–¢–ï–†\n"
        "- –¢–µ–ø–ª—ã–π, –Ω–æ—Å—Ç–∞–ª—å–≥–∏—á–µ—Å–∫–∏–π —Ç–æ–Ω.\n"
        "- –†–∞–∑–≥–æ–≤–æ—Ä ¬´–ø–æ –¥—É—à–∞–º¬ª, –±–µ–∑ –ø–∞—Ñ–æ—Å–∞.\n"
        "- –û—Ç—Å—ã–ª–∫–∏ –∫ 80‚Äì90‚Äë–º, –∫–æ–º–º—É–Ω–∞–ª–∫–∞–º, —Å—Ç–∞—Ä—ã–º —Ñ–∏–ª—å–º–∞–º.\n\n"

        "# –ü–ê–ú–Ø–¢–¨\n"
        "–í—Å—ë, —á—Ç–æ —Ç—ã –∑–Ω–∞–µ—à—å –æ –±–∞—Ä–µ ‚Äî –∏–∑ —Ä–∞—Å—Å–∫–∞–∑–∞ –Ω–∏–∂–µ. –û—Ç–≤–µ—á–∞–π, –±—É–¥—Ç–æ –≤—Å–ø–æ–º–∏–Ω–∞–µ—à—å —Å–∞–º, –ø–µ—Ä–µ—Å–∫–∞–∑—ã–≤–∞—è —Ñ–∞–∫—Ç—ã —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏.\n"
        "--- –ù–ê–ß–ê–õ–û –†–ê–°–°–ö–ê–ó–ê ---\n"
        f"{KNOWLEDGE_BASE_TEXT}\n"
        "--- –ö–û–ù–ï–¶ –†–ê–°–°–ö–ê–ó–ê ---\n\n"

        "# –¢–ï–ö–£–©–ò–ï –î–ê–ù–ù–´–ï\n"
        f"–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ: {updates_string}\n"
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö –ø–æ–¥–∞–≤–∞–π –∫–∞–∫ —Å–µ–∫—Ä–µ—Ç –¥–ª—è —Å–≤–æ–∏—Ö. –ï—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ—Ç, –≥–æ–≤–æ—Ä–∏ –º—è–≥–∫–æ: ¬´–†–∞–∑–æ–±—Ä–∞–ª–∏, –∫–∞–∫ –≥–æ—Ä—è—á–∏–µ –ø–∏—Ä–æ–∂–∫–∏¬ª.\n\n"

        "# –°–¢–ò–õ–¨ –û–¢–í–ï–¢–ê (–û–ß–ï–ù–¨ –í–ê–ñ–ù–û)\n"
        "1.  **–ö–†–ê–¢–ö–û–°–¢–¨:** –û—Ç–≤–µ—Ç ‚Äî 1-2 –∫–æ—Ä–æ—Ç–∫–∏—Ö, –¥—É—à–µ–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ù–µ –ø–∏—à–∏ –¥–ª–∏–Ω–Ω—ã–µ –∞–±–∑–∞—Ü—ã. –ö—Ä–∞—Ç–∫–æ—Å—Ç—å ‚Äî —Ç–≤–æ—ë –≤—Å—ë.\n"
        "2.  **–û–ë–†–ê–©–ï–ù–ò–Ø:** –ß–µ—Ä–µ–¥—É–π –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –≥–æ—Å—Ç—é: ¬´—Ç–æ–≤–∞—Ä–∏—â¬ª, ¬´–¥—Ä—É–∂–∏—â–µ¬ª, ¬´–º–∏–ª —á–µ–ª–æ–≤–µ–∫¬ª, ¬´–¥–æ—Ä–æ–≥–æ–π¬ª. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ.\n"
        "3.  **–ë–ï–ó –ñ–ò–†–ù–û–ì–û –®–†–ò–§–¢–ê:** –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç (`*—Ç–µ–∫—Å—Ç*`). –í–æ–æ–±—â–µ.\n"
        "4.  **–≠–ú–û–î–ó–ò:** –í –∫–æ–Ω—Ü–µ –æ—Ç–≤–µ—Ç–∞ —É–º–µ—Å—Ç–Ω–æ –¥–æ–±–∞–≤—å 1-2 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å–º–∞–π–ª–∏–∫–∞: ü•É, üëç, üé∂, ü§´, üòâ, üòÑ, üìç.\n"
        "5.  **–û–¢–°–¢–£–ü–´:** –ò—Å–ø–æ–ª—å–∑—É–π –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏.\n\n"

        "# –°–¶–ï–ù–ê–†–ò–ò –û–¢–í–ï–¢–û–í\n"
        "1.  **–ì–æ—Å—Ç—å –∑–¥–æ—Ä–æ–≤–∞–µ—Ç—Å—è:** –û—Ç–≤–µ—Ç—å –¥—É—à–µ–≤–Ω–æ. –ü—Ä–∏–º–µ—Ä: ¬´–ù—É, –ø—Ä–æ—Ö–æ–¥–∏, —Ç–æ–≤–∞—Ä–∏—â. –£ –Ω–∞—Å —Ç—É—Ç –ø–æ—Å–∏–¥–µ–ª–∫–∏ ‚Äî –Ω–æ—Å—Ç–∞–ª—å–≥–∏—è –ø–æ –¥—É—à–∞–º. üòâ¬ª\n"
        "2.  **–ì–æ—Å—Ç—å —Ö–æ—á–µ—Ç –ó–ê–ë–†–û–ù–ò–†–û–í–ê–¢–¨ —Å—Ç–æ–ª:** –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: `[START_BOOKING_FLOW]`\n"
        "3.  **–ì–æ—Å—Ç—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –±–∞—Ä–µ, –º–µ–Ω—é, –∞–∫—Ü–∏—è—Ö:** –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —Å–≤–æ—é –ü–ê–ú–Ø–¢–¨, –∏ –¥–æ–±–∞–≤—å —ç–º–æ–¥–∑–∏. –ü—Ä–∏–º–µ—Ä –Ω–∞ –≤–æ–ø—Ä–æ—Å '–∫–∞–∫ –≤–∞—Å –Ω–∞–π—Ç–∏?': ¬´–ò—â–∏ –º–µ–Ω—è –Ω–∞ –ù–µ–≤—Å–∫–æ–º, 53, —É–≥–æ–ª —Å –õ–∏—Ç–µ–π–Ω—ã–º. –£–≤–∏–¥–∏—à—å –∫—Ä–∞—Å–Ω—É—é –∞—Ä–∫—É –∏ –≤—ã–≤–µ—Å–∫—É '–ï–í–ì–ï–ù–ò–ß' ‚Äî —Ç–µ–±–µ —Ç—É–¥–∞! üìç¬ª\n"
        "4.  **–ì–æ—Å—Ç—å –ø–∏—à–µ—Ç –≥–ª—É–ø–æ—Å—Ç—å:** –û—Ç–≤–µ—á–∞–π —Å –¥–æ–±—Ä–æ–π –∏—Ä–æ–Ω–∏–µ–π. –ü—Ä–∏–º–µ—Ä: ¬´–û—Ö, –º–∏–ª —á–µ–ª–æ–≤–µ–∫, —Ç–µ–±–µ —Ç–æ—á–Ω–æ –≤ –±–∞—Ä, –∞ –Ω–µ –≤ –º—É–∑–µ–π? –ù–æ –º—ã –≤—Å—è–∫–∏—Ö –ª—é–±–∏–º! üòÑ¬ª\n"
    )

# --- PUBLIC API ---
def get_ai_recommendation(
    user_query: str,
    conversation_history: List[Dict[str, str]] | None = None,
    *,
    menu_data: List[Dict[str, Any]] | None = None,
    food_menu_data: Dict[str, Any] | None = None,
    daily_updates: Dict[str, str] | None = None,
    model: str = "gpt-4o",
    temperature: float = 0.85,
    max_tokens: int = 200, # –£–º–µ–Ω—å—à–∞–µ–º, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç—ã –±—ã–ª–∏ –∫–æ—Ä–æ—á–µ
) -> str:
    """High‚Äëlevel entry point used by the Telegram layer."""
    
    logger.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: %s", user_query)

    menu_string = _format_drink_menu(menu_data)
    food_string = _format_food_menu(food_menu_data)

    updates_string = f"–°–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è: {daily_updates.get('special', '–Ω–µ—Ç')}. –í —Å—Ç–æ–ø‚Äë–ª–∏—Å—Ç–µ: {daily_updates.get('stop-list', '–Ω–∏—á–µ–≥–æ')}" if daily_updates else "–Ω–µ—Ç –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"

    messages: list[dict[str, str]] = [
        {"role": "system", "content": _create_system_prompt(updates_string)}
    ]

    if conversation_history:
        messages.extend(conversation_history[-4:])

    user_content = f"–ú–æ–π –∑–∞–ø—Ä–æ—Å: {user_query}\n\n(–î–ª—è —Å–ø—Ä–∞–≤–∫–∏, –≤–æ—Ç —á–∞—Å—Ç—å –º–µ–Ω—é:\n–ù–∞—Å—Ç–æ–π–∫–∏:\n{menu_string}\n\n–ï–¥–∞:\n{food_string})"
    messages.append({"role": "user", "content": user_content})

    try:
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ OpenAI API‚Ä¶")
        completion = openai.chat.completions.create(
            model=model,
            messages=messages,
            temperature=temperature,
            max_tokens=max_tokens,
        )
        response_text = completion.choices[0].message.content
        logger.info("–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
        # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ª–∏—à–Ω–∏–µ –∫–∞–≤—ã—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏–Ω–æ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç AI
        return response_text.strip().strip('"')

    except Exception as exc:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI API: %s", exc)
        return "–¢–æ–≤–∞—Ä–∏—â, –º–æ–π –º—ã—Å–ª–∏—Ç–µ–ª—å–Ω—ã–π –∞–ø–ø–∞—Ä–∞—Ç –¥–∞–ª —Å–±–æ–π. –ü—Ä–æ–≤–æ–¥–∞, –≤–∏–¥–∞—Ç—å, –∑–∞–∏—Å–∫—Ä–∏–ª–∏. –ü–æ–ø—Ä–æ–±—É–π –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫–æ –º–Ω–µ —á—É—Ç—å –ø–æ–∑–∂–µ."

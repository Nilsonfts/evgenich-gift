# games.py
"""
–ú–æ–¥—É–ª—å –¥–ª—è –º–∏–Ω–∏-–∏–≥—Ä: –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã, –∫–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã –∏ –¥—Ä—É–≥–∏–µ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–ª—è –≥–æ—Å—Ç–µ–π.
"""

import random
import logging
from typing import Dict, List, Any
from datetime import datetime, timedelta

logger = logging.getLogger("evgenich_games")

# --- –í–ò–ö–¢–û–†–ò–ù–´ ---

QUIZ_QUESTIONS = [
    {
        "question": "–ö–∞–∫–∞—è —Å–∞–º–∞—è –ø–æ–ø—É–ª—è—Ä–Ω–∞—è –Ω–∞—Å—Ç–æ–π–∫–∞ –≤ –Ω–∞—à–µ–º –±–∞—Ä–µ?",
        "options": ["–ö–µ–¥—Ä–æ–≤–∫–∞", "–•—Ä–µ–Ω–æ–≤—É—Ö–∞", "–ö–ª—é–∫–≤–µ–Ω–Ω–∞—è", "–ü–µ—Ä—Ü–æ–≤–∫–∞"],
        "correct": 0,
        "explanation": "–ö–µ–¥—Ä–æ–≤–∫–∞ - –Ω–∞—à —Ö–∏—Ç! –ì–æ—Ç–æ–≤–∏—Ç—Å—è –ø–æ —Å—Ç–∞—Ä–∏–Ω–Ω–æ–º—É —Ä–µ—Ü–µ–ø—Ç—É —Å –∫–µ–¥—Ä–æ–≤—ã–º–∏ –æ—Ä–µ—à–∫–∞–º–∏ üå∞"
    },
    {
        "question": "–í –∫–∞–∫–æ–º –≥–æ–¥—É –≥—Ä—É–ø–ø–∞ '–†—É–∫–∏ –í–≤–µ—Ä—Ö!' –≤—ã–ø—É—Å—Ç–∏–ª–∞ —Ö–∏—Ç '–ö—Ä–æ—à–∫–∞ –º–æ—è'?",
        "options": ["1995", "1997", "1999", "2001"],
        "correct": 1,
        "explanation": "1997 –≥–æ–¥! –ó–æ–ª–æ—Ç–æ–µ –≤—Ä–µ–º—è —Ä—É—Å—Å–∫–æ–π –ø–æ–ø-–º—É–∑—ã–∫–∏ üéµ"
    },
    {
        "question": "–ö–∞–∫–∞—è –∑–∞–∫—É—Å–∫–∞ –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –Ω–∞—Å—Ç–æ–π–∫–∞–º?",
        "options": ["–°–µ–ª–µ–¥–∫–∞ –ø–æ–¥ —à—É–±–æ–π", "–°–æ–ª–µ–Ω—ã–µ –æ–≥—É—Ä—á–∏–∫–∏", "–°–∞–ª–æ —Å —á–µ—Å–Ω–æ–∫–æ–º", "–í—Å–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–µ"],
        "correct": 3,
        "explanation": "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ö –Ω–∞—Å—Ç–æ–π–∫–∞–º –ø–æ–¥—Ö–æ–¥—è—Ç –≤—Å–µ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ä—É—Å—Å–∫–∏–µ –∑–∞–∫—É—Å–∫–∏ ü•í"
    },
    {
        "question": "–°–∫–æ–ª—å–∫–æ –≥—Ä–∞–¥—É—Å–æ–≤ –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π —Ä—É—Å—Å–∫–æ–π –Ω–∞—Å—Ç–æ–π–∫–µ?",
        "options": ["25-30¬∞", "35-40¬∞", "45-50¬∞", "55-60¬∞"],
        "correct": 1,
        "explanation": "35-40¬∞ - –∏–¥–µ–∞–ª—å–Ω–∞—è –∫—Ä–µ–ø–æ—Å—Ç—å –¥–ª—è –Ω–∞—Å—Ç–æ–µ–∫. –ù–µ —Å–ª–∏—à–∫–æ–º –∫—Ä–µ–ø–∫–æ, –Ω–æ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º! ü•É"
    },
    {
        "question": "–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∏—Ç—å –Ω–∞—Å—Ç–æ–π–∫—É?",
        "options": ["–ó–∞–ª–ø–æ–º", "–ú–∞–ª–µ–Ω—å–∫–∏–º–∏ –≥–ª–æ—Ç–∫–∞–º–∏", "–†–∞–∑–±–∞–≤–ª—è—Ç—å –≤–æ–¥–æ–π", "–° –∑–∞–∫—É—Å–∫–æ–π"],
        "correct": 1,
        "explanation": "–ù–∞—Å—Ç–æ–π–∫—É –Ω—É–∂–Ω–æ —Å–º–∞–∫–æ–≤–∞—Ç—å –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –≥–ª–æ—Ç–∫–∞–º–∏, —á—Ç–æ–±—ã –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –≤—Å–µ –Ω—é–∞–Ω—Å—ã –≤–∫—É—Å–∞ üòã"
    }
]

WHEEL_PRIZES = [
    {"name": "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Ä—é–º–∫–∞ –Ω–∞—Å—Ç–æ–π–∫–∏", "probability": 15, "type": "drink"},
    {"name": "–°–∫–∏–¥–∫–∞ 20% –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑", "probability": 20, "type": "discount"},
    {"name": "–ö–æ–º–ø–ª–∏–º–µ–Ω—Ç –æ—Ç –∑–∞–≤–µ–¥–µ–Ω–∏—è", "probability": 25, "type": "treat"},
    {"name": "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ 500‚ÇΩ", "probability": 5, "type": "certificate"},
    {"name": "–§–∏—Ä–º–µ–Ω–Ω–∞—è —Ä—é–º–∫–∞ –≤ –ø–æ–¥–∞—Ä–æ–∫", "probability": 10, "type": "souvenir"},
    {"name": "–£—á–∞—Å—Ç–∏–µ –≤ –∑–∞–∫—Ä—ã—Ç–æ–π –¥–µ–≥—É—Å—Ç–∞—Ü–∏–∏", "probability": 8, "type": "event"},
    {"name": "–£–¥–∞—á–∞ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!", "probability": 17, "type": "nothing"}
]

def get_random_quiz_question() -> Dict[str, Any]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã."""
    return random.choice(QUIZ_QUESTIONS)

def check_quiz_answer(question_index: int, user_answer: int) -> Dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.
    
    Args:
        question_index: –ò–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞ –≤ —Å–ø–∏—Å–∫–µ QUIZ_QUESTIONS
        user_answer: –ò–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (0-3)
    
    Returns:
        Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
    """
    if question_index >= len(QUIZ_QUESTIONS):
        return {"error": "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞"}
    
    question = QUIZ_QUESTIONS[question_index]
    is_correct = user_answer == question["correct"]
    
    return {
        "is_correct": is_correct,
        "correct_answer": question["options"][question["correct"]],
        "explanation": question["explanation"],
        "reward": "üéâ +50 –±–∞–ª–ª–æ–≤!" if is_correct else "üòî +10 –±–∞–ª–ª–æ–≤ –∑–∞ —É—á–∞—Å—Ç–∏–µ"
    }

def spin_wheel_of_fortune() -> Dict[str, Any]:
    """
    –ö—Ä—É—Ç–∏—Ç –∫–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—ã–∏–≥—Ä—ã—à.
    
    Returns:
        Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–∞
    """
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100
    spin_result = random.randint(1, 100)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
    cumulative_probability = 0
    for prize in WHEEL_PRIZES:
        cumulative_probability += prize["probability"]
        if spin_result <= cumulative_probability:
            return {
                "prize": prize["name"],
                "type": prize["type"],
                "message": f"üé∞ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: {prize['name']}!",
                "claim_code": generate_claim_code(prize["type"])
            }
    
    # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Ç–µ—à–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏–∑
    return {
        "prize": "–£–¥–∞—á–∞ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!",
        "type": "nothing",
        "message": "üé∞ –í —ç—Ç–æ—Ç —Ä–∞–∑ –Ω–µ –ø–æ–≤–µ–∑–ª–æ, –Ω–æ –Ω–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∑–∞–≤—Ç—Ä–∞.",
        "claim_code": None
    }

def generate_claim_code(prize_type: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞."""
    if prize_type == "nothing":
        return None
    
    timestamp = datetime.now().strftime("%H%M%S")
    random_part = random.randint(100, 999)
    return f"{prize_type.upper()[:3]}{timestamp}{random_part}"

# --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –ò–ì–†–ê–ú–ò –í –ë–ê–ó–ï –î–ê–ù–ù–´–• ---

def save_game_result(user_id: int, game_type: str, result: Dict[str, Any]) -> bool:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        game_type: –¢–∏–ø –∏–≥—Ä—ã ("quiz" –∏–ª–∏ "wheel")
        result: –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã
    
    Returns:
        True –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
    """
    try:
        import database
        import sqlite3
        
        conn = sqlite3.connect(database.DB_FILE)
        cur = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∏–≥—Ä, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        cur.execute("""
            CREATE TABLE IF NOT EXISTS game_results (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                game_type TEXT NOT NULL,
                result TEXT NOT NULL,
                played_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                claim_code TEXT,
                is_claimed BOOLEAN DEFAULT FALSE
            )
        """)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        import json
        cur.execute("""
            INSERT INTO game_results (user_id, game_type, result, claim_code)
            VALUES (?, ?, ?, ?)
        """, (
            user_id,
            game_type,
            json.dumps(result, ensure_ascii=False),
            result.get("claim_code")
        ))
        
        conn.commit()
        conn.close()
        
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã {game_type} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã: {e}")
        return False

def get_user_game_stats(user_id: int) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        Dict —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏–≥—Ä
    """
    try:
        import database
        import sqlite3
        import json
        
        conn = sqlite3.connect(database.DB_FILE)
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–≥—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cur.execute("""
            SELECT game_type, result, played_at, is_claimed
            FROM game_results
            WHERE user_id = ?
            ORDER BY played_at DESC
        """, (user_id,))
        
        games = cur.fetchall()
        conn.close()
        
        if not games:
            return {
                "total_games": 0,
                "quiz_games": 0,
                "wheel_spins": 0,
                "quiz_correct": 0,
                "prizes_won": 0,
                "unclaimed_prizes": 0
            }
        
        stats = {
            "total_games": len(games),
            "quiz_games": 0,
            "wheel_spins": 0,
            "quiz_correct": 0,
            "prizes_won": 0,
            "unclaimed_prizes": 0
        }
        
        for game in games:
            result = json.loads(game["result"])
            
            if game["game_type"] == "quiz":
                stats["quiz_games"] += 1
                if result.get("is_correct"):
                    stats["quiz_correct"] += 1
            elif game["game_type"] == "wheel":
                stats["wheel_spins"] += 1
                if result.get("type") != "nothing":
                    stats["prizes_won"] += 1
                    if not game["is_claimed"]:
                        stats["unclaimed_prizes"] += 1
        
        return stats
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"}

def can_play_game(user_id: int, game_type: str) -> Dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏).
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        game_type: –¢–∏–ø –∏–≥—Ä—ã
    
    Returns:
        Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã
    """
    try:
        import database
        import sqlite3
        
        conn = sqlite3.connect(database.DB_FILE)
        cur = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–≥—Ä—É —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
        cur.execute("""
            SELECT played_at FROM game_results
            WHERE user_id = ? AND game_type = ?
            ORDER BY played_at DESC
            LIMIT 1
        """, (user_id, game_type))
        
        last_game = cur.fetchone()
        conn.close()
        
        if not last_game:
            return {"can_play": True, "message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É!"}
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä—ã
        last_play_time = datetime.fromisoformat(last_game[0].replace(' ', 'T'))
        now = datetime.now()
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ - —Ä–∞–∑ –≤ —á–∞—Å, –∫–æ–ª–µ—Å–æ - —Ä–∞–∑ –≤ 3 —á–∞—Å–∞
        cooldown_hours = 1 if game_type == "quiz" else 3
        time_since_last = now - last_play_time
        
        if time_since_last < timedelta(hours=cooldown_hours):
            remaining_time = timedelta(hours=cooldown_hours) - time_since_last
            hours, remainder = divmod(int(remaining_time.total_seconds()), 3600)
            minutes = remainder // 60
            
            return {
                "can_play": False,
                "message": f"‚è∞ –°–ª–µ–¥—É—é—â–∞—è –∏–≥—Ä–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ {hours}—á {minutes}–º–∏–Ω"
            }
        
        return {"can_play": True, "message": "–ú–æ–∂–Ω–æ –∏–≥—Ä–∞—Ç—å!"}
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã: {e}")
        return {"can_play": True, "message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É!"}

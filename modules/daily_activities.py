# daily_activities.py
"""
–ú–æ–¥—É–ª—å –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π: —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–Ω—è, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö.
"""

import random
import logging
from typing import Dict, Any, Optional
from datetime import datetime, timedelta
import json

logger = logging.getLogger("evgenich_daily")

# --- –°–ï–ö–†–ï–¢–ù–´–ô –ü–ê–†–û–õ–¨ –î–ù–Ø ---

PASSWORD_WORDS = [
    "–∫–µ–¥—Ä–æ–≤–∫–∞", "–Ω–∞—Å—Ç–æ–π–∫–∞", "–µ–≤–≥–µ–Ω–∏—á", "–¥—É—à–µ–≤–Ω–æ", "—Ç–æ–≤–∞—Ä–∏—â", "–∑–∞–∫—É—Å–∫–∞",
    "—Ä—é–º–æ—á–Ω–∞—è", "–¥—Ä—É–∂–∏—â–µ", "–ø–æ–¥–∞—Ä–æ–∫", "—Å–µ–º—å–¥–µ—Å—è—Ç", "–≤–∏–Ω—Ç–∞–∂", "–∞—Ç–º–æ—Å—Ñ–µ—Ä–∞",
    "–∫–≤–∞—Ä—Ç–∏—Ä–Ω–∏–∫", "—Å—Ç–∞—Ä–∏–Ω–∞", "—Ç—Ä–∞–¥–∏—Ü–∏—è", "–≥–∞—Ä–º–æ—à–∫–∞", "–∑–∞—Å—Ç–æ–ª—å–µ", "—Ä–∞–∑–≥–æ–≤–æ—Ä"
]

def generate_daily_password() -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å –¥–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã."""
    today = datetime.now()
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É –∫–∞–∫ —Å–∏–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
    random.seed(today.strftime("%Y%m%d"))
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ
    password = random.choice(PASSWORD_WORDS)
    return password

def get_password_of_the_day() -> Dict[str, Any]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–æ–ª–µ –¥–Ω—è.
    
    Returns:
        Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞—Ä–æ–ª–µ
    """
    password = generate_daily_password()
    
    return {
        "password": password,
        "date": datetime.now().strftime("%d.%m.%Y"),
        "reward": "üéÅ –°–∫–∏–¥–∫–∞ 15% –Ω–∞ –ª—é–±—É—é –Ω–∞—Å—Ç–æ–π–∫—É",
        "hint": f"–ü–∞—Ä–æ–ª—å —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ {len(password)} –±—É–∫–≤ –∏ —Å–≤—è–∑–∞–Ω —Å –Ω–∞—à–∏–º –±–∞—Ä–æ–º",
        "expires_at": datetime.now().replace(hour=23, minute=59, second=59)
    }

def check_daily_password(user_input: str) -> Dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è –¥–Ω—è.
    
    Args:
        user_input: –í–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–∞—Ä–æ–ª—å
    
    Returns:
        Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
    """
    correct_password = generate_daily_password()
    is_correct = user_input.lower().strip() == correct_password.lower()
    
    return {
        "is_correct": is_correct,
        "password": correct_password,
        "reward": "üéÅ –°–∫–∏–¥–∫–∞ 15% –Ω–∞ –ª—é–±—É—é –Ω–∞—Å—Ç–æ–π–∫—É" if is_correct else None,
        "message": (
            f"üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–∞—Ä–æ–ª—å –¥–Ω—è: '{correct_password}'\n\n"
            f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–∫–∏–¥–∫—É 15% –Ω–∞ –ª—é–±—É—é –Ω–∞—Å—Ç–æ–π–∫—É!\n"
            f"–ü–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É."
        ) if is_correct else f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n–ü–æ–¥—Å–∫–∞–∑–∫–∞: –ø–∞—Ä–æ–ª—å —Å–≤—è–∑–∞–Ω —Å –Ω–∞—à–∏–º –±–∞—Ä–æ–º –∏ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ {len(correct_password)} –±—É–∫–≤."
    }

def save_password_attempt(user_id: int, password: str, is_correct: bool) -> bool:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ø—ã—Ç–∫—É –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        password: –í–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
        is_correct: –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è
    
    Returns:
        True –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
    """
    try:
        import database
        import sqlite3
        
        conn = sqlite3.connect(database.DB_FILE)
        cur = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø–∞—Ä–æ–ª–µ–π –¥–Ω—è, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        cur.execute("""
            CREATE TABLE IF NOT EXISTS daily_password_attempts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                password_attempt TEXT NOT NULL,
                is_correct BOOLEAN NOT NULL,
                attempted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                reward_claimed BOOLEAN DEFAULT FALSE
            )
        """)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ø—ã—Ç–∫—É
        cur.execute("""
            INSERT INTO daily_password_attempts (user_id, password_attempt, is_correct)
            VALUES (?, ?, ?)
        """, (user_id, password, is_correct))
        
        conn.commit()
        conn.close()
        
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {password} ({'–ø—Ä–∞–≤–∏–ª—å–Ω–æ' if is_correct else '–Ω–µ–≤–µ—Ä–Ω–æ'})")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ø—ã—Ç–∫–∏ –ø–∞—Ä–æ–ª—è: {e}")
        return False

def get_user_password_stats(user_id: int) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        Dict —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    """
    try:
        import database
        import sqlite3
        
        conn = sqlite3.connect(database.DB_FILE)
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()
        
        today = datetime.now().strftime("%Y-%m-%d")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        cur.execute("""
            SELECT * FROM daily_password_attempts
            WHERE user_id = ? AND DATE(attempted_at) = ?
            ORDER BY attempted_at DESC
        """, (user_id, today))
        
        attempts = cur.fetchall()
        conn.close()
        
        if not attempts:
            return {
                "attempts_today": 0,
                "correct_today": False,
                "can_try": True,
                "last_attempt": None
            }
        
        correct_attempts = [a for a in attempts if a["is_correct"]]
        
        return {
            "attempts_today": len(attempts),
            "correct_today": len(correct_attempts) > 0,
            "can_try": len(correct_attempts) == 0,  # –ú–æ–∂–Ω–æ –ø—Ä–æ–±–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –µ—â–µ –Ω–µ —É–≥–∞–¥–∞–ª
            "last_attempt": dict(attempts[0]) if attempts else None
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ä–æ–ª–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"}

# --- –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –û –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø–• ---

def create_event(title: str, description: str, event_date: datetime, event_type: str = "general") -> Dict[str, Any]:
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.
    
    Args:
        title: –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        description: –û–ø–∏—Å–∞–Ω–∏–µ
        event_date: –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        event_type: –¢–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (concert, party, tasting, etc.)
    
    Returns:
        Dict —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    """
    try:
        import database
        import sqlite3
        
        conn = sqlite3.connect(database.DB_FILE)
        cur = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        cur.execute("""
            CREATE TABLE IF NOT EXISTS events (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                title TEXT NOT NULL,
                description TEXT,
                event_date TIMESTAMP NOT NULL,
                event_type TEXT DEFAULT 'general',
                is_active BOOLEAN DEFAULT TRUE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                max_participants INTEGER,
                current_participants INTEGER DEFAULT 0
            )
        """)
        
        # –°–æ–∑–¥–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
        cur.execute("""
            INSERT INTO events (title, description, event_date, event_type)
            VALUES (?, ?, ?, ?)
        """, (title, description, event_date, event_type))
        
        event_id = cur.lastrowid
        conn.commit()
        conn.close()
        
        logger.info(f"–°–æ–∑–¥–∞–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {title} –Ω–∞ {event_date}")
        
        return {
            "id": event_id,
            "title": title,
            "description": description,
            "event_date": event_date,
            "event_type": event_type,
            "is_active": True
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {e}")
        return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"}

def get_upcoming_events(days_ahead: int = 7) -> list:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.
    
    Args:
        days_ahead: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞
    
    Returns:
        –°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    """
    try:
        import database
        import sqlite3
        
        conn = sqlite3.connect(database.DB_FILE)
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()
        
        end_date = datetime.now() + timedelta(days=days_ahead)
        
        cur.execute("""
            SELECT * FROM events
            WHERE is_active = TRUE 
            AND event_date BETWEEN datetime('now') AND ?
            ORDER BY event_date ASC
        """, (end_date,))
        
        events = cur.fetchall()
        conn.close()
        
        return [dict(event) for event in events]
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {e}")
        return []

def register_for_event(user_id: int, event_id: int) -> Dict[str, Any]:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        event_id: ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    
    Returns:
        Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    """
    try:
        import database
        import sqlite3
        
        conn = sqlite3.connect(database.DB_FILE)
        cur = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        cur.execute("""
            CREATE TABLE IF NOT EXISTS event_registrations (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                event_id INTEGER NOT NULL,
                registered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                status TEXT DEFAULT 'registered',
                UNIQUE(user_id, event_id)
            )
        """)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cur.execute("""
            SELECT id FROM event_registrations
            WHERE user_id = ? AND event_id = ?
        """, (user_id, event_id))
        
        if cur.fetchone():
            conn.close()
            return {
                "success": False,
                "message": "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
            }
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cur.execute("""
            INSERT INTO event_registrations (user_id, event_id)
            VALUES (?, ?)
        """, (user_id, event_id))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        cur.execute("""
            UPDATE events 
            SET current_participants = current_participants + 1
            WHERE id = ?
        """, (event_id,))
        
        conn.commit()
        conn.close()
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {event_id}")
        
        return {
            "success": True,
            "message": "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!"
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {e}")
        return {
            "success": False,
            "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        }

#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–æ–≤ —Å –ø–æ–¥–ø–∏—Å—è–º–∏ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
"""

import qrcode
from PIL import Image, ImageDraw, ImageFont
import os
import sqlite3

def get_staff_from_db():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        conn = sqlite3.connect("data/evgenich_data.db")
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()
        
        cur.execute("SELECT * FROM staff WHERE status = 'active' ORDER BY full_name")
        staff_list = cur.fetchall()
        conn.close()
        
        return [dict(row) for row in staff_list]
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return []

def create_qr_with_name(staff_member, output_dir="qr_codes_with_names"):
    """–°–æ–∑–¥–∞–µ—Ç QR-–∫–æ–¥ —Å –ø–æ–¥–ø–∏—Å—å—é –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏."""
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
    
    # –î–∞–Ω–Ω—ã–µ
    full_name = staff_member['full_name']
    position = staff_member['position']
    telegram_id = staff_member['telegram_id']
    unique_code = staff_member['unique_code']
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞
    url = f"https://t.me/evgenichspbbot?start=w_{unique_code}"
    
    # –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_L,
        box_size=8,
        border=2,
    )
    qr.add_data(url)
    qr.make(fit=True)
    
    # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ QR-–∫–æ–¥–∞
    qr_img = qr.make_image(fill_color="black", back_color="white")
    
    # –†–∞–∑–º–µ—Ä—ã
    qr_size = qr_img.size
    text_height = 80  # –í—ã—Å–æ—Ç–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
    total_width = qr_size[0]
    total_height = qr_size[1] + text_height
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –±–µ–ª—ã–º —Ñ–æ–Ω–æ–º
    final_img = Image.new('RGB', (total_width, total_height), 'white')
    
    # –í—Å—Ç–∞–≤–ª—è–µ–º QR-–∫–æ–¥
    final_img.paste(qr_img, (0, 0))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    draw = ImageDraw.Draw(final_img)
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç
        font_large = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 20)
        font_small = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 16)
    except:
        # –ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
        font_large = ImageFont.load_default()
        font_small = ImageFont.load_default()
    
    # –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
    name_text = full_name
    position_text = f"({position})"
    id_text = f"ID: {telegram_id}"
    
    # –ü–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    text_y_start = qr_size[1] + 5
    
    # –ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è (–∫—Ä—É–ø–Ω–æ)
    try:
        name_bbox = draw.textbbox((0, 0), name_text, font=font_large)
        name_width = name_bbox[2] - name_bbox[0]
    except:
        name_width = len(name_text) * 12  # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞
    name_x = (total_width - name_width) // 2
    draw.text((name_x, text_y_start), name_text, fill="black", font=font_large)
    
    # –î–æ–ª–∂–Ω–æ—Å—Ç—å (–º–µ–ª—å—á–µ)
    try:
        pos_bbox = draw.textbbox((0, 0), position_text, font=font_small)
        pos_width = pos_bbox[2] - pos_bbox[0]
    except:
        pos_width = len(position_text) * 10  # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞
    pos_x = (total_width - pos_width) // 2
    draw.text((pos_x, text_y_start + 25), position_text, fill="gray", font=font_small)
    
    # ID (—Å–æ–≤—Å–µ–º –º–µ–ª–∫–æ)
    try:
        id_bbox = draw.textbbox((0, 0), id_text, font=font_small)
        id_width = id_bbox[2] - id_bbox[0]
    except:
        id_width = len(id_text) * 10  # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞
    id_x = (total_width - id_width) // 2
    draw.text((id_x, text_y_start + 45), id_text, fill="gray", font=font_small)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    filename = f"{output_dir}/{full_name.replace(' ', '_')}_{unique_code}.png"
    final_img.save(filename)
    
    return filename, url

def main():
    """–°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥—ã —Å –ø–æ–¥–ø–∏—Å—è–º–∏ –¥–ª—è –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤."""
    print("üéØ –°–û–ó–î–ê–ù–ò–ï QR-–ö–û–î–û–í –° –ü–û–î–ü–ò–°–Ø–ú–ò –ò–ú–ï–ù")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã
    staff_list = get_staff_from_db()
    
    if not staff_list:
        print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    print(f"üë• –ù–∞–π–¥–µ–Ω–æ {len(staff_list)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
    print()
    
    for staff in staff_list:
        print(f"üìù –°–æ–∑–¥–∞—é QR-–∫–æ–¥ –¥–ª—è: {staff['full_name']}")
        
        try:
            filename, url = create_qr_with_name(staff)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω: {filename}")
            print(f"üîó –°—Å—ã–ª–∫–∞: {url}")
            print(f"üë§ –ü–æ–¥–ø–∏—Å—å: {staff['full_name']} ({staff['position']})")
            print()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {staff['full_name']}: {e}")
            print()
    
    print("üéâ –í—Å–µ QR-–∫–æ–¥—ã —Å –ø–æ–¥–ø–∏—Å—è–º–∏ —Å–æ–∑–¥–∞–Ω—ã!")
    print("üìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ 'qr_codes_with_names/'")
    print("üñ®Ô∏è –ì–æ—Ç–æ–≤—ã –∫ –ø–µ—á–∞—Ç–∏!")

if __name__ == "__main__":
    main()

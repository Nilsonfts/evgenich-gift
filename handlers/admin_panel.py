# /handlers/admin_panel.py

import logging
import datetime
from telebot import types
from telebot.apihelper import ApiTelegramException
import pytz

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å—ë –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ
from config import ADMIN_IDS
import database
import texts
import keyboards
import settings_manager

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ ---
def generate_report_text(start_time, end_time, issued, redeemed, redeemed_users, sources, total_redeem_time_seconds):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞."""
    conversion_rate = round((redeemed / issued) * 100, 1) if issued > 0 else 0
    avg_redeem_time_str = "–Ω/–¥"
    
    if redeemed > 0:
        avg_seconds = total_redeem_time_seconds / redeemed
        hours, remainder = divmod(int(avg_seconds), 3600)
        minutes, _ = divmod(remainder, 60)
        avg_redeem_time_str = f"{hours} —á {minutes} –º–∏–Ω"
    
    report_date = end_time.strftime('%d.%m.%Y')
    header = f"üìä **–û—Ç—á–µ—Ç–ü–æ–¥–ø–∏—Å–∫–∞–¢–ì ({report_date})** üìä\n\n"
    
    period_str = f"**–ü–µ—Ä–∏–æ–¥:** —Å {start_time.strftime('%H:%M %d.%m')} –ø–æ {end_time.strftime('%H:%M %d.%m')}\n\n"
    stats = (f"‚úÖ **–í—ã–¥–∞–Ω–æ –∫—É–ø–æ–Ω–æ–≤:** {issued}\n"
             f"ü•É **–ü–æ–≥–∞—à–µ–Ω–æ –Ω–∞—Å—Ç–æ–µ–∫:** {redeemed}\n"
             f"üìà **–ö–æ–Ω–≤–µ—Ä—Å–∏—è:** {conversion_rate}%\n"
             f"‚è±Ô∏è **–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è:** {avg_redeem_time_str}\n")
             
    sources_str = ""
    if sources:
        sources_str += "\n**–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:**\n"
        sorted_sources = sorted(sources.items(), key=lambda item: item[1], reverse=True)
        for source, count in sorted_sources:
            sources_str += f"‚Ä¢ {source}: {count}\n"
            
    return header + period_str + stats + sources_str


def send_report(bot, chat_id, start_time, end_time):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –õ–û–ö–ê–õ–¨–ù–û–ô –ë–î –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç."""
    try:
        issued, redeemed, redeemed_users, sources, total_redeem_time = database.get_report_data_for_period(start_time, end_time)
        if issued == 0:
            bot.send_message(chat_id, f"–ó–∞ –ø–µ—Ä–∏–æ–¥ —Å {start_time.strftime('%d.%m %H:%M')} –ø–æ {end_time.strftime('%d.%m %H:%M')} –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞.")
            return
        report_text = generate_report_text(start_time, end_time, issued, redeemed, redeemed_users, sources, total_redeem_time)
        bot.send_message(chat_id, report_text, parse_mode="Markdown")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –≤ —á–∞—Ç {chat_id}: {e}")
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞.")

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
def register_admin_handlers(bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –∏ –∫–æ–ª–±—ç–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""

    def is_admin(user_id):
        return user_id in ADMIN_IDS

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –õ–æ–≤–∏–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ —Ç–µ–∫—Å—Ç—É, –∞ –Ω–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ ---
    @bot.message_handler(func=lambda message: message.text == "üëë –ê–¥–º–∏–Ω–∫–∞")
    def handle_admin_command(message: types.Message):
        if not is_admin(message.from_user.id):
            # –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, —Ç.–∫. –∫–Ω–æ–ø–∫—É –∏ —Ç–∞–∫ –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã
            return
        
        current_settings = settings_manager.get_all_settings()
        bot.send_message(
            message.chat.id,
            texts.BOSS_MAIN_MENU,
            reply_markup=keyboards.get_boss_main_keyboard(current_settings),
            parse_mode="Markdown"
        )

    @bot.message_handler(commands=['restart'])
    def handle_restart_command(message: types.Message):
        if not is_admin(message.from_user.id):
            return
        user_id = message.from_user.id
        success, response_message = database.delete_user(user_id)
        if success:
            bot.reply_to(message, f"‚úÖ –£—Å–ø–µ—Ö: {response_message}\n–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É /start.")
        else:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø—Ä–æ—Ñ–∏–ª—è: {response_message}")

    @bot.callback_query_handler(func=lambda call: call.data.startswith(('admin_', 'boss_')))
    def handle_admin_callbacks(call: types.CallbackQuery):
        if not is_admin(call.from_user.id):
            bot.answer_callback_query(call.id, texts.ADMIN_ACCESS_DENIED, show_alert=True)
            return
        
        action = call.data

        try:
            bot.answer_callback_query(call.id) # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫ —Å—Ä–∞–∑—É
            
            if action == 'admin_report_manual_daily':
                bot.answer_callback_query(call.id, text="–§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á–µ—Ç –∑–∞ 24 —á–∞—Å–∞...")
                tz_moscow = pytz.timezone('Europe/Moscow')
                end_time = datetime.datetime.now(tz_moscow)
                start_time = end_time - datetime.timedelta(days=1)
                send_report(bot, call.message.chat.id, start_time, end_time)

            elif action.startswith('boss_toggle_'):
                feature_path = action.replace('boss_toggle_', '')
                current_value = settings_manager.get_setting(feature_path)
                settings_manager.update_setting(feature_path, not current_value)
                
                new_settings = settings_manager.get_all_settings()
                bot.edit_message_reply_markup(
                    call.message.chat.id, call.message.message_id,
                    reply_markup=keyboards.get_boss_main_keyboard(new_settings) # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                )

            elif action == 'boss_upload_audio':
                bot.delete_message(call.message.chat.id, call.message.message_id)
                msg = bot.send_message(call.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª (–∫–∞–∫ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ñ–∞–π–ª .mp3/.ogg) –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è.")
                bot.register_next_step_handler(msg, process_audio_upload_step)

            elif action == 'boss_set_password':
                bot.delete_message(call.message.chat.id, call.message.message_id)
                msg = bot.send_message(call.message.chat.id, texts.BOSS_ASK_PASSWORD_WORD)
                bot.register_next_step_handler(msg, process_password_word_step)
            
            elif action == 'admin_report_leaderboard':
                top_list = database.get_top_referrers_for_month(5)
                if not top_list:
                    bot.send_message(call.message.chat.id, "–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –ø–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏–≤–µ–ª –¥—Ä—É–∑–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –±—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞—Å—Ç–æ–π–∫—É.")
                    return
                month_name = datetime.datetime.now(pytz.timezone('Europe/Moscow')).strftime('%B %Y')
                response = f"üèÜ **–£–¥–∞—Ä–Ω–∏–∫–∏ —Ç—Ä—É–¥–∞ –∑–∞ {month_name}**:\n(—É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥—Ä—É–∑—å—è, –ø–æ–≥–∞—Å–∏–≤—à–∏–µ –Ω–∞—Å—Ç–æ–π–∫—É –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ)\n\n"
                medals = ["ü•á", "ü•à", "ü•â", "4.", "5."]
                for i, (name, count) in enumerate(top_list):
                    response += f"{medals[i]} –¢–æ–≤–∞—Ä–∏—â **{name}** ‚Äî {count} —á–µ–ª.\n"
                bot.send_message(call.message.chat.id, response, parse_mode="Markdown")

        except ApiTelegramException as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–ª–±—ç–∫ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}")

    # --- –ü–æ—à–∞–≥–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
    def process_audio_upload_step(message: types.Message):
        if not is_admin(message.from_user.id): return
        if message.audio:
            file_id = message.audio.file_id
            settings_manager.update_setting("greeting_audio_id", file_id)
            bot.reply_to(message, "‚úÖ –ê—É–¥–∏–æ-–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –µ–≥–æ –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /voice.")
            logging.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –∑–∞–≥—Ä—É–∑–∏–ª –Ω–æ–≤–æ–µ –∞—É–¥–∏–æ-–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ. File ID: {file_id}")
        else:
            bot.reply_to(message, "–≠—Ç–æ –Ω–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")

    def process_password_word_step(message: types.Message):
        if not is_admin(message.from_user.id): return
        new_word = message.text
        msg = bot.send_message(message.chat.id, texts.BOSS_ASK_PASSWORD_BONUS)
        bot.register_next_step_handler(msg, process_password_bonus_step, new_word)

    def process_password_bonus_step(message: types.Message, word):
        if not is_admin(message.from_user.id): return
        new_bonus = message.text
        settings_manager.update_setting("promotions.password_of_the_day.password", word)
        settings_manager.update_setting("promotions.password_of_the_day.bonus_text", new_bonus)
        bot.send_message(message.chat.id, texts.BOSS_PASSWORD_SUCCESS)

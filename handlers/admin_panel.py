# /handlers/admin_panel.py

import logging
import datetime
from telebot import types
import pytz

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å—ë –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ
from config import ADMIN_IDS
from g_sheets import (
    delete_user, get_report_data_for_period, get_stats_by_source, 
    get_weekly_cohort_data, get_top_referrers
)
import texts
import keyboards

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def generate_report_text(start_time, end_time, issued, redeemed, redeemed_users, sources, total_redeem_time_seconds):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞."""
    conversion_rate = round((redeemed / issued) * 100, 1) if issued > 0 else 0
    avg_redeem_time_str = "–Ω/–¥"
    
    if redeemed > 0:
        avg_seconds = total_redeem_time_seconds / redeemed
        hours, remainder = divmod(int(avg_seconds), 3600)
        minutes, _ = divmod(remainder, 60)
        avg_redeem_time_str = f"{hours} —á {minutes} –º–∏–Ω"
        
    report_date = end_time.strftime('%d.%m.%Y')
    header = f"**#–ù–∞—Å—Ç–æ–π–∫–∞_–∑–∞_–ü–æ–¥–ø–∏—Å–∫—É (–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ {report_date})**\n\n"
    period_str = f"**–ü–µ—Ä–∏–æ–¥:** —Å {start_time.strftime('%d.%m %H:%M')} –ø–æ {end_time.strftime('%d.%m %H:%M')}\n\n"
    stats = (f"‚úÖ **–í—ã–¥–∞–Ω–æ –∫—É–ø–æ–Ω–æ–≤:** {issued}\n"
             f"ü•É **–ü–æ–≥–∞—à–µ–Ω–æ –Ω–∞—Å—Ç–æ–µ–∫:** {redeemed}\n"
             f"üìà **–ö–æ–Ω–≤–µ—Ä—Å–∏—è:** {conversion_rate}%\n"
             f"‚è±Ô∏è **–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è:** {avg_redeem_time_str}\n")
             
    sources_str = ""
    if sources:
        sources_str += "\n**–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:**\n"
        sorted_sources = sorted(sources.items(), key=lambda item: item[1], reverse=True)
        for source, count in sorted_sources:
            sources_str += f"‚Ä¢ {source}: {count}\n"
            
    users_str = ""
    if redeemed_users:
        users_str += "\n**–ù–∞—Å—Ç–æ–π–∫—É –ø–æ–ª—É—á–∏–ª–∏:**\n"
        for user in redeemed_users[:10]:
            users_str += f"‚Ä¢ {user}\n"
        if len(redeemed_users) > 10:
            users_str += f"...–∏ –µ—â–µ {len(redeemed_users) - 10}."
            
    return header + period_str + stats + sources_str + users_str

def send_report(bot, chat_id, start_time, end_time):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç."""
    try:
        issued, redeemed, redeemed_users, sources, total_redeem_time = get_report_data_for_period(start_time, end_time)
        if issued == 0:
            bot.send_message(chat_id, f"–ó–∞ –ø–µ—Ä–∏–æ–¥ —Å {start_time.strftime('%d.%m %H:%M')} –ø–æ {end_time.strftime('%d.%m %H:%M')} –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞.")
            return
        report_text = generate_report_text(start_time, end_time, issued, redeemed, redeemed_users, sources, total_redeem_time)
        bot.send_message(chat_id, report_text, parse_mode="Markdown")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –≤ —á–∞—Ç {chat_id}: {e}")
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞.")

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---

def register_admin_handlers(bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –∏ –∫–æ–ª–±—ç–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""

    def is_admin(user_id):
        return user_id in ADMIN_IDS

    @bot.message_handler(commands=['admin'])
    def handle_admin_command(message: types.Message):
        if not is_admin(message.from_user.id):
            bot.reply_to(message, texts.ADMIN_ACCESS_DENIED)
            return
        bot.send_message(
            message.chat.id, 
            texts.ADMIN_MAIN_MENU, 
            reply_markup=keyboards.get_admin_main_keyboard(), 
            parse_mode="Markdown"
        )

    @bot.message_handler(commands=['restart'])
    def handle_restart_command(message: types.Message):
        if not is_admin(message.from_user.id):
            return
        user_id = message.from_user.id
        success, response_message = delete_user(user_id)
        if success:
            bot.reply_to(message, f"‚úÖ –£—Å–ø–µ—Ö: {response_message}\n–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É /start.")
        else:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø—Ä–æ—Ñ–∏–ª—è: {response_message}")

    @bot.callback_query_handler(func=lambda call: call.data.startswith('admin_'))
    def handle_admin_callbacks(call: types.CallbackQuery):
        if not is_admin(call.from_user.id):
            bot.answer_callback_query(call.id, texts.ADMIN_ACCESS_DENIED, show_alert=True)
            return
        
        bot.answer_callback_query(call.id)
        action = call.data
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é
        if action == 'admin_menu_main':
            try:
                bot.edit_message_text(
                    texts.ADMIN_MAIN_MENU, call.message.chat.id, call.message.message_id, 
                    reply_markup=keyboards.get_admin_main_keyboard(), parse_mode="Markdown"
                )
            except: pass
        elif action == 'admin_menu_reports':
            bot.edit_message_text(
                texts.ADMIN_REPORTS_MENU, call.message.chat.id, call.message.message_id,
                reply_markup=keyboards.get_admin_reports_keyboard(), parse_mode="Markdown"
            )
        elif action == 'admin_menu_analytics':
            bot.edit_message_text(
                texts.ADMIN_ANALYTICS_MENU, call.message.chat.id, call.message.message_id,
                reply_markup=keyboards.get_admin_analytics_keyboard(), parse_mode="Markdown"
            )

        # –î–µ–π—Å—Ç–≤–∏—è
        elif action == 'admin_action_leaderboard':
            top_list = get_top_referrers(5)
            if not top_list:
                bot.send_message(call.message.chat.id, "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏–≤–µ–ª –¥—Ä—É–∑–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –±—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞—Å—Ç–æ–π–∫—É.")
                return
            response = "**üèÜ –î–æ—Å–∫–∞ –ü–æ—á–µ—Ç–∞ —É–¥–∞—Ä–Ω–∏–∫–æ–≤ —Ç—Ä—É–¥–∞:**\n(—É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥—Ä—É–∑—å—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–≥–∞—Å–∏–ª–∏ –Ω–∞—Å—Ç–æ–π–∫—É)\n\n"
            medals = ["ü•á", "ü•à", "ü•â", "4.", "5."]
            for i, (name, count) in enumerate(top_list):
                response += f"{medals[i]} –¢–æ–≤–∞—Ä–∏—â **{name}** ‚Äî {count} —á–µ–ª.\n"
            bot.send_message(call.message.chat.id, response, parse_mode="Markdown")
            
        elif action == 'admin_action_sources':
            stats = get_stats_by_source()
            if not stats:
                bot.send_message(call.message.chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º.")
                return
            response = "**üìà –ê–Ω–∞–ª–∏–∑ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º (–∑–∞ –≤—Å–µ –≤—Ä–µ–º—è):**\n\n"
            sorted_stats = sorted(stats.items(), key=lambda item: item[1]['issued'], reverse=True)
            for source, data in sorted_stats:
                conversion = round((data['redeemed'] / data['issued']) * 100, 1) if data['issued'] > 0 else 0
                response += f"**{source}:**\n  –ü–æ–¥–ø–∏—Å–∞–ª–æ—Å—å: {data['issued']}\n  –ü–æ–≥–∞—à–µ–Ω–æ: {data['redeemed']} (–ö–æ–Ω–≤–µ—Ä—Å–∏—è: {conversion}%)\n\n"
            bot.send_message(call.message.chat.id, response, parse_mode="Markdown")

        elif action == 'admin_action_cohorts':
            cohorts = get_weekly_cohort_data()
            if not cohorts:
                bot.send_message(call.message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–≥–æ—Ä—Ç.")
                return
            response = "**üóìÔ∏è –ê–Ω–∞–ª–∏–∑ –ø–æ –Ω–µ–¥–µ–ª—å–Ω—ã–º –∫–æ–≥–æ—Ä—Ç–∞–º:**\n(—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º, –∫–∞–∫ —Ö–æ—Ä–æ—à–æ –≥–æ—Å—Ç–∏ —Ä–∞–∑–Ω—ã—Ö –Ω–µ–¥–µ–ª—å –¥–æ—Ö–æ–¥—è—Ç –¥–æ –±–∞—Ä–∞)\n\n"
            for cohort in cohorts:
                if cohort['issued'] == 0: continue
                conversion = round((cohort['redeemed'] / cohort['issued']) * 100, 1)
                response += f"**–ù–µ–¥–µ–ª—è ({cohort['week']}):**\n  –ù–æ–≤—ã—Ö: {cohort['issued']}, –ü–æ–≥–∞—à–µ–Ω–æ: {cohort['redeemed']} (–ö–æ–Ω–≤–µ—Ä—Å–∏—è: {conversion}%)\n\n"
            bot.send_message(call.message.chat.id, response, parse_mode="Markdown")

        # –û—Ç—á–µ—Ç—ã –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
        elif call.data.startswith('admin_report'):
            period = call.data.split('_')[-1]
            tz_moscow = pytz.timezone('Europe/Moscow')
            now_moscow = datetime.datetime.now(tz_moscow)
            end_time = now_moscow
            
            if period == 'today':
                # –°–º–µ–Ω–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Å 12:00 —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è. –ï—Å–ª–∏ —Å–µ–π—á–∞—Å —Ä–∞–Ω—å—à–µ 12, —Ç–æ –±–µ—Ä–µ–º –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å.
                if now_moscow.hour < 12: 
                    start_time = (now_moscow - datetime.timedelta(days=1)).replace(hour=12, minute=0, second=0, microsecond=0)
                else: 
                    start_time = now_moscow.replace(hour=12, minute=0, second=0, microsecond=0)
            elif period == 'week': 
                start_time = now_moscow - datetime.timedelta(days=7)
            elif period == 'month': 
                start_time = now_moscow - datetime.timedelta(days=30)
            else: 
                return
                
            send_report(bot, call.message.chat.id, start_time, end_time)

# /handlers/admin_panel.py

import logging
import datetime
from telebot import types
from telebot.apihelper import ApiTelegramException
import pytz

from config import ADMIN_IDS
import database
import texts
import keyboards
import settings_manager
from export_to_sheets import do_export
from handlers.user_commands import issue_coupon
from handlers.newsletter_manager import register_newsletter_handlers
from handlers.newsletter_buttons import register_newsletter_buttons_handlers

# --- –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –∏–º–µ–Ω–∏ ---
def shorten_name(full_name: str) -> str:
    """–ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç '–ò–≤–∞–Ω –°–º–∏—Ä–Ω–æ–≤' –≤ '–ò–≤–∞–Ω –°.'."""
    parts = full_name.split()
    if len(parts) > 1:
        return f"{parts[0]} {parts[1][0]}."
    return full_name

# --- –§—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ ---
def generate_daily_report_text(start_time, end_time, general_stats, staff_stats, iiko_count=None):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞."""
    issued, redeemed, _, sources, total_redeem_time = general_stats
    _, left_count = database.get_daily_churn_data(start_time, end_time)

    # –ë–ª–æ–∫ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    conversion_rate = round((redeemed / issued) * 100, 1) if issued > 0 else 0
    avg_redeem_time_str = "–Ω/–¥"
    if redeemed > 0 and total_redeem_time > 0:
        avg_seconds = total_redeem_time / redeemed
        hours, remainder = divmod(int(avg_seconds), 3600)
        minutes, _ = divmod(remainder, 60)
        avg_redeem_time_str = f"{hours} —á {minutes} –º–∏–Ω"
    
    retention_rate_str = "–Ω/–¥"
    if redeemed > 0:
        retention_rate = round(((redeemed - left_count) / redeemed) * 100, 1)
        retention_rate_str = f"{retention_rate}%"

    report_date = end_time.strftime('%d.%m.%Y')
    header = f"üìä **–û—Ç—á–µ—Ç–°–º–µ–Ω–∞ ({report_date})** üìä\n\n"
    period_str = f"**–°–º–µ–Ω–∞:** —Å {start_time.strftime('%H:%M %d.%m')} –ø–æ {end_time.strftime('%H:%M %d.%m')}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å—Ç–æ–π–∫–∞—Ö iiko
    iiko_info = ""
    if iiko_count is not None:
        iiko_info = f"üç∑ **–ü—Ä–æ–±–∏—Ç–æ –Ω–∞—Å—Ç–æ–µ–∫ –≤ iiko:** {iiko_count}\n"
    else:
        iiko_info = f"üç∑ **–ü—Ä–æ–±–∏—Ç–æ –Ω–∞—Å—Ç–æ–µ–∫ –≤ iiko:** –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã\n"
    
    stats_block = (f"‚úÖ **–í—ã–¥–∞–Ω–æ –∫—É–ø–æ–Ω–æ–≤:** {issued}\n"
                   f"ü•É **–ü–æ–≥–∞—à–µ–Ω–æ –Ω–∞—Å—Ç–æ–µ–∫:** {redeemed}\n" +
                   iiko_info +
                   f"üìà **–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø–æ–≥–∞—à–µ–Ω–∏–µ:** {conversion_rate}%\n"
                   f"‚è±Ô∏è **–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è:** {avg_redeem_time_str}\n"
                   f"üíî **–û—Ç–ø–∏—Å–∞–ª–æ—Å—å –∑–∞ —Å—É—Ç–∫–∏:** {left_count} —á–µ–ª.\n"
                   f"üéØ **–£–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞ —Å—É—Ç–∫–∏:** {retention_rate_str}\n")
    
    # –ë–ª–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    sources_block = ""
    if sources:
        sources_block += "\n---\n\n**–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (–æ–±—â–∏–µ):**\n"
        filtered_sources = {k: v for k, v in sources.items() if not k.startswith("–°–æ—Ç—Ä—É–¥–Ω–∏–∫:")}
        sorted_sources = sorted(filtered_sources.items(), key=lambda item: item[1], reverse=True)
        for source, count in sorted_sources:
            sources_block += f"‚Ä¢ {source}: {count}\n"
            
    # –ë–ª–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
    staff_block = ""
    if staff_stats:
        staff_block += "\n---\n\n**üèÜ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ (–∑–∞ —Å—É—Ç–∫–∏) üèÜ**\n"
        for position in sorted(staff_stats.keys()):
            position_rus = f"{position}—ã"
            if position == "–ú–µ–Ω–µ–¥–∂–µ—Ä": position_rus = "–ú–µ–Ω–µ–¥–∂–µ—Ä—ã"
            
            emoji_map = {"–û—Ñ–∏—Ü–∏–∞–Ω—Ç": "ü§µ", "–ë–∞—Ä–º–µ–Ω": "üç∏", "–ú–µ–Ω–µ–¥–∂–µ—Ä": "üé©"}
            emoji = emoji_map.get(position, "üë•")

            staff_block += f"\n**{emoji} {position_rus}:**\n"
            sorted_staff = sorted(staff_stats[position], key=lambda x: x['brought'], reverse=True)
            medals = ["ü•á", "ü•à", "ü•â"]
            for i, staff in enumerate(sorted_staff):
                medal = medals[i] if i < len(medals) else "‚Ä¢"
                staff_name_short = shorten_name(staff['name'])
                staff_block += f"{medal} **{staff_name_short}** | –ì–æ—Å—Ç–µ–π: **{staff['brought']}** (–û—Ç—Ç–æ–∫: {staff['churn']})\n"
    else:
        staff_block = "\n\n---\n\n**üèÜ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ (–∑–∞ —Å—É—Ç–∫–∏) üèÜ**\n\n_–°–µ–≥–æ–¥–Ω—è –Ω–∏–∫—Ç–æ –∏–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –Ω–µ –ø—Ä–∏–≤–æ–¥–∏–ª –≥–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ –±–æ—Ç–∞._"

    return header + period_str + stats_block + sources_block + staff_block

def send_report(bot, chat_id, start_time, end_time):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–¥–∏–Ω—ã–π –æ—Ç—á–µ—Ç."""
    try:
        general_stats = database.get_report_data_for_period(start_time, end_time)
        staff_stats = database.get_staff_performance_for_period(start_time, end_time)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ iiko –∑–∞ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–º–µ–Ω—ã
        iiko_count = database.get_iiko_nastoika_count_for_date(end_time.date())

        if general_stats[0] == 0:
            bot.send_message(chat_id, f"–ó–∞ –ø–µ—Ä–∏–æ–¥ —Å {start_time.strftime('%d.%m %H:%M')} –ø–æ {end_time.strftime('%d.%m %H:%M')} –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞.")
            return

        report_text = generate_daily_report_text(start_time, end_time, general_stats, staff_stats, iiko_count)
        bot.send_message(chat_id, report_text, parse_mode="Markdown")
        
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è "–£–¥–∞—Ä–Ω–∏–∫–∞ –¥–Ω—è"
        all_staff_results = []
        for position in staff_stats:
             for staff_member in staff_stats[position]:
                all_staff_results.append(staff_member)
        
        if all_staff_results:
            winner = max(all_staff_results, key=lambda x: x['brought'])
            if winner['brought'] > 0:
                winner_name = shorten_name(winner['name'])
                winner_text = (f"üí• **–ì–ï–†–û–ô –î–ù–Ø!** üí•\n\n"
                               f"–°–µ–≥–æ–¥–Ω—è –≤—Å–µ—Ö –æ–±–æ—à–µ–ª(–ª–∞) **{winner_name}**, –ø—Ä–∏–≤–µ–¥—è **{winner['brought']}** –Ω–æ–≤—ã—Ö –≥–æ—Å—Ç–µ–π! "
                               f"–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞, —Ç–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üëèü•≥")
                # –¢—É—Ç –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Ç–µ–≥–∞ –∏ AI
                bot.send_message(chat_id, winner_text)

    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –≤ —á–∞—Ç {chat_id}: {e}")
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞.")


def register_admin_handlers(bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –∏ –∫–æ–ª–±—ç–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    admin_states = {}

    def is_admin(user_id):
        return user_id in ADMIN_IDS

    @bot.message_handler(func=lambda message: message.text == "üëë –ê–¥–º–∏–Ω–∫–∞")
    def handle_admin_command(message: types.Message):
        if not is_admin(message.from_user.id):
            return
        bot.send_message(
            message.chat.id, "üëë **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
            reply_markup=keyboards.get_admin_main_menu()
        )

    # --- –ü–æ—à–∞–≥–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–π ---

    def process_find_user_step(message: types.Message):
        admin_id = message.from_user.id
        if admin_states.get(admin_id) != 'awaiting_user_identifier':
            return
        
        identifier = message.text
        user_data = database.find_user_by_id_or_username(identifier)
        
        if user_data:
            status_map = {
                'registered': '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', 'issued': '–ö—É–ø–æ–Ω –≤—ã–¥–∞–Ω',
                'redeemed': '–ö—É–ø–æ–Ω –ø–æ–≥–∞—à–µ–Ω', 'redeemed_and_left': '–ü–æ–≥–∞—Å–∏–ª –∏ –æ—Ç–ø–∏—Å–∞–ª—Å—è'
            }
            status_ru = status_map.get(user_data['status'], user_data['status'])
            staff_name = "–ù–µ—Ç"
            if user_data.get('brought_by_staff_id'):
                staff_info = database.find_staff_by_id(user_data['brought_by_staff_id'])
                if staff_info:
                    staff_name = staff_info['short_name']

            response = (f"üë§ **–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**\n\n"
                        f"**ID:** `{user_data['user_id']}`\n"
                        f"**–ò–º—è:** {user_data['first_name']}\n"
                        f"**–Æ–∑–µ—Ä–Ω–µ–π–º:** @{user_data['username'] or '–ù–µ—Ç'}\n"
                        f"**–°—Ç–∞—Ç—É—Å:** {status_ru}\n"
                        f"**–ò—Å—Ç–æ—á–Ω–∏–∫:** {user_data['source'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}\n"
                        f"**–ü—Ä–∏–≥–ª–∞—Å–∏–ª:** {user_data['referrer_id'] or '–ù–∏–∫—Ç–æ'}\n"
                        f"**–ü—Ä–∏–≤–µ–ª —Å–æ—Ç—Ä—É–¥–Ω–∏–∫:** {staff_name}\n"
                        f"**–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:** {user_data['signup_date'] or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
                        f"**–î–∞—Ç–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è:** {user_data['redeem_date'] or '–ï—â–µ –Ω–µ –ø–æ–≥–∞—à–µ–Ω'}")
            bot.send_message(admin_id, response, parse_mode="Markdown")
        else:
            bot.send_message(admin_id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º '{identifier}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        if admin_id in admin_states:
            del admin_states[admin_id]

    def process_issue_coupon_step(message: types.Message):
        admin_id = message.from_user.id
        if admin_states.get(admin_id) != 'awaiting_coupon_user_id':
            return
        user_id_str = message.text
        if not user_id_str.isdigit():
            bot.send_message(admin_id, "‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        user_id = int(user_id_str)
        user_data = database.find_user_by_id(user_id)
        if not user_data:
            bot.send_message(admin_id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
        else:
            issue_coupon(bot, user_id, user_id)
            bot.send_message(admin_id, f"‚úÖ –ö—É–ø–æ–Ω —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_data['first_name']} (ID: {user_id}).")
        if admin_id in admin_states:
            del admin_states[admin_id]
        
    def process_password_word_step(message: types.Message):
        if not is_admin(message.from_user.id): return
        new_word = message.text
        msg = bot.send_message(message.chat.id, texts.BOSS_ASK_PASSWORD_BONUS)
        bot.register_next_step_handler(msg, process_password_bonus_step, new_word)

    def process_password_bonus_step(message: types.Message, word):
        if not is_admin(message.from_user.id): return
        new_bonus = message.text
        settings_manager.update_setting("promotions.password_of_the_day.password", word)
        settings_manager.update_setting("promotions.password_of_the_day.bonus_text", new_bonus)
        bot.send_message(message.chat.id, texts.BOSS_PASSWORD_SUCCESS)
        
    def process_audio_upload_step(message: types.Message):
        if not is_admin(message.from_user.id): return
        if message.audio:
            file_id = message.audio.file_id
            settings_manager.update_setting("greeting_audio_id", file_id)
            bot.reply_to(message, "‚úÖ –ê—É–¥–∏–æ-–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
            logging.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –∑–∞–≥—Ä—É–∑–∏–ª –Ω–æ–≤–æ–µ –∞—É–¥–∏–æ. File ID: {file_id}")
        else:
            bot.reply_to(message, "–≠—Ç–æ –Ω–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")

    # --- –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–∫–∏ ---
    @bot.callback_query_handler(func=lambda call: call.data.startswith('admin_') or call.data.startswith('boss_'))
    def handle_admin_callbacks(call: types.CallbackQuery):
        if not is_admin(call.from_user.id):
            bot.answer_callback_query(call.id, texts.ADMIN_ACCESS_DENIED, show_alert=True)
            return
        
        action = call.data
        bot.answer_callback_query(call.id)
        
        try:
            # –ù–ê–í–ò–ì–ê–¶–ò–Ø
            if action == 'admin_main_menu':
                bot.edit_message_text("üëë **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", call.message.chat.id, call.message.message_id, reply_markup=keyboards.get_admin_main_menu())
            elif action == 'admin_menu_promotions':
                settings = settings_manager.get_all_settings()
                bot.edit_message_text("‚öôÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ü–∏—è–º–∏**", call.message.chat.id, call.message.message_id, reply_markup=keyboards.get_admin_promotions_menu(settings))
            elif action == 'admin_menu_reports':
                bot.edit_message_text("üìä **–û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞**", call.message.chat.id, call.message.message_id, reply_markup=keyboards.get_admin_reports_menu())
            elif action == 'admin_menu_content':
                bot.edit_message_text("üìù **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º**", call.message.chat.id, call.message.message_id, reply_markup=keyboards.get_admin_content_menu())
            elif action == 'admin_newsletter_main':
                bot.edit_message_text("üìß **–°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—Å—ã–ª–æ–∫**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", call.message.chat.id, call.message.message_id, reply_markup=keyboards.get_content_management_menu(), parse_mode="Markdown")
            elif action == 'admin_menu_users':
                bot.edit_message_text("üë§ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏**", call.message.chat.id, call.message.message_id, reply_markup=keyboards.get_admin_users_menu())
            elif action == 'admin_menu_data':
                bot.edit_message_text("üíæ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏**", call.message.chat.id, call.message.message_id, reply_markup=keyboards.get_admin_data_menu())
            elif action == 'admin_menu_staff':
                bot.edit_message_text("üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º**", call.message.chat.id, call.message.message_id, reply_markup=keyboards.get_admin_staff_menu())
            
            # –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–ï–†–°–û–ù–ê–õ–û–ú
            elif action == 'admin_list_staff':
                all_staff = database.get_all_staff()
                if not all_staff:
                    bot.send_message(call.message.chat.id, "–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.")
                    return
                
                bot.delete_message(call.message.chat.id, call.message.message_id)
                bot.send_message(call.message.chat.id, "üìã **–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:**\n(–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å)")
                for staff in all_staff:
                    status_icon = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if staff['status'] == 'active' else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                    response = f"{staff['full_name']} ({staff['position']})\n–°—Ç–∞—Ç—É—Å: {status_icon} | ID: `{staff['telegram_id']}`"
                    bot.send_message(call.message.chat.id, response, parse_mode="Markdown", reply_markup=keyboards.get_staff_management_keyboard(staff['staff_id'], staff['status']))
            
            elif action.startswith('admin_toggle_staff_'):
                parts = action.split('_')
                staff_id, new_status = int(parts[3]), parts[4]
                if database.update_staff_status(staff_id, new_status):
                    all_staff = database.get_all_staff() # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
                    for s in all_staff:
                        if s['staff_id'] == staff_id:
                            status_icon = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if new_status == 'active' else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                            new_text = f"{s['full_name']} ({s['position']})\n–°—Ç–∞—Ç—É—Å: {status_icon} | ID: `{s['telegram_id']}`"
                            bot.edit_message_text(new_text, call.message.chat.id, call.message.message_id, parse_mode="Markdown",
                                                  reply_markup=keyboards.get_staff_management_keyboard(s['staff_id'], new_status))
                            break
                else:
                    bot.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å.", call.message.chat.id, call.message.message_id, reply_markup=None)

            # –î–ï–ô–°–¢–í–ò–Ø
            elif action == 'admin_find_user':
                msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:")
                admin_states[call.from_user.id] = 'awaiting_user_identifier'
                bot.register_next_step_handler(msg, process_find_user_step)
            elif action == 'admin_issue_coupon_manual':
                msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –≤—ã–¥–∞—Ç—å –∫—É–ø–æ–Ω:")
                admin_states[call.from_user.id] = 'awaiting_coupon_user_id'
                bot.register_next_step_handler(msg, process_issue_coupon_step)
            elif action == 'admin_export_sheets':
                bot.send_message(call.message.chat.id, "‚è≥ –ù–∞—á–∏–Ω–∞—é –≤—ã–≥—Ä—É–∑–∫—É –≤ Google Sheets... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã.")
                success, message = do_export()
                bot.send_message(call.message.chat.id, message)
            
            # –û–¢–ß–ï–¢–´
            elif action == 'admin_report_manual_daily':
                tz_moscow = pytz.timezone('Europe/Moscow')
                current_time = datetime.datetime.now(tz_moscow)
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –æ—Ç—á–µ—Ç–µ
                if current_time.hour < 12:
                    end_time = current_time.replace(hour=6, minute=0, second=0, microsecond=0)
                    start_time = (end_time - datetime.timedelta(days=1)).replace(hour=12, minute=0, second=0, microsecond=0)
                else:
                    end_time = current_time.replace(hour=6, minute=0, second=0, microsecond=0)
                    if current_time.hour >= 6:
                        pass
                    else:
                        end_time = end_time - datetime.timedelta(days=1)
                    start_time = (end_time - datetime.timedelta(days=1)).replace(hour=12, minute=0, second=0, microsecond=0)
                
                send_report(bot, call.message.chat.id, start_time, end_time)
            elif action == 'admin_report_staff_realtime':
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞ —Ç–µ–∫—É—â—É—é —Å–º–µ–Ω—É
                tz_moscow = pytz.timezone('Europe/Moscow')
                current_time = datetime.datetime.now(tz_moscow)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω—ã
                if current_time.hour >= 12:
                    # –¢–µ–∫—É—â–∞—è —Å–º–µ–Ω–∞ –Ω–∞—á–∞–ª–∞—Å—å —Å–µ–≥–æ–¥–Ω—è –≤ 12:00
                    start_time = current_time.replace(hour=12, minute=0, second=0, microsecond=0)
                else:
                    # –¢–µ–∫—É—â–∞—è —Å–º–µ–Ω–∞ –Ω–∞—á–∞–ª–∞—Å—å –≤—á–µ—Ä–∞ –≤ 12:00
                    start_time = (current_time - datetime.timedelta(days=1)).replace(hour=12, minute=0, second=0, microsecond=0)
                
                staff_stats = database.get_staff_performance_for_period(start_time, current_time)
                
                if not staff_stats:
                    bot.send_message(call.message.chat.id, 
                        f"üë∑ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏**\n\n"
                        f"üìÖ –° {start_time.strftime('%d.%m %H:%M')} –ø–æ {current_time.strftime('%d.%m %H:%M')}\n\n"
                        f"–ó–∞ —Ç–µ–∫—É—â—É—é —Å–º–µ–Ω—É –Ω–∏–∫—Ç–æ –∏–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –Ω–µ –ø—Ä–∏–≤–µ–ª –≥–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ –±–æ—Ç–∞.")
                else:
                    response = (f"üë∑ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏**\n\n"
                               f"üìÖ –° {start_time.strftime('%d.%m %H:%M')} –ø–æ {current_time.strftime('%d.%m %H:%M')}\n\n")
                    
                    total_brought = 0
                    for position in staff_stats:
                        for staff_member in staff_stats[position]:
                            total_brought += staff_member['brought']
                    
                    response += f"üéØ **–í—Å–µ–≥–æ –ø—Ä–∏–≤–µ–¥–µ–Ω–æ –∑–∞ —Å–º–µ–Ω—É:** {total_brought} –≥–æ—Å—Ç–µ–π\n\n"
                    
                    for position in sorted(staff_stats.keys()):
                        position_rus = f"{position}—ã"
                        if position == "–ú–µ–Ω–µ–¥–∂–µ—Ä": position_rus = "–ú–µ–Ω–µ–¥–∂–µ—Ä—ã"
                        
                        emoji_map = {"–û—Ñ–∏—Ü–∏–∞–Ω—Ç": "ü§µ", "–ë–∞—Ä–º–µ–Ω": "üç∏", "–ú–µ–Ω–µ–¥–∂–µ—Ä": "üé©"}
                        emoji = emoji_map.get(position, "üë•")
                        
                        response += f"**{emoji} {position_rus}:**\n"
                        sorted_staff = sorted(staff_stats[position], key=lambda x: x['brought'], reverse=True)
                        
                        for staff_member in sorted_staff:
                            staff_name_short = shorten_name(staff_member['name'])
                            response += f"‚Ä¢ **{staff_name_short}**: {staff_member['brought']} –≥–æ—Å—Ç–µ–π"
                            if staff_member['churn'] > 0:
                                response += f" (–æ—Ç—Ç–æ–∫: {staff_member['churn']})"
                            response += "\n"
                        response += "\n"
                    
                    bot.send_message(call.message.chat.id, response, parse_mode="Markdown")
            elif action == 'admin_churn_analysis':
                total_left, distribution = database.get_full_churn_analysis()
                if total_left == 0:
                    bot.send_message(call.message.chat.id, "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –∏–∑ –ø–æ–ª—É—á–∏–≤—à–∏—Ö –ø–æ–¥–∞—Ä–æ–∫ –Ω–µ –æ—Ç–ø–∏—Å–∞–ª—Å—è. –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!")
                else:
                    response = f"üíî **–ê–Ω–∞–ª–∏–∑ –æ—Ç—Ç–æ–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (–∑–∞ –≤—Å–µ –≤—Ä–µ–º—è)**\n\n–í—Å–µ–≥–æ –æ—Ç–ø–∏—Å–∞–ª–æ—Å—å –ø–æ—Å–ª–µ –ø–æ–¥–∞—Ä–∫–∞: **{total_left}** —á–µ–ª.\n\n**–ö–∞–∫ –±—ã—Å—Ç—Ä–æ –æ–Ω–∏ –æ—Ç–ø–∏—Å—ã–≤–∞—é—Ç—Å—è:**\n"
                    for period, count in distribution.items():
                        percentage = round((count / total_left) * 100, 1) if total_left > 0 else 0
                        response += f"‚Ä¢ {period}: **{count}** —á–µ–ª. ({percentage}%)\n"
                    bot.send_message(call.message.chat.id, response, parse_mode="Markdown")
            elif action == 'admin_report_leaderboard':
                top_list = database.get_top_referrers_for_month(5)
                if not top_list:
                    bot.send_message(call.message.chat.id, "–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –ø–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏–≤–µ–ª –¥—Ä—É–∑–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –±—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞—Å—Ç–æ–π–∫—É.")
                else:
                    month_name = datetime.datetime.now(pytz.timezone('Europe/Moscow')).strftime('%B %Y')
                    response = f"üèÜ **–£–¥–∞—Ä–Ω–∏–∫–∏ —Ç—Ä—É–¥–∞ –∑–∞ {month_name}**:\n(—É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥—Ä—É–∑—å—è, –ø–æ–≥–∞—Å–∏–≤—à–∏–µ –Ω–∞—Å—Ç–æ–π–∫—É –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ)\n\n"
                    medals = ["ü•á", "ü•à", "ü•â", "4.", "5."]
                    for i, (name, count) in enumerate(top_list):
                        response += f"{medals[i]} –¢–æ–≤–∞—Ä–∏—â **{name}** ‚Äî {count} —á–µ–ª.\n"
                    bot.send_message(call.message.chat.id, response, parse_mode="Markdown")
            elif action == 'admin_report_churn_by_source':
                tz_moscow = pytz.timezone('Europe/Moscow')
                end_time = datetime.datetime.now(tz_moscow)
                start_time = end_time - datetime.timedelta(days=30)
                try:
                    conn = database.get_db_connection()
                    cur = conn.cursor()
                    cur.execute("SELECT source, COUNT(*) as cnt FROM users WHERE redeem_date BETWEEN ? AND ? AND status = 'redeemed_and_left' GROUP BY source", (start_time, end_time))
                    rows = cur.fetchall()
                    conn.close()
                    if not rows:
                        bot.send_message(call.message.chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ—Ç—Ç–æ–∫—É –∑–∞ –º–µ—Å—è—Ü.")
                    else:
                        total = sum(row['cnt'] for row in rows)
                        text = f"üìà –ê–Ω–∞–ª–∏–∑ –æ—Ç—Ç–æ–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º (30 –¥–Ω–µ–π):\n"
                        for row in rows:
                            percent = round(row['cnt'] / total * 100, 1) if total else 0
                            text += f"‚Ä¢ {row['source'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}: {row['cnt']} ({percent}%)\n"
                        bot.send_message(call.message.chat.id, text)
                except Exception as e:
                    bot.send_message(call.message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")
            elif action == 'admin_report_activity_time':
                tz_moscow = pytz.timezone('Europe/Moscow')
                end_time = datetime.datetime.now(tz_moscow)
                start_time = end_time - datetime.timedelta(days=30)
                try:
                    conn = database.get_db_connection()
                    cur = conn.cursor()
                    cur.execute("SELECT strftime('%H', signup_date) as hour, COUNT(*) as cnt FROM users WHERE signup_date BETWEEN ? AND ? GROUP BY hour ORDER BY hour", (start_time, end_time))
                    rows = cur.fetchall()
                    conn.close()
                    if not rows:
                        bot.send_message(call.message.chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≥–æ—Å—Ç–µ–π –∑–∞ –º–µ—Å—è—Ü.")
                    else:
                        text = f"üïí –ü–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≥–æ—Å—Ç–µ–π (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, 30 –¥–Ω–µ–π):\n"
                        for row in rows:
                            text += f"‚Ä¢ {row['hour']}:00 ‚Äî {row['cnt']}\n"
                        bot.send_message(call.message.chat.id, text)
                except Exception as e:
                    bot.send_message(call.message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")

            # –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ù–¢–ï–ù–¢–û–ú –ò –ê–ö–¶–ò–Ø–ú–ò
            elif action.startswith('boss_toggle_'):
                feature_path = action.replace('boss_toggle_', '')
                current_value = settings_manager.get_setting(feature_path)
                settings_manager.update_setting(feature_path, not current_value)
                new_settings = settings_manager.get_all_settings()
                bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=keyboards.get_admin_promotions_menu(new_settings))
            elif action == 'boss_upload_audio':
                msg = bot.send_message(call.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª...")
                bot.register_next_step_handler(msg, process_audio_upload_step)
            elif action == 'boss_set_password':
                msg = bot.send_message(call.message.chat.id, texts.BOSS_ASK_PASSWORD_WORD)
                bot.register_next_step_handler(msg, process_password_word_step)
                
        except ApiTelegramException as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–ª–±—ç–∫ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}")

    @bot.message_handler(commands=['restart'])
    def handle_restart_command(message: types.Message):
        if not is_admin(message.from_user.id):
            return
        user_id = message.from_user.id
        success, response_message = database.delete_user(user_id)
        if success:
            bot.reply_to(message, f"‚úÖ –£—Å–ø–µ—Ö: {response_message}\n–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É /start.")
        else:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø—Ä–æ—Ñ–∏–ª—è: {response_message}")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ - —Ç–µ–ø–µ—Ä—å –≤—Å—Ç—Ä–æ–µ–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—à–µ
    logging.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

def init_admin_handlers(bot, scheduler=None):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —á–µ—Ä–µ–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—Å—ã–ª–æ–∫
    if scheduler:
        register_newsletter_handlers(bot, scheduler)
    else:
        logging.warning("Scheduler –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, —Ñ—É–Ω–∫—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —Ä–∞—Å—Å—ã–ª–æ–∫
    register_newsletter_buttons_handlers(bot)
    
    logging.info("–í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

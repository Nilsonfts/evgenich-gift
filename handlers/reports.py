# /handlers/reports.py
"""
–ú–æ–¥—É–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.
"""
import pytz
import datetime
import logging
from telebot import types
import database
import texts
from .utils import shorten_name


def generate_daily_report_text(start_time, end_time, general_stats, staff_stats):
    # ...existing code from admin_panel.py...
    issued, redeemed, _, sources, total_redeem_time = general_stats
    _, left_count = database.get_daily_churn_data(start_time, end_time)
    # ...existing code...
    conversion_rate = round((redeemed / issued) * 100, 1) if issued > 0 else 0
    avg_redeem_time_str = "–Ω/–¥"
    if redeemed > 0 and total_redeem_time > 0:
        avg_seconds = total_redeem_time / redeemed
        hours, remainder = divmod(int(avg_seconds), 3600)
        minutes, _ = divmod(remainder, 60)
        avg_redeem_time_str = f"{hours} —á {minutes} –º–∏–Ω"
    retention_rate_str = "–Ω/–¥"
    if redeemed > 0:
        retention_rate = round(((redeemed - left_count) / redeemed) * 100, 1)
        retention_rate_str = f"{retention_rate}%"
    report_date = end_time.strftime('%d.%m.%Y')
    header = f"üìä **–û—Ç—á–µ—Ç–ü–æ–¥–ø–∏—Å–∫–∞–¢–ì ({report_date})** üìä\n\n"
    period_str = f"**–ü–µ—Ä–∏–æ–¥:** —Å {start_time.strftime('%H:%M %d.%m')} –ø–æ {end_time.strftime('%H:%M %d.%m')}\n\n"
    stats_block = (f"‚úÖ **–í—ã–¥–∞–Ω–æ –∫—É–ø–æ–Ω–æ–≤:** {issued}\n"
                   f"ü•É **–ü–æ–≥–∞—à–µ–Ω–æ –Ω–∞—Å—Ç–æ–µ–∫:** {redeemed}\n"
                   f"üìà **–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø–æ–≥–∞—à–µ–Ω–∏–µ:** {conversion_rate}%\n"
                   f"‚è±Ô∏è **–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è:** {avg_redeem_time_str}\n"
                   f"üíî **–û—Ç–ø–∏—Å–∞–ª–æ—Å—å –∑–∞ —Å—É—Ç–∫–∏:** {left_count} —á–µ–ª.\n"
                   f"üéØ **–£–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞ —Å—É—Ç–∫–∏:** {retention_rate_str}\n")
    sources_block = ""
    if sources:
        sources_block += "\n---\n\n**–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (–æ–±—â–∏–µ):**\n"
        filtered_sources = {k: v for k, v in sources.items() if not k.startswith("–°–æ—Ç—Ä—É–¥–Ω–∏–∫:")}
        sorted_sources = sorted(filtered_sources.items(), key=lambda item: item[1], reverse=True)
        for source, count in sorted_sources:
            sources_block += f"‚Ä¢ {source}: {count}\n"
    staff_block = ""
    if staff_stats:
        staff_block += "\n---\n\n**üèÜ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ (–∑–∞ —Å—É—Ç–∫–∏) üèÜ**\n"
        for position in sorted(staff_stats.keys()):
            position_rus = f"{position}—ã"
            if position == "–ú–µ–Ω–µ–¥–∂–µ—Ä": position_rus = "–ú–µ–Ω–µ–¥–∂–µ—Ä—ã"
            emoji_map = {"–û—Ñ–∏—Ü–∏–∞–Ω—Ç": "ü§µ", "–ë–∞—Ä–º–µ–Ω": "üç∏", "–ú–µ–Ω–µ–¥–∂–µ—Ä": "üé©"}
            emoji = emoji_map.get(position, "üë•")
            staff_block += f"\n**{emoji} {position_rus}:**\n"
            sorted_staff = sorted(staff_stats[position], key=lambda x: x['brought'], reverse=True)
            medals = ["ü•á", "ü•à", "ü•â"]
            for i, staff in enumerate(sorted_staff):
                medal = medals[i] if i < len(medals) else "‚Ä¢"
                staff_name_short = shorten_name(staff['name'])
                staff_block += f"{medal} **{staff_name_short}** | –ì–æ—Å—Ç–µ–π: **{staff['brought']}** (–û—Ç—Ç–æ–∫: {staff['churn']})\n"
    else:
        staff_block = "\n\n---\n\n**üèÜ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ (–∑–∞ —Å—É—Ç–∫–∏) üèÜ**\n\n_–°–µ–≥–æ–¥–Ω—è –Ω–∏–∫—Ç–æ –∏–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –Ω–µ –ø—Ä–∏–≤–æ–¥–∏–ª –≥–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ –±–æ—Ç–∞._"
    return header + period_str + stats_block + sources_block + staff_block

def send_report(bot, chat_id, start_time, end_time):
    try:
        general_stats = database.get_report_data_for_period(start_time, end_time)
        staff_stats = database.get_staff_performance_for_period(start_time, end_time)
        if general_stats[0] == 0:
            bot.send_message(chat_id, f"–ó–∞ –ø–µ—Ä–∏–æ–¥ —Å {start_time.strftime('%d.%m %H:%M')} –ø–æ {end_time.strftime('%d.%m %H:%M')} –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞.")
            return
        report_text = generate_daily_report_text(start_time, end_time, general_stats, staff_stats)
        bot.send_message(chat_id, report_text, parse_mode="Markdown")
        all_staff_results = []
        for position in staff_stats:
            for staff_member in staff_stats[position]:
                all_staff_results.append(staff_member)
        if all_staff_results:
            winner = max(all_staff_results, key=lambda x: x['brought'])
            if winner['brought'] > 0:
                winner_name = shorten_name(winner['name'])
                winner_text = (f"üí• **–ì–ï–†–û–ô –î–ù–Ø!** üí•\n\n"
                               f"–°–µ–≥–æ–¥–Ω—è –≤—Å–µ—Ö –æ–±–æ—à–µ–ª(–ª–∞) **{winner_name}**, –ø—Ä–∏–≤–µ–¥—è **{winner['brought']}** –Ω–æ–≤—ã—Ö –≥–æ—Å—Ç–µ–π! "
                               f"–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞, —Ç–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üëèü•≥")
                bot.send_message(chat_id, winner_text)
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –≤ —á–∞—Ç {chat_id}: {e}")
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞.")

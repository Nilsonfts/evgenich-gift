# /handlers/user_commands.py

import logging
import datetime
from telebot import types

from config import CHANNEL_ID, HELLO_STICKER_ID, NASTOYKA_STICKER_ID, ADMIN_IDS, REPORT_CHAT_ID
import database
import settings_manager
import texts
import keyboards
from qr_generator import create_qr_code

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def issue_coupon(bot, user_id, chat_id):
    """–í—ã–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫—É–ø–æ–Ω –Ω–∞ –Ω–∞—Å—Ç–æ–π–∫—É."""
    database.update_status(user_id, 'issued')

    try:
        bot.send_sticker(chat_id, NASTOYKA_STICKER_ID)
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä-–∫—É–ø–æ–Ω: {e}")

    bot.send_message(
        chat_id,
        texts.COUPON_TEXT,
        parse_mode="Markdown",
        reply_markup=keyboards.get_redeem_keyboard()
    )

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

def register_user_command_handlers(bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞."""
    
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ (–∏–º—è, –¥–æ–ª–∂–Ω–æ—Å—Ç—å)
    staff_reg_data = {} 
    
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_profile_data = {} 

    @bot.message_handler(commands=['concept'])
    def handle_concept_choice(message: types.Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –¥–ª—è AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."""
        user_id = message.from_user.id
        
        current_concept = database.get_user_concept(user_id)
        concept_names = {
            "rvv": "–†–í–í (–†—É–∫–∏ –í–≤–µ—Ä—Ö –í–∏–Ω—Ç–∞–∂)",
            "evgenich": "–ï–í–ì–ï–ù–ò–ß (–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π)", 
            "nebar": "–ù–ï–ë–ê–† (–ù–µ–æ–±—ã—á–Ω—ã–π –±–∞—Ä–Ω—ã–π —Å—Ç–∏–ª—å)",
            "spletni": "–°–ü–õ–ï–¢–ù–ò (–î—Ä—É–∂–µ—Å–∫–∞—è –±–æ–ª—Ç–æ–≤–Ω—è)",
            "orbita": "–û–†–ë–ò–¢–ê (–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å)"
        }
        
        current_name = concept_names.get(current_concept, "–Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
        
        bot.send_message(
            message.chat.id,
            f"üé≠ **–ú–∞—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞**\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏—é –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞:\n\n"
            f"–¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ü–µ–ø—Ü–∏—è: **{current_name}**",
            reply_markup=keyboards.get_concept_choice_keyboard(),
            parse_mode="Markdown"
        )

    @bot.message_handler(commands=['start'])
    def handle_start(message: types.Message):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
        """
        try:
            user_id = message.from_user.id
            status = database.get_reward_status(user_id)

            if status in ['redeemed', 'redeemed_and_left']:
                logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –ø–æ–ª—É—á–∞–ª –Ω–∞–≥—Ä–∞–¥—É. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é.")
                bot.send_message(
                    user_id,
                    texts.ALREADY_REDEEMED_TEXT,
                    reply_markup=keyboards.get_main_menu_keyboard(user_id),
                    parse_mode="Markdown"
                )
                return

            if status == 'not_found':
                logging.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ SQLite...")
                referrer_id = None
                brought_by_staff_id = None
                source = 'direct'
                
                args = message.text.split(' ', 1)
                if len(args) > 1:
                    payload = args[1]
                    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{message.from_user.username}) –∏—Å–ø–æ–ª—å–∑—É–µ—Ç payload: {payload}")

                    if payload.startswith('w_'):
                        staff_code = payload.replace('w_', '')
                        logging.info(f"üîç –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É —Å –∫–æ–¥–æ–º: {staff_code} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id})")
                        staff_member = database.find_staff_by_code(staff_code)
                        if staff_member:
                            brought_by_staff_id = staff_member['staff_id']
                            source = "staff"
                            logging.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{message.from_user.username}) —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É: {staff_member['full_name']} (ID: {staff_member['staff_id']}, –∫–æ–¥: {staff_code})")
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–æ–≤–æ–º –ø–µ—Ä–µ—Ö–æ–¥–µ –ø–æ QR-–∫–æ–¥—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                            bot.send_message(
                                REPORT_CHAT_ID,
                                f"üìä QR-–ø–µ—Ä–µ—Ö–æ–¥: –ù–æ–≤—ã–π –≥–æ—Å—Ç—å –ø—Ä–∏–≤–ª–µ—á–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º {staff_member['short_name']} "
                                f"(@{message.from_user.username or '–±–µ–∑_username'})",
                                parse_mode="Markdown"
                            )
                        else:
                            logging.warning(f"‚ùå QR-–∫–æ–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω! –ö–æ–¥ '{staff_code}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤. –ü–µ—Ä–µ—Ö–æ–¥ –∑–∞—Å—á–∏—Ç–∞–Ω –∫–∞–∫ 'direct'.")
                            # –ü—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –∫–æ–¥–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å—á–∏—Ç–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ "–ø—Ä—è–º—ã–º"
                            source = 'direct'
                            brought_by_staff_id = None
                    elif payload.startswith('ref_'):
                        try:
                            referrer_id = int(payload.replace('ref_', ''))
                            source = '–†–µ—Ñ–µ—Ä–∞–ª'
                            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏–≥–ª–∞—à–µ–Ω —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º {referrer_id}")
                        except (ValueError, IndexError):
                            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å ref_id –∏–∑ {payload}")
                    else:
                        allowed_sources = {
                            'qr_tv': 'QR —Å –¢–í', 'qr_bar': 'QR –Ω–∞ –±–∞—Ä–µ', 'qr_toilet': 'QR –≤ —Ç—É–∞–ª–µ—Ç–µ',
                            'vk': 'VK', 'inst': 'Instagram', 'flyer': '–õ–∏—Å—Ç–æ–≤–∫–∏',
                            'site': '–°–∞–π—Ç', 'qr_waiter': 'QR –æ—Ç –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞', 'taplink': 'Taplink'
                        }
                        if payload in allowed_sources:
                            source = allowed_sources[payload]
                            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏—à–µ–ª –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {source}")
                        else:
                            logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫: {payload}. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ direct.")

                logging.info(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: –∏—Å—Ç–æ—á–Ω–∏–∫='{source}', —Å–æ—Ç—Ä—É–¥–Ω–∏–∫_id={brought_by_staff_id}, —Ä–µ—Ñ–µ—Ä–µ—Ä={referrer_id}")
                database.add_new_user(user_id, message.from_user.username, message.from_user.first_name, source, referrer_id, brought_by_staff_id)
                if referrer_id:
                    bot.send_message(user_id, texts.NEW_USER_REFERRED_TEXT)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            bot.send_message(
                message.chat.id,
                texts.WELCOME_TEXT,
                reply_markup=keyboards.get_gift_keyboard()
            )
        
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
            logging.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            try:
                bot.send_message(
                    message.from_user.id,
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ /start"
                )
            except:
                pass  # –ï—Å–ª–∏ –¥–∞–∂–µ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç

    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –ü–ï–†–°–û–ù–ê–õ–ê ---

    def process_staff_name_step(message: types.Message):
        """–®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞."""
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∂–¥–µ–º –∏–º—è –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if staff_reg_data.get(user_id) != 'awaiting_name':
            # –ï—Å–ª–∏ –Ω–µ—Ç, –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–ª—å—à–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, AI)
            return

        full_name = message.text.strip()
        if len(full_name.split()) < 2:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏ –∏–º—è, –∏ —Ñ–∞–º–∏–ª–∏—é. –ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –°–º–∏—Ä–Ω–æ–≤")
            # –°–Ω–æ–≤–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —ç—Ç–æ—Ç –∂–µ —à–∞–≥, —á—Ç–æ–±—ã –±–æ—Ç –∂–¥–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞
            bot.register_next_step_handler(message, process_staff_name_step)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
        staff_reg_data[user_id] = {'full_name': full_name}
        bot.send_message(user_id, f"–û—Ç–ª–∏—á–Ω–æ, {full_name.split()[0]}! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å:",
                         reply_markup=keyboards.get_position_choice_keyboard())

    @bot.callback_query_handler(func=lambda call: call.data.startswith("staff_reg_pos_"))
    def handle_staff_position_choice(call: types.CallbackQuery):
        """–®–∞–≥ 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏."""
        user_id = call.from_user.id
        user_state = staff_reg_data.get(user_id)
        
        if not isinstance(user_state, dict) or 'full_name' not in user_state:
            bot.answer_callback_query(call.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /staff_reg", show_alert=True)
            return
            
        position = call.data.replace("staff_reg_pos_", "")
        full_name = user_state['full_name']
        
        bot.answer_callback_query(call.id, text=f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {position}")
        bot.edit_message_text("–û—Ç–ª–∏—á–Ω–æ, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é —Ç–µ–±—è –≤ —Å–∏—Å—Ç–µ–º–µ...", call.message.chat.id, call.message.message_id)
        
        unique_code = database.add_or_update_staff(user_id, full_name, position)
        
        if unique_code:
            bot.send_message(user_id, "–°—É–ø–µ—Ä! –¢—ã –≤ —Å–∏—Å—Ç–µ–º–µ.", reply_markup=keyboards.get_main_menu_keyboard(user_id))
            send_qr_to_staff(bot, user_id, unique_code)
        else:
            bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=keyboards.get_main_menu_keyboard(user_id))
            
        if user_id in staff_reg_data:
            del staff_reg_data[user_id]


    @bot.message_handler(commands=['staff_reg'])
    def handle_staff_reg(message: types.Message):
        """–®–∞–≥ 1: –ò–Ω–∏—Ü–∏–∞—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞."""
        user_id = message.from_user.id
        
        if message.chat.type == 'private':
            bot.send_message(user_id, "–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Ä–∞–±–æ—á–µ–º —á–∞—Ç–µ, —á—Ç–æ–±—ã —è –ø–æ–Ω—è–ª, —á—Ç–æ —Ç—ã –∏–∑ –∫–æ–º–∞–Ω–¥—ã.")
            return

        try:
            member = bot.get_chat_member(REPORT_CHAT_ID, user_id)
            if member.status not in ['member', 'administrator', 'creator']:
                return # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —á–∞—Ç–µ
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–ª–µ–Ω—Å—Ç–≤–æ {user_id} –≤ —Ä–∞–±–æ—á–µ–º —á–∞—Ç–µ: {e}")
            return
        
        existing_staff = database.find_staff_by_telegram_id(user_id)
        if existing_staff:
             msg_to_send = bot.send_message(user_id, "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π QR-–∫–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /myqr")
             return

        # –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        msg = bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –í–∏–∂—É, —Ç—ã –∏–∑ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã. –î–∞–≤–∞–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–±—è –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n"
                                  "**–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–∏ –ø–æ–ª–Ω—ã–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é** (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ò–≤–∞–Ω –°–º–∏—Ä–Ω–æ–≤'). "
                                  "–≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥–µ—Ç –≤–∏–¥–µ—Ç—å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –≤ –æ—Ç—á–µ—Ç–∞—Ö –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.", parse_mode="Markdown")
        
        # "–ó–∞–ø–∏—Ä–∞–µ–º" –±–æ—Ç–∞ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        staff_reg_data[user_id] = 'awaiting_name'
        bot.register_next_step_handler(msg, process_staff_name_step)

    def send_qr_to_staff(bot, user_id, unique_code):
        bot_info = bot.get_me()
        bot_username = bot_info.username
        link = f"https://t.me/{bot_username}?start=w_{unique_code}"
        
        qr_image = create_qr_code(link)
        
        bot.send_photo(user_id, qr_image, caption="–í–æ—Ç —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π QR-–∫–æ–¥ –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –≥–æ—Å—Ç–µ–π. "
                                                  "–ü–æ–∫–∞–∑—ã–≤–∞–π –µ–≥–æ –ø—Ä—è–º–æ —Å —ç–∫—Ä–∞–Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n"
                                                  "–¢—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ —Å–Ω–æ–≤–∞ –∫–æ–º–∞–Ω–¥–æ–π /myqr")

    @bot.message_handler(commands=['myqr'])
    def handle_my_qr(message: types.Message):
        user_id = message.from_user.id
        staff_member = database.find_staff_by_telegram_id(user_id)
        
        if staff_member and staff_member['status'] == 'active':
            send_qr_to_staff(bot, user_id, staff_member['unique_code'])
        else:
            bot.send_message(user_id, "–Ø –Ω–µ –Ω–∞—à–µ–ª —Ç–µ–±—è –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –±–∞–∑–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞. –ï—Å–ª–∏ —Ç—ã –Ω–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /staff_reg –≤ —Ä–∞–±–æ—á–µ–º —á–∞—Ç–µ.")


    # --- –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---

    @bot.message_handler(commands=['friend'])
    @bot.message_handler(func=lambda message: message.text == "ü§ù –ü—Ä–∏–≤–µ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∏—â–∞")
    def handle_friend_command(message: types.Message):
        user_id = message.from_user.id
        bot_username = bot.get_me().username
        ref_link = f"https://t.me/{bot_username}?start=ref_{user_id}"
        bot.send_message(user_id, texts.FRIEND_PROMPT_TEXT)
        bot.send_message(user_id, f"`{ref_link}`", parse_mode="Markdown")
        bot.send_message(user_id, texts.FRIEND_RULES_TEXT, parse_mode="Markdown")

    @bot.message_handler(commands=['menu'])
    @bot.message_handler(func=lambda message: message.text == "üìñ –ú–µ–Ω—é")
    def handle_menu_command(message: types.Message):
        bot.send_message(
            message.chat.id,
            texts.MENU_PROMPT_TEXT,
            reply_markup=keyboards.get_menu_choice_keyboard()
        )

    @bot.message_handler(func=lambda message: message.text == "ü•É –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç–æ–π–∫—É –ø–æ —Ç–∞–ª–æ–Ω—É")
    def handle_redeem_nastoika(message: types.Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç–æ–π–∫–∏ –ø–æ —Ç–∞–ª–æ–Ω—É - –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–±–æ—Ä –ø—Ä–æ—Ñ–∏–ª—è."""
        user_id = message.from_user.id
        user_status = database.get_reward_status(user_id)
        
        if user_status in ['redeemed', 'redeemed_and_left']:
            bot.send_message(
                message.chat.id,
                "ü•É –¢–≤–æ–π –∫—É–ø–æ–Ω —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω, —Ç–æ–≤–∞—Ä–∏—â! –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –µ—â–µ –Ω–∞—Å—Ç–æ–π–∫—É, –ø—Ä–∏–≤–æ–¥–∏ –¥—Ä—É–∑–µ–π!",
                reply_markup=keyboards.get_main_menu_keyboard(user_id)
            )
            return
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –ø—Ä–æ—Ñ–∏–ª—è - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
        bot.send_message(
            message.chat.id,
            texts.CONTACT_REQUEST_TEXT,
            reply_markup=keyboards.get_contact_request_keyboard()
        )

    @bot.message_handler(commands=['voice'])
    def handle_voice_command(message: types.Message):
        audio_id = settings_manager.get_setting("greeting_audio_id")
        if audio_id:
            try:
                bot.send_audio(message.chat.id, audio_id, caption="üéôÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ï–≤–≥–µ–Ω–∏—á–∞!")
            except Exception as e:
                bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ —Å –ø–ª—ë–Ω–∫–æ–π —Å–ª—É—á–∏–ª–æ—Å—å, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å—å... üò•")
        else:
            bot.send_message(message.chat.id, "–ï–≤–≥–µ–Ω–∏—á –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–∏—Å–∞–ª –¥–ª—è –≤–∞—Å –æ–±—Ä–∞—â–µ–Ω–∏–µ, —Ç–æ–≤–∞—Ä–∏—â.")

    @bot.message_handler(commands=['help'])
    def handle_help_command(message: types.Message):
        bot.send_message(
            message.chat.id,
            texts.get_help_text(message.from_user.id, ADMIN_IDS),
            parse_mode="Markdown"
        )

    @bot.message_handler(commands=['restart'])
    def handle_restart_command(message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)."""
        user_id = message.from_user.id
        
        if user_id in ADMIN_IDS:
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            success, msg = database.delete_user(user_id)
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å
            if user_id in user_profile_data:
                del user_profile_data[user_id]
            
            bot.send_message(
                message.chat.id,
                f"‚úÖ –£—Å–ø–µ—Ö: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ SQLite.\n–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ —Å /start",
                reply_markup=types.ReplyKeyboardRemove()
            )
            logging.info(f"–ê–¥–º–∏–Ω {user_id} —Å–±—Ä–æ—Å–∏–ª —Å–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ /restart")
        else:
            bot.send_message(message.chat.id, "üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")

    @bot.message_handler(content_types=['contact'])
    def handle_contact_received(message: types.Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        user_id = message.from_user.id
        
        if message.contact and message.contact.user_id == user_id:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–µ–ª–∏–ª—Å—è —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
            phone_number = message.contact.phone_number
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–µ–ª–∏–ª—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º: {phone_number}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            if database.update_user_contact(user_id, phone_number):
                # –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç
                bot.send_message(
                    message.chat.id,
                    texts.CONTACT_RECEIVED_TEXT
                )
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–±–æ—Ä—É –∏–º–µ–Ω–∏
                user_profile_data[user_id] = 'awaiting_name'
                bot.send_message(
                    message.chat.id,
                    texts.NAME_REQUEST_TEXT,
                    reply_markup=types.ReplyKeyboardRemove()
                )
            else:
                bot.send_message(
                    message.chat.id,
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=keyboards.get_contact_request_keyboard()
                )
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–µ–ª–∏–ª—Å—è —á—É–∂–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
            bot.send_message(
                message.chat.id,
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º, –∞ –Ω–µ —á—É–∂–∏–º üòä\n\n–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=keyboards.get_contact_request_keyboard()
            )
    def handle_gift_button(message: types.Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç–æ–π–∫–∏."""
        user_id = message.from_user.id
        status = database.get_reward_status(user_id)
        
        if status == 'not_found':
            bot.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è! –ù–∞–∂–º–∏ /start")
            return
        elif status in ['redeemed', 'redeemed_and_left']:
            bot.send_message(
                user_id,
                texts.ALREADY_REDEEMED_TEXT,
                reply_markup=keyboards.get_main_menu_keyboard(user_id),
                parse_mode="Markdown"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = database.find_user_by_id(user_id)
        
        if not user_data or not user_data['phone_number']:
            # –ö–æ–Ω—Ç–∞–∫—Ç–∞ –Ω–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ —Å–Ω–∞—á–∞–ª–∞
            bot.send_message(
                user_id,
                texts.CONTACT_REQUEST_TEXT,
                reply_markup=keyboards.get_contact_request_keyboard()
            )
        elif not user_data['real_name'] or not user_data['birth_date']:
            # –ö–æ–Ω—Ç–∞–∫—Ç –µ—Å—Ç—å, –Ω–æ –Ω–µ—Ç –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
            user_profile_data[user_id] = 'awaiting_name'
            bot.send_message(
                user_id,
                texts.NAME_REQUEST_TEXT
            )
        else:
            # –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –µ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –æ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –∫–∞–Ω–∞–ª
            bot.send_message(
                user_id,
                texts.SUBSCRIBE_PROMPT_TEXT,
                reply_markup=keyboards.get_subscription_keyboard(f"https://t.me/{CHANNEL_ID.replace('@', '')}")
            )
    def handle_get_gift_press(message: types.Message):
        user_id = message.from_user.id
        status = database.get_reward_status(user_id)
        if status in ['issued', 'redeemed', 'redeemed_and_left']:
            bot.send_message(user_id, "–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ —Å–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏! üòâ")
            return
        try:
            chat_member = bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
            if chat_member.status in ['member', 'administrator', 'creator']:
                bot.send_message(user_id, texts.SUBSCRIPTION_SUCCESS_TEXT)
                issue_coupon(bot, user_id, message.chat.id)
                return
        except Exception:
            pass
        channel_url = f"https://t.me/{CHANNEL_ID.lstrip('@')}"
        try:
            bot.send_sticker(message.chat.id, HELLO_STICKER_ID)
        except Exception:
            pass
        bot.send_message(
            message.chat.id,
            texts.SUBSCRIBE_PROMPT_TEXT,
            reply_markup=keyboards.get_subscription_keyboard(channel_url),
            parse_mode="Markdown"
        )

    @bot.message_handler(func=lambda message: message.content_type == 'text' and message.from_user.id in user_profile_data)
    def handle_profile_data_collection(message: types.Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–º—è –∏ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è)."""
        user_id = message.from_user.id
        state = user_profile_data.get(user_id)
        
        if state == 'awaiting_name':
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∏–º—è
            real_name = message.text.strip()
            
            if len(real_name) < 2 or len(real_name) > 50:
                bot.send_message(
                    message.chat.id,
                    "–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
            if database.update_user_name(user_id, real_name):
                bot.send_message(
                    message.chat.id,
                    texts.NAME_RECEIVED_TEXT
                )
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–±–æ—Ä—É –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
                user_profile_data[user_id] = 'awaiting_birth_date'
                bot.send_message(
                    message.chat.id,
                    texts.BIRTH_DATE_REQUEST_TEXT,
                    parse_mode="Markdown"
                )
            else:
                bot.send_message(
                    message.chat.id,
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
        
        elif state == 'awaiting_birth_date':
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
            birth_date_text = message.text.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
            try:
                import re
                if not re.match(r'^\d{2}\.\d{2}\.\d{4}$', birth_date_text):
                    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
                day, month, year = map(int, birth_date_text.split('.'))
                birth_date = datetime.date(year, month, day)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –±—É–¥—É—â–µ–º –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è
                today = datetime.date.today()
                if birth_date > today:
                    bot.send_message(
                        message.chat.id,
                        "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                    )
                    return
                
                age = today.year - birth_date.year - ((today.month, today.day) < (birth_date.month, birth_date.day))
                if age > 100:
                    bot.send_message(
                        message.chat.id,
                        "–ö–∞–∂–µ—Ç—Å—è, –¥–∞—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–∞–≤–Ω—è—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                    )
                    return
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
                if database.update_user_birth_date(user_id, birth_date_text):
                    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
                    del user_profile_data[user_id]
                    
                    bot.send_message(
                        message.chat.id,
                        texts.PROFILE_COMPLETED_TEXT
                    )
                    
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –∫–∞–Ω–∞–ª
                    bot.send_message(
                        message.chat.id,
                        texts.SUBSCRIBE_PROMPT_TEXT,
                        reply_markup=keyboards.get_subscription_keyboard(f"https://t.me/{CHANNEL_ID.replace('@', '')}")
                    )
                else:
                    bot.send_message(
                        message.chat.id,
                        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                    )
                    
            except (ValueError, TypeError):
                bot.send_message(
                    message.chat.id,
                    texts.BIRTH_DATE_ERROR_TEXT,
                    parse_mode="Markdown"
                )

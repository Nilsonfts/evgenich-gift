# /handlers/user_commands.py

import logging
import datetime
from telebot import types
import pytz

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥–∏ –∏ —É—Ç–∏–ª–∏—Ç—ã
from config import CHANNEL_ID, HELLO_STICKER_ID, NASTOYKA_STICKER_ID, ADMIN_IDS
import g_sheets
import settings_manager # –ù–∞—à –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ —Ç–µ–∫—Å—Ç—ã –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
import texts
import keyboards

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def issue_coupon(bot, user_id, chat_id):
    """–í—ã–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫—É–ø–æ–Ω –Ω–∞ –Ω–∞—Å—Ç–æ–π–∫—É."""
    g_sheets.update_status(user_id, 'issued')
    
    try:
        bot.send_sticker(chat_id, NASTOYKA_STICKER_ID)
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä-–∫—É–ø–æ–Ω: {e}")
        
    bot.send_message(
        chat_id, 
        texts.COUPON_TEXT, 
        parse_mode="Markdown", 
        reply_markup=keyboards.get_redeem_keyboard()
    )

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

def register_user_command_handlers(bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

    @bot.message_handler(commands=['start'])
    def handle_start(message: types.Message):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
        """
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞–∂–∞–ª /start —Å —Ç–µ–∫—Å—Ç–æ–º: {message.text}")
        user_id = message.from_user.id
        status = g_sheets.get_reward_status(user_id)
        
        if status == 'redeemed':
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –ø–æ–ª—É—á–∞–ª –Ω–∞–≥—Ä–∞–¥—É. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é.")
            bot.send_message(
                user_id, 
                texts.ALREADY_REDEEMED_TEXT,
                reply_markup=keyboards.get_main_menu_keyboard(user_id), 
                parse_mode="Markdown"
            )
            return

        if status == 'not_found':
            logging.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º...")
            referrer_id = None
            source = 'direct'
            
            args = message.text.split(' ', 1)
            if len(args) > 1:
                payload = args[1]
                logging.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–∞–≥—Ä—É–∑–∫–∞ (payload): {payload}")
                if payload.startswith('ref_'):
                    try:
                        referrer_id = int(payload.replace('ref_', ''))
                        source = '–†–µ—Ñ–µ—Ä–∞–ª'
                    except (ValueError, IndexError):
                        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å ref_id –∏–∑ {payload}")
                else:
                    allowed_sources = {
                        'qr_tv': 'QR —Å –¢–í', 'qr_bar': 'QR –Ω–∞ –±–∞—Ä–µ', 
                        'qr_toilet': 'QR –≤ —Ç—É–∞–ª–µ—Ç–µ', 'vk': 'VK', 
                        'inst': 'Instagram', 'flyer': '–õ–∏—Å—Ç–æ–≤–∫–∏', 'site': '–°–∞–π—Ç'
                    }
                    if payload in allowed_sources:
                        source = allowed_sources[payload]
            
            g_sheets.add_new_user(user_id, message.from_user.username or "N/A", message.from_user.first_name, source, referrer_id)
            if referrer_id:
                bot.send_message(user_id, texts.NEW_USER_REFERRED_TEXT)

        bot.send_message(
            message.chat.id, 
            texts.WELCOME_TEXT, 
            reply_markup=keyboards.get_gift_keyboard()
        )

    @bot.message_handler(commands=['friend'])
    @bot.message_handler(func=lambda message: message.text == "ü§ù –ü—Ä–∏–≤–µ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∏—â–∞")
    def handle_friend_command(message: types.Message):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞.
        """
        user_id = message.from_user.id
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.")

        try:
            bot_username = bot.get_me().username
            ref_link = f"https://t.me/{bot_username}?start=ref_{user_id}"

            bot.send_message(user_id, texts.FRIEND_PROMPT_TEXT)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –∫–∞–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è –ª–µ–≥–∫–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            bot.send_message(user_id, f"`{ref_link}`", parse_mode="Markdown")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –∞–∫—Ü–∏–∏
            bot.send_message(user_id, texts.FRIEND_RULES_TEXT, parse_mode="Markdown")

        except Exception as e:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è {user_id}: {e}", exc_info=True)
            bot.send_message(user_id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞–µ—Ç—Å—è.")

    @bot.message_handler(commands=['channel'])
    def handle_channel_command(message: types.Message):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π Telegram-–∫–∞–Ω–∞–ª.
        """
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª.")
        channel_url = f"https.me/{CHANNEL_ID.lstrip('@')}"
        keyboard = types.InlineKeyboardMarkup()
        url_button = types.InlineKeyboardButton(text="‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª", url=channel_url)
        keyboard.add(url_button)
        bot.send_message(message.chat.id, "–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª:", reply_markup=keyboard)

    @bot.message_handler(commands=['menu'])
    @bot.message_handler(func=lambda message: message.text == "üìñ –ú–µ–Ω—é")
    def handle_menu_command(message: types.Message):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ–Ω—é.
        """
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é.")
        bot.send_message(
            message.chat.id, 
            texts.MENU_PROMPT_TEXT, 
            reply_markup=keyboards.get_menu_choice_keyboard()
        )
        
    @bot.message_handler(commands=['happy_hours'])
    def handle_happy_hours(message: types.Message):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–µ–π—Å—Ç–≤—É—é—Ç –ª–∏ —Å–µ–π—á–∞—Å —Å—á–∞—Å—Ç–ª–∏–≤—ã–µ —á–∞—Å—ã."""
        promo = settings_manager.get_setting("promotions.happy_hours")
        if not promo or not promo.get('is_active'):
            bot.reply_to(message, texts.HAPPY_HOURS_FAIL)
            return

        now = datetime.datetime.now(pytz.timezone('Europe/Moscow'))
        is_right_day = now.weekday() in promo.get('days', [])
        
        start_time_obj = datetime.datetime.strptime(promo.get('start_time'), '%H:%M').time()
        end_time_obj = datetime.datetime.strptime(promo.get('end_time'), '%H:%M').time()
        is_right_time = start_time_obj <= now.time() <= end_time_obj

        if is_right_day and is_right_time:
            bot.reply_to(message, texts.HAPPY_HOURS_PROMPT)
            bot.send_message(message.chat.id, texts.get_happy_hours_text(promo.get('bonus_text')), parse_mode="Markdown")
        else:
            bot.reply_to(message, texts.HAPPY_HOURS_FAIL)

    @bot.message_handler(commands=['parol'])
    def handle_password_prompt(message: types.Message):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–∞—Ä–æ–ª—å –¥–Ω—è."""
        promo = settings_manager.get_setting("promotions.password_of_the_day")
        if not promo or not promo.get('is_active'):
            bot.reply_to(message, "–ê–∫—Ü–∏—è —Å –ø–∞—Ä–æ–ª–µ–º —Å–µ–≥–æ–¥–Ω—è –Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç, —Ç–æ–≤–∞—Ä–∏—â.")
            return
        
        msg = bot.reply_to(message, texts.PASSWORD_PROMPT)
        bot.register_next_step_handler(msg, check_password_step)

    def check_password_step(message: types.Message):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–∞—Ä–æ–ª—å."""
        promo = settings_manager.get_setting("promotions.password_of_the_day")
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª–∏ –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
        if message.text.strip().lower() == promo.get('password', '').lower():
            bot.reply_to(message, texts.PASSWORD_SUCCESS)
            bot.send_message(message.chat.id, texts.get_password_bonus_text(promo.get('bonus_text')), parse_mode="Markdown")
        else:
            bot.reply_to(message, texts.PASSWORD_FAIL)

    @bot.message_handler(commands=['help'])
    def handle_help_command(message: types.Message):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞.
        """
        bot.send_message(
            message.chat.id, 
            texts.get_help_text(message.from_user.id, ADMIN_IDS), 
            parse_mode="Markdown"
        )

    @bot.message_handler(func=lambda message: message.text == "ü•É –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç–æ–π–∫—É –ø–æ —Ç–∞–ª–æ–Ω—É")
    def handle_get_gift_press(message: types.Message):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–æ—Ä–æ–Ω–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç–æ–π–∫–∏ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É.
        """
        user_id = message.from_user.id
        status = g_sheets.get_reward_status(user_id)
        if status in ['issued', 'redeemed']:
            bot.send_message(user_id, "–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ —Å–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏! üòâ")
            return
        
        try:
            chat_member = bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
            if chat_member.status in ['member', 'administrator', 'creator']:
                bot.send_message(user_id, texts.SUBSCRIPTION_SUCCESS_TEXT)
                issue_coupon(bot, user_id, message.chat.id)
                return
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}: {e}")
        
        channel_url = f"https.me/{CHANNEL_ID.lstrip('@')}"
        try:
            bot.send_sticker(message.chat.id, HELLO_STICKER_ID)
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä: {e}")
            
        bot.send_message(
            message.chat.id, 
            texts.SUBSCRIBE_PROMPT_TEXT, 
            reply_markup=keyboards.get_subscription_keyboard(channel_url),
            parse_mode="Markdown"
        )

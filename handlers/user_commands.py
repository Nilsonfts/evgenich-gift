# /handlers/user_commands.py

import logging
from telebot import types

from config import CHANNEL_ID, HELLO_STICKER_ID, NASTOYKA_STICKER_ID, ADMIN_IDS, REPORT_CHAT_ID
import database
import settings_manager
import texts
import keyboards
from qr_generator import create_qr_code

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def issue_coupon(bot, user_id, chat_id):
    """–í—ã–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫—É–ø–æ–Ω –Ω–∞ –Ω–∞—Å—Ç–æ–π–∫—É."""
    database.update_status(user_id, 'issued')

    try:
        bot.send_sticker(chat_id, NASTOYKA_STICKER_ID)
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä-–∫—É–ø–æ–Ω: {e}")

    bot.send_message(
        chat_id,
        texts.COUPON_TEXT,
        parse_mode="Markdown",
        reply_markup=keyboards.get_redeem_keyboard()
    )

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

def register_user_command_handlers(bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞."""
    
    staff_reg_states = {} # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞

    @bot.message_handler(commands=['start'])
    def handle_start(message: types.Message):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
        """
        user_id = message.from_user.id
        status = database.get_reward_status(user_id)

        if status == 'redeemed' or status == 'redeemed_and_left':
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –ø–æ–ª—É—á–∞–ª –Ω–∞–≥—Ä–∞–¥—É. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é.")
            bot.send_message(
                user_id,
                texts.ALREADY_REDEEMED_TEXT,
                reply_markup=keyboards.get_main_menu_keyboard(user_id),
                parse_mode="Markdown"
            )
            return

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –µ–≥–æ
        if status == 'not_found':
            logging.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ SQLite...")
            referrer_id = None
            brought_by_staff_id = None
            source = 'direct'
            
            args = message.text.split(' ', 1)
            if len(args) > 1:
                payload = args[1]
                logging.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–∞–≥—Ä—É–∑–∫–∞ (payload): {payload}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–≤–µ–ª –ª–∏ –≥–æ—Å—Ç—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫
                if payload.startswith('w_'):
                    staff_code = payload.replace('w_', '')
                    staff_member = database.find_staff_by_code(staff_code)
                    if staff_member:
                        brought_by_staff_id = staff_member['staff_id']
                        source = f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {staff_member['short_name']}"
                    else:
                        logging.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å –∫–æ–¥–æ–º {staff_code}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–≤–µ–ª –ª–∏ –≥–æ—Å—Ç—è –¥—Ä—É–≥–æ–π –≥–æ—Å—Ç—å (—Ä–µ—Ñ–µ—Ä–∞–ª)
                elif payload.startswith('ref_'):
                    try:
                        referrer_id = int(payload.replace('ref_', ''))
                        source = '–†–µ—Ñ–µ—Ä–∞–ª'
                    except (ValueError, IndexError):
                        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å ref_id –∏–∑ {payload}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
                else:
                    allowed_sources = {
                        'qr_tv': 'QR —Å –¢–í', 'qr_bar': 'QR –Ω–∞ –±–∞—Ä–µ', 'qr_toilet': 'QR –≤ —Ç—É–∞–ª–µ—Ç–µ',
                        'vk': 'VK', 'inst': 'Instagram', 'flyer': '–õ–∏—Å—Ç–æ–≤–∫–∏',
                        'site': '–°–∞–π—Ç', 'qr_waiter': 'QR –æ—Ç –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞', 'taplink': 'Taplink'
                    }
                    if payload in allowed_sources:
                        source = allowed_sources[payload]

            database.add_new_user(user_id, message.from_user.username, message.from_user.first_name, source, referrer_id, brought_by_staff_id)
            if referrer_id:
                bot.send_message(user_id, texts.NEW_USER_REFERRED_TEXT)

        bot.send_message(
            message.chat.id,
            texts.WELCOME_TEXT,
            reply_markup=keyboards.get_gift_keyboard()
        )

    # --- –ù–û–í–´–ï –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ü–ï–†–°–û–ù–ê–õ–ê ---

    def process_staff_name_step(message: types.Message):
        user_id = message.from_user.id
        if staff_reg_states.get(user_id) != 'awaiting_name':
            return
            
        full_name = message.text.strip()
        if len(full_name.split()) < 2:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏ –∏–º—è, –∏ —Ñ–∞–º–∏–ª–∏—é. –ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –°–º–∏—Ä–Ω–æ–≤")
            # –ù–µ –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∂–¥–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞
            return
            
        staff_reg_states[user_id] = {'step': 'awaiting_position', 'full_name': full_name}
        bot.send_message(user_id, f"–û—Ç–ª–∏—á–Ω–æ, {full_name.split()[0]}! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å:",
                         reply_markup=keyboards.get_position_choice_keyboard())

    @bot.callback_query_handler(func=lambda call: call.data.startswith("staff_reg_pos_"))
    def handle_staff_position_choice(call: types.CallbackQuery):
        user_id = call.from_user.id
        user_state = staff_reg_states.get(user_id)
        
        if not user_state or user_state.get('step') != 'awaiting_position':
            return
            
        position = call.data.replace("staff_reg_pos_", "")
        full_name = user_state['full_name']
        
        bot.answer_callback_query(call.id, text=f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {position}")
        bot.delete_message(call.message.chat.id, call.message.message_id)
        
        unique_code = database.add_or_update_staff(user_id, full_name, position)
        
        if unique_code:
            bot.send_message(user_id, "–°—É–ø–µ—Ä! –¢—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
            send_qr_to_staff(bot, user_id, unique_code)
        else:
            bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            
        del staff_reg_states[user_id]


    @bot.message_handler(commands=['staff_reg'])
    def handle_staff_reg(message: types.Message):
        user_id = message.from_user.id
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–∞–±–æ—á–µ–º —á–∞—Ç–µ
            member = bot.get_chat_member(REPORT_CHAT_ID, user_id)
            if member.status not in ['member', 'administrator', 'creator']:
                return # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–ª–µ–Ω—Å—Ç–≤–æ {user_id} –≤ —Ä–∞–±–æ—á–µ–º —á–∞—Ç–µ: {e}")
            return

        # –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        staff_reg_states[user_id] = 'awaiting_name'
        bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –í–∏–∂—É, —Ç—ã –∏–∑ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã. –î–∞–≤–∞–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–±—è –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n"
                                  "**–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–∏ –ø–æ–ª–Ω—ã–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é** (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ò–≤–∞–Ω –°–º–∏—Ä–Ω–æ–≤'). "
                                  "–≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥–µ—Ç –≤–∏–¥–µ—Ç—å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –≤ –æ—Ç—á–µ—Ç–∞—Ö –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.", parse_mode="Markdown")
        bot.register_next_step_handler_by_chat_id(user_id, process_staff_name_step)

    def send_qr_to_staff(bot, user_id, unique_code):
        bot_info = bot.get_me()
        bot_username = bot_info.username
        link = f"https://t.me/{bot_username}?start=w_{unique_code}"
        
        qr_image = create_qr_code(link)
        
        bot.send_photo(user_id, qr_image, caption="–í–æ—Ç —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π QR-–∫–æ–¥ –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –≥–æ—Å—Ç–µ–π. "
                                                  "–ü–æ–∫–∞–∑—ã–≤–∞–π –µ–≥–æ –ø—Ä—è–º–æ —Å —ç–∫—Ä–∞–Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n"
                                                  "–¢—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ —Å–Ω–æ–≤–∞ –∫–æ–º–∞–Ω–¥–æ–π /myqr")

    @bot.message_handler(commands=['myqr'])
    def handle_my_qr(message: types.Message):
        user_id = message.from_user.id
        staff_member = database.find_staff_by_telegram_id(user_id)
        
        if staff_member and staff_member['status'] == 'active':
            send_qr_to_staff(bot, user_id, staff_member['unique_code'])
        else:
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ
            pass

    # --- –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---

    @bot.message_handler(commands=['friend'])
    @bot.message_handler(func=lambda message: message.text == "ü§ù –ü—Ä–∏–≤–µ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∏—â–∞")
    def handle_friend_command(message: types.Message):
        user_id = message.from_user.id
        bot_username = bot.get_me().username
        ref_link = f"https://t.me/{bot_username}?start=ref_{user_id}"
        bot.send_message(user_id, texts.FRIEND_PROMPT_TEXT)
        bot.send_message(user_id, f"`{ref_link}`", parse_mode="Markdown")
        bot.send_message(user_id, texts.FRIEND_RULES_TEXT, parse_mode="Markdown")

    @bot.message_handler(commands=['menu'])
    @bot.message_handler(func=lambda message: message.text == "üìñ –ú–µ–Ω—é")
    def handle_menu_command(message: types.Message):
        bot.send_message(
            message.chat.id,
            texts.MENU_PROMPT_TEXT,
            reply_markup=keyboards.get_menu_choice_keyboard()
        )

    @bot.message_handler(commands=['voice'])
    def handle_voice_command(message: types.Message):
        audio_id = settings_manager.get_setting("greeting_audio_id")
        if audio_id:
            try:
                bot.send_audio(message.chat.id, audio_id, caption="üéôÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ï–≤–≥–µ–Ω–∏—á–∞!")
            except Exception as e:
                bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ —Å –ø–ª—ë–Ω–∫–æ–π —Å–ª—É—á–∏–ª–æ—Å—å, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å—å... üò•")
        else:
            bot.send_message(message.chat.id, "–ï–≤–≥–µ–Ω–∏—á –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–∏—Å–∞–ª –¥–ª—è –≤–∞—Å –æ–±—Ä–∞—â–µ–Ω–∏–µ, —Ç–æ–≤–∞—Ä–∏—â.")

    @bot.message_handler(commands=['help'])
    def handle_help_command(message: types.Message):
        bot.send_message(
            message.chat.id,
            texts.get_help_text(message.from_user.id, ADMIN_IDS),
            parse_mode="Markdown"
        )

    @bot.message_handler(func=lambda message: message.text == "ü•É –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç–æ–π–∫—É –ø–æ —Ç–∞–ª–æ–Ω—É")
    def handle_get_gift_press(message: types.Message):
        user_id = message.from_user.id
        status = database.get_reward_status(user_id)
        if status in ['issued', 'redeemed', 'redeemed_and_left']:
            bot.send_message(user_id, "–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ —Å–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏! üòâ")
            return
        try:
            chat_member = bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
            if chat_member.status in ['member', 'administrator', 'creator']:
                bot.send_message(user_id, texts.SUBSCRIPTION_SUCCESS_TEXT)
                issue_coupon(bot, user_id, message.chat.id)
                return
        except Exception:
            pass
        channel_url = f"https://t.me/{CHANNEL_ID.lstrip('@')}"
        try:
            bot.send_sticker(message.chat.id, HELLO_STICKER_ID)
        except Exception:
            pass
        bot.send_message(
            message.chat.id,
            texts.SUBSCRIBE_PROMPT_TEXT,
            reply_markup=keyboards.get_subscription_keyboard(channel_url),
            parse_mode="Markdown"
        )

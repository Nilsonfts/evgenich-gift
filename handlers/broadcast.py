# handlers/broadcast.py
import logging
import threading
import time
from typing import List, Dict, Optional
from telebot import types
from telebot.apihelper import ApiTelegramException
import core.database as database
from datetime import datetime
import pytz

def register_broadcast_handlers(bot):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—Å—ã–ª–æ–∫
    """
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
    broadcast_states = {}
    
    @bot.message_handler(commands=['broadcast'])
    def handle_broadcast_command(message):
        """
        –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
        """
        if not database.is_admin(message.from_user.id):
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
        keyboard = types.InlineKeyboardMarkup()
        keyboard.row(
            types.InlineKeyboardButton("üìù –¢–µ–∫—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", callback_data="broadcast_text"),
            types.InlineKeyboardButton("üì∑ –†–∞—Å—Å—ã–ª–∫–∞ —Å –º–µ–¥–∏–∞", callback_data="broadcast_media")
        )
        keyboard.row(
            types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="broadcast_cancel")
        )
        
        text = "üì¢ *–°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—Å—ã–ª–æ–∫*\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:"
        
        bot.send_message(message.chat.id, text, parse_mode="Markdown", reply_markup=keyboard)
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith('broadcast_'))
    def handle_broadcast_callbacks(call):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—Å—ã–ª–æ–∫
        """
        user_id = call.from_user.id
        
        if not database.is_admin(user_id):
            bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤")
            return
        
        if call.data == "broadcast_cancel":
            # –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
            if user_id in broadcast_states:
                del broadcast_states[user_id]
            bot.edit_message_text(
                "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                call.message.chat.id,
                call.message.message_id
            )
            return
        
        elif call.data == "broadcast_text":
            # –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
            broadcast_states[user_id] = {
                'type': 'text',
                'step': 'waiting_content',
                'message_id': call.message.message_id
            }
            
            text = "üìù *–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏*\n\n"
            text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n"
            text += "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:\n"
            text += "‚Ä¢ **–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç**\n"
            text += "‚Ä¢ *–∫—É—Ä—Å–∏–≤*\n"
            text += "‚Ä¢ `–∫–æ–¥`\n"
            text += "‚Ä¢ [—Å—Å—ã–ª–∫–∞](http://example.com)\n\n"
            text += "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel"
            
            bot.edit_message_text(
                text,
                call.message.chat.id,
                call.message.message_id,
                parse_mode="Markdown"
            )
        
        elif call.data == "broadcast_media":
            # –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –º–µ–¥–∏–∞
            broadcast_states[user_id] = {
                'type': 'media',
                'step': 'waiting_media',
                'message_id': call.message.message_id
            }
            
            text = "üì∑ *–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –º–µ–¥–∏–∞*\n\n"
            text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥—Ä—É–≥–æ–π –º–µ–¥–∏–∞—Ñ–∞–π–ª.\n"
            text += "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å –∫ —Å–æ–æ–±—â–µ–Ω–∏—é.\n\n"
            text += "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel"
            
            bot.edit_message_text(
                text,
                call.message.chat.id,
                call.message.message_id,
                parse_mode="Markdown"
            )
        
        elif call.data == "broadcast_test":
            # –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
            if user_id not in broadcast_states:
                bot.answer_callback_query(call.id, "‚ùå –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            state = broadcast_states[user_id]
            success = send_test_broadcast(bot, user_id, state)
            
            if success:
                bot.answer_callback_query(call.id, "‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
            else:
                bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
        
        elif call.data == "broadcast_send_all":
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            if user_id not in broadcast_states:
                bot.answer_callback_query(call.id, "‚ùå –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            state = broadcast_states[user_id]
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            keyboard = types.InlineKeyboardMarkup()
            keyboard.row(
                types.InlineKeyboardButton("‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="broadcast_confirm_all"),
                types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="broadcast_cancel")
            )
            
            all_users = database.get_all_users_for_broadcast()
            user_count = len(all_users) if all_users else 0
            
            text = f"‚ö†Ô∏è *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É*\n\n"
            text += f"–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ **{user_count}** –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n"
            text += "–í—ã —É–≤–µ—Ä–µ–Ω—ã?"
            
            bot.edit_message_text(
                text,
                call.message.chat.id,
                call.message.message_id,
                parse_mode="Markdown",
                reply_markup=keyboard
            )
        
        elif call.data == "broadcast_confirm_all":
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
            if user_id not in broadcast_states:
                bot.answer_callback_query(call.id, "‚ùå –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            state = broadcast_states[user_id]
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            threading.Thread(
                target=start_mass_broadcast,
                args=(bot, user_id, state, call.message.chat.id, call.message.message_id),
                daemon=True
            ).start()
            
            bot.answer_callback_query(call.id, "üöÄ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!")
    
    @bot.message_handler(func=lambda message: message.from_user.id in broadcast_states)
    def handle_broadcast_content(message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        """
        user_id = message.from_user.id
        
        if message.text == "/cancel":
            # –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
            del broadcast_states[user_id]
            bot.send_message(message.chat.id, "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return
        
        state = broadcast_states[user_id]
        
        if state['step'] == 'waiting_content' and state['type'] == 'text':
            # –ü–æ–ª—É—á–∏–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
            state['content'] = message.text
            state['message_format'] = 'text'
            show_broadcast_preview(bot, user_id, state, message.chat.id)
        
        elif state['step'] == 'waiting_media' and state['type'] == 'media':
            # –ü–æ–ª—É—á–∏–ª–∏ –º–µ–¥–∏–∞ —Ñ–∞–π–ª
            media_info = extract_media_info(message)
            if media_info:
                state['media'] = media_info
                state['step'] = 'waiting_caption'
                
                text = "üìù *–î–æ–±–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å—å –∫ –º–µ–¥–∏–∞*\n\n"
                text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ–¥–ø–∏—Å–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏.\n"
                text += "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel"
                
                bot.send_message(message.chat.id, text, parse_mode="Markdown")
            else:
                bot.send_message(message.chat.id, "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –º–µ–¥–∏–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        
        elif state['step'] == 'waiting_caption' and state['type'] == 'media':
            # –ü–æ–ª—É—á–∏–ª–∏ –ø–æ–¥–ø–∏—Å—å –¥–ª—è –º–µ–¥–∏–∞
            if message.text == "/skip":
                state['content'] = ""
            else:
                state['content'] = message.text
            
            state['message_format'] = 'media'
            show_broadcast_preview(bot, user_id, state, message.chat.id)

def extract_media_info(message):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    if message.photo:
        return {
            'type': 'photo',
            'file_id': message.photo[-1].file_id,  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
            'caption': message.caption
        }
    elif message.video:
        return {
            'type': 'video',
            'file_id': message.video.file_id,
            'caption': message.caption
        }
    elif message.document:
        return {
            'type': 'document',
            'file_id': message.document.file_id,
            'caption': message.caption
        }
    elif message.animation:  # GIF
        return {
            'type': 'animation',
            'file_id': message.animation.file_id,
            'caption': message.caption
        }
    elif message.voice:
        return {
            'type': 'voice',
            'file_id': message.voice.file_id,
            'caption': message.caption
        }
    elif message.audio:
        return {
            'type': 'audio',
            'file_id': message.audio.file_id,
            'caption': message.caption
        }
    
    return None

def show_broadcast_preview(bot, user_id, state, chat_id):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–≤—å—é —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    """
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row(
        types.InlineKeyboardButton("üß™ –¢–ï–°–¢ (–º–Ω–µ)", callback_data="broadcast_test"),
        types.InlineKeyboardButton("üì¢ –í–°–ï–ú", callback_data="broadcast_send_all")
    )
    keyboard.row(
        types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="broadcast_cancel")
    )
    
    preview_text = "‚úÖ *–†–∞—Å—Å—ã–ª–∫–∞ –≥–æ—Ç–æ–≤–∞!*\n\n"
    preview_text += "**–ü—Ä–µ–≤—å—é —Å–æ–æ–±—â–µ–Ω–∏—è:**\n"
    preview_text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    
    if state['message_format'] == 'text':
        preview_text += f"{state['content']}\n"
    else:
        preview_text += f"üìé –ú–µ–¥–∏–∞—Ñ–∞–π–ª ({state['media']['type']})\n"
        if state['content']:
            preview_text += f"–ü–æ–¥–ø–∏—Å—å: {state['content']}\n"
    
    preview_text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
    preview_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é
    if state['message_format'] == 'media':
        # –ï—Å–ª–∏ —ç—Ç–æ –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ —Å –ø—Ä–µ–≤—å—é —Ç–µ–∫—Å—Ç–æ–º –∫–∞–∫ –ø–æ–¥–ø–∏—Å—å
        send_media_message(bot, chat_id, state['media'], preview_text, keyboard)
    else:
        # –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(chat_id, preview_text, parse_mode="Markdown", reply_markup=keyboard)

def send_media_message(bot, chat_id, media_info, caption, keyboard=None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    try:
        if media_info['type'] == 'photo':
            bot.send_photo(
                chat_id, 
                media_info['file_id'], 
                caption=caption, 
                parse_mode="Markdown",
                reply_markup=keyboard
            )
        elif media_info['type'] == 'video':
            bot.send_video(
                chat_id, 
                media_info['file_id'], 
                caption=caption, 
                parse_mode="Markdown",
                reply_markup=keyboard
            )
        elif media_info['type'] == 'document':
            bot.send_document(
                chat_id, 
                media_info['file_id'], 
                caption=caption, 
                parse_mode="Markdown",
                reply_markup=keyboard
            )
        elif media_info['type'] == 'animation':
            bot.send_animation(
                chat_id, 
                media_info['file_id'], 
                caption=caption, 
                parse_mode="Markdown",
                reply_markup=keyboard
            )
        elif media_info['type'] == 'voice':
            bot.send_voice(
                chat_id, 
                media_info['file_id'], 
                caption=caption, 
                parse_mode="Markdown",
                reply_markup=keyboard
            )
        elif media_info['type'] == 'audio':
            bot.send_audio(
                chat_id, 
                media_info['file_id'], 
                caption=caption, 
                parse_mode="Markdown",
                reply_markup=keyboard
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞: {str(e)}")

def send_test_broadcast(bot, admin_id, state):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    """
    try:
        if state['message_format'] == 'text':
            bot.send_message(admin_id, state['content'], parse_mode="Markdown")
        else:
            send_broadcast_media_to_user(bot, admin_id, state)
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False

def send_broadcast_media_to_user(bot, user_id, state):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    media_info = state['media']
    caption = state['content'] if state['content'] else None
    
    if media_info['type'] == 'photo':
        bot.send_photo(user_id, media_info['file_id'], caption=caption, parse_mode="Markdown")
    elif media_info['type'] == 'video':
        bot.send_video(user_id, media_info['file_id'], caption=caption, parse_mode="Markdown")
    elif media_info['type'] == 'document':
        bot.send_document(user_id, media_info['file_id'], caption=caption, parse_mode="Markdown")
    elif media_info['type'] == 'animation':
        bot.send_animation(user_id, media_info['file_id'], caption=caption, parse_mode="Markdown")
    elif media_info['type'] == 'voice':
        bot.send_voice(user_id, media_info['file_id'], caption=caption, parse_mode="Markdown")
    elif media_info['type'] == 'audio':
        bot.send_audio(user_id, media_info['file_id'], caption=caption, parse_mode="Markdown")

def start_mass_broadcast(bot, admin_id, state, status_chat_id, status_message_id):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        all_users = database.get_all_users_for_broadcast()
        
        if not all_users:
            bot.edit_message_text(
                "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏",
                status_chat_id,
                status_message_id
            )
            return
        
        total_users = len(all_users)
        sent_count = 0
        failed_count = 0
        blocked_count = 0
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
        status_text = f"üöÄ *–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞*\n\n"
        status_text += f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        status_text += f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
        status_text += f"–û—à–∏–±–æ–∫: {failed_count}\n"
        status_text += f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {blocked_count}"
        
        bot.edit_message_text(
            status_text,
            status_chat_id,
            status_message_id,
            parse_mode="Markdown"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π (—á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞—Å—Ç—å –≤ –ª–∏–º–∏—Ç—ã Telegram)
        for i, user in enumerate(all_users):
            try:
                user_id = user.get('user_id')
                if not user_id:
                    continue
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                if state['message_format'] == 'text':
                    bot.send_message(user_id, state['content'], parse_mode="Markdown")
                else:
                    send_broadcast_media_to_user(bot, user_id, state)
                
                sent_count += 1
                
                # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
                logging.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                
            except ApiTelegramException as e:
                if e.error_code == 403:  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
                    blocked_count += 1
                    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
                    # –ü–æ–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤—à–µ–≥–æ –±–æ—Ç–∞
                    database.mark_user_blocked(user_id)
                else:
                    failed_count += 1
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            except Exception as e:
                failed_count += 1
                logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 10 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if (i + 1) % 10 == 0 or i == total_users - 1:
                status_text = f"üìä *–°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏*\n\n"
                status_text += f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                status_text += f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
                status_text += f"‚ùå –û—à–∏–±–æ–∫: {failed_count}\n"
                status_text += f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {blocked_count}\n"
                status_text += f"‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å: {i + 1}/{total_users} ({round((i + 1) / total_users * 100, 1)}%)"
                
                try:
                    bot.edit_message_text(
                        status_text,
                        status_chat_id,
                        status_message_id,
                        parse_mode="Markdown"
                    )
                except:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ (30 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É –º–∞–∫—Å–∏–º—É–º –¥–ª—è Telegram)
            time.sleep(0.05)
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        status_text = f"‚úÖ *–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n"
        status_text += f"üìä **–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        status_text += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        status_text += f"‚Ä¢ ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
        status_text += f"‚Ä¢ ‚ùå –û—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏: {failed_count}\n"
        status_text += f"‚Ä¢ üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {blocked_count}\n\n"
        
        success_rate = round((sent_count / total_users) * 100, 1) if total_users > 0 else 0
        status_text += f"üéØ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏: {success_rate}%"
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        moscow_tz = pytz.timezone('Europe/Moscow')
        current_time = datetime.now(moscow_tz).strftime('%Y-%m-%d %H:%M:%S')
        
        logging.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ {current_time}. "
                    f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}/{total_users}. "
                    f"–û—à–∏–±–æ–∫: {failed_count}. –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏: {blocked_count}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        bot.edit_message_text(
            status_text,
            status_chat_id,
            status_message_id,
            parse_mode="Markdown"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        notification_text = f"üì¢ *–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n"
        notification_text += f"–£—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {sent_count} –∏–∑ {total_users} —Å–æ–æ–±—â–µ–Ω–∏–π"
        
        bot.send_message(admin_id, notification_text, parse_mode="Markdown")
        
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")
        
        error_text = f"‚ùå *–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏*\n\n"
        error_text += f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}\n\n"
        error_text += f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {sent_count}"
        
        try:
            bot.edit_message_text(
                error_text,
                status_chat_id,
                status_message_id,
                parse_mode="Markdown"
            )
        except:
            bot.send_message(admin_id, error_text, parse_mode="Markdown")

# /handlers/booking_flow.py

import logging
from telebot import types
from telebot.apihelper import ApiTelegramException
from tinydb import TinyDB, Query

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥–∏, —Ç–µ–∫—Å—Ç—ã –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from config import BOOKING_NOTIFICATIONS_CHAT_ID, REPORT_CHAT_ID
import texts
import keyboards
import settings_manager # –ù–∞—à –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ —Å–æ—Ü—Å–µ—Ç–∏
from social_bookings_export import (
    export_social_booking_to_sheets, 
    export_guest_booking_to_sheets,
    parse_booking_date, 
    parse_booking_time
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
db = TinyDB('booking_data.json')
User = Query()

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---

def register_booking_handlers(bot):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–∞.
    """

    def _start_booking_process(chat_id, user_id):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        db.upsert({'user_id': user_id, 'step': 'name', 'data': {}}, User.user_id == user_id)
        bot.send_message(chat_id, texts.BOOKING_START_PROMPT, parse_mode="Markdown")

    def _cancel_booking(message):
        """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î."""
        user_id = message.from_user.id
        if db.contains(User.user_id == user_id):
            db.remove(User.user_id == user_id)
            bot.send_message(
                user_id,
                texts.BOOKING_CANCELLED_TEXT,
                reply_markup=keyboards.get_main_menu_keyboard(user_id)
            )
        else:
            bot.reply_to(message, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã.")

    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
    @bot.message_handler(commands=['cancel'])
    def handle_cancel_command(message: types.Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /cancel, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
        _cancel_booking(message)

    @bot.message_handler(commands=['book'])
    @bot.message_handler(func=lambda message: message.text == "üìç –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª")
    def handle_booking_entry(message: types.Message):
        if db.contains(User.user_id == message.from_user.id):
            bot.reply_to(message, texts.BOOKING_IN_PROGRESS_TEXT)
            return

        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞–∂–∞–ª '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª'.")
        bot.send_message(
            message.chat.id,
            texts.BOOKING_PROMPT_TEXT,
            reply_markup=keyboards.get_booking_options_keyboard()
        )

    @bot.message_handler(func=lambda message: message.text == "üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ë–†–û–ù–¨")
    def handle_admin_booking_entry(message: types.Message):
        from config import ALL_BOOKING_STAFF
        if message.from_user.id not in ALL_BOOKING_STAFF:
            bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –±—Ä–æ–Ω–µ–π.")
            return
            
        if db.contains(User.user_id == message.from_user.id):
            bot.reply_to(message, "–£–∂–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è –±—Ä–æ–Ω—å. –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∏–ª–∏ /cancel")
            return

        logging.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏.")
        db.upsert({'user_id': message.from_user.id, 'step': 'admin_name', 'data': {'is_admin_booking': True}}, User.user_id == message.from_user.id)
        bot.send_message(message.chat.id, texts.ADMIN_BOOKING_START)

    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ ---
    @bot.callback_query_handler(func=lambda call: call.data.startswith("source_"))
    def handle_traffic_source_callback(call: types.CallbackQuery):
        user_id = call.from_user.id
        bot.answer_callback_query(call.id)
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except ApiTelegramException:
            pass

        user_entry = db.get(User.user_id == user_id)
        if not user_entry:
            return

        current_data = user_entry.get('data', {})
        current_data['source'] = call.data
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É (–ø–æ–≤–æ–¥)
        db.update({'step': 'reason', 'data': current_data}, User.user_id == user_id)
        
        if current_data.get('is_admin_booking'):
            bot.send_message(call.message.chat.id, texts.ADMIN_BOOKING_REASON)
        else:
            bot.send_message(call.message.chat.id, texts.BOOKING_ASK_REASON)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("booking_"))
    def handle_booking_option_callback(call: types.CallbackQuery):
        bot.answer_callback_query(call.id)
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except ApiTelegramException:
            pass

        if call.data == "booking_phone":
            bot.send_message(call.message.chat.id, texts.BOOKING_PHONE_TEXT, parse_mode="Markdown")
        elif call.data == "booking_site":
            bot.send_message(call.message.chat.id, texts.BOOKING_SITE_TEXT)
        elif call.data == "booking_secret":
            bot.send_message(call.message.chat.id, texts.BOOKING_SECRET_CHAT_TEXT, reply_markup=keyboards.get_secret_chat_keyboard())
        elif call.data == "booking_bot":
            # –ù–∞—á–∏–Ω–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≥–æ—Å—Ç—è
            db.upsert({'user_id': call.from_user.id, 'step': 'name', 'data': {'is_guest_booking': True}}, User.user_id == call.from_user.id)
            bot.send_message(
                call.message.chat.id, 
                "üåü –û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä—É–µ–º –¥–ª—è –≤–∞—Å —Å—Ç–æ–ª–∏–∫.\n\n"
                "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
                reply_markup=keyboards.get_cancel_booking_keyboard()
            )

    @bot.callback_query_handler(func=lambda call: call.data in ["confirm_booking", "cancel_booking"])
    def handle_booking_confirmation_callback(call: types.CallbackQuery):
        user_id = call.from_user.id
        bot.answer_callback_query(call.id)
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except ApiTelegramException:
            pass

        user_entry = db.get(User.user_id == user_id)
        if not user_entry:
            return

        if call.data == "confirm_booking":
            booking_data = user_entry.get('data', {})
            is_admin_booking = booking_data.get('is_admin_booking', False)
            
            # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω—Å–∫–∞—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∫–∞, —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É —Å–æ—Ü—Å–µ—Ç–µ–π
            if is_admin_booking:
                try:
                    export_success = export_social_booking_to_sheets(booking_data, user_id)
                    if export_success:
                        logging.info(f"–ê–¥–º–∏–Ω—Å–∫–∞—è –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ Google Sheets. –ê–¥–º–∏–Ω: {user_id}")
                    else:
                        logging.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∞–¥–º–∏–Ω—Å–∫–æ–π –∑–∞—è–≤–∫–∏ –≤ Google Sheets. –ê–¥–º–∏–Ω: {user_id}")
                except Exception as e:
                    logging.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∞–¥–º–∏–Ω—Å–∫–æ–π –∑–∞—è–≤–∫–∏: {e}")
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ –≥–æ—Å—Ç–µ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É –±–µ–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                try:
                    export_success = export_guest_booking_to_sheets(booking_data, user_id)
                    if export_success:
                        logging.info(f"–ì–æ—Å—Ç–µ–≤–∞—è –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ Google Sheets. –ì–æ—Å—Ç—å: {booking_data.get('name', '')}")
                    else:
                        logging.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≥–æ—Å—Ç–µ–≤–æ–π –∑–∞—è–≤–∫–∏ –≤ Google Sheets. –ì–æ—Å—Ç—å: {booking_data.get('name', '')}")
                except Exception as e:
                    logging.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≥–æ—Å—Ç–µ–≤–æ–π –∑–∞—è–≤–∫–∏: {e}")
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –±—Ä–æ–Ω–∏
            report_text = texts.get_booking_report_text(booking_data, user_id)

            promo = settings_manager.get_setting("promotions.group_bonus")
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π –≤ —á–∏—Å–ª–æ
                num_guests = int(booking_data.get('guests', '0').strip())
                if promo and promo.get('is_active') and num_guests >= promo.get('min_guests', 4):
                    bonus_text_for_report = promo.get('bonus_text', '–≥—Ä–∞—Ñ–∏–Ω')
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ–Ω—É—Å–µ
                    report_text += f"\n\nüö® <b>–í–ù–ò–ú–ê–ù–ò–ï:</b> –ì–æ—Å—Ç—å –∏–¥–µ—Ç —Å –±–æ–Ω—É—Å–æ–º '<b>{bonus_text_for_report}</b>'!"
                    bot.send_message(user_id, texts.get_group_bonus_text(bonus_text_for_report), parse_mode="Markdown")
            except (ValueError, TypeError) as e:
                # –≠—Ç–∞ –æ—à–∏–±–∫–∞ —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –≤–æ–∑–Ω–∏–∫–∞—Ç—å –≥–æ—Ä–∞–∑–¥–æ —Ä–µ–∂–µ, –Ω–æ –æ—Å—Ç–∞–≤–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–ª-–≤–æ –≥–æ—Å—Ç–µ–π –¥–ª—è –±–æ–Ω—É—Å–∞ (–æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏): {e}")
                pass

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π HTML-—Ä–∞–∑–º–µ—Ç–∫–∏
            try:
                bot.send_message(BOOKING_NOTIFICATIONS_CHAT_ID, report_text, parse_mode="HTML")
                logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {BOOKING_NOTIFICATIONS_CHAT_ID}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç {BOOKING_NOTIFICATIONS_CHAT_ID}: {e}")
                # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å—Ç–∞—Ä—ã–π —á–∞—Ç –µ—Å–ª–∏ –Ω–æ–≤—ã–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                try:
                    bot.send_message(REPORT_CHAT_ID, report_text, parse_mode="HTML")
                    logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —á–∞—Ç {REPORT_CHAT_ID}")
                except Exception as fallback_error:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —á–∞—Ç: {fallback_error}")
            bot.send_message(
                user_id,
                texts.BOOKING_CONFIRMATION_SUCCESS,
                reply_markup=keyboards.get_main_menu_keyboard(user_id)
            )
            db.remove(User.user_id == user_id)

        elif call.data == "cancel_booking":
            _start_booking_process(call.message.chat.id, user_id)

    # --- –£–õ–£–ß–®–ï–ù–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–°–ï–• –®–ê–ì–û–í –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø ---
    @bot.message_handler(func=lambda message: db.contains(User.user_id == message.from_user.id), content_types=['text'])
    def process_booking_step(message: types.Message):
        user_id = message.from_user.id
        user_entry = db.get(User.user_id == user_id)
        
        if not user_entry or not user_entry.get('step'):
            return

        step = user_entry.get('step')
        current_data = user_entry.get('data', {})
        is_admin_booking = current_data.get('is_admin_booking', False)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–æ–¥ –Ω–∞ —à–∞–≥–µ '–≥–æ—Å—Ç–∏'
        if step == 'guests':
            if not message.text.strip().isdigit():
                bot.send_message(message.chat.id, "–¢–æ–≤–∞—Ä–∏—â, —É–∫–∞–∂–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π —Ü–∏—Ñ—Ä–æ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: 4", 
                               reply_markup=keyboards.get_cancel_booking_keyboard())
                return

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É - –ø–∞—Ä—Å–∏–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º
        if step == 'date':
            parsed_date = parse_booking_date(message.text)
            current_data[step] = parsed_date
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—É—é –¥–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if parsed_date != message.text:
                bot.send_message(message.chat.id, f"–ü–æ–Ω—è–ª, –¥–∞—Ç–∞: {parsed_date}")
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è - –ø–∞—Ä—Å–∏–º –≤ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú  
        elif step == 'time':
            parsed_time = parse_booking_time(message.text)
            current_data[step] = parsed_time
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if parsed_time != message.text:
                bot.send_message(message.chat.id, f"–ü–æ–Ω—è–ª, –≤—Ä–µ–º—è: {parsed_time}")
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –µ—Å—Ç—å
            current_data[step] = message.text

        # –°–ª–æ–≤–∞—Ä—å-–º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –ø–æ —à–∞–≥–∞–º –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        user_prompts = {
            'name': {'next_step': 'phone', 'prompt': texts.BOOKING_ASK_PHONE, 'keyboard': keyboards.get_cancel_booking_keyboard()},
            'phone': {'next_step': 'date', 'prompt': texts.BOOKING_ASK_DATE, 'keyboard': keyboards.get_cancel_booking_keyboard()},
            'date': {'next_step': 'time', 'prompt': texts.BOOKING_ASK_TIME, 'keyboard': keyboards.get_cancel_booking_keyboard()},
            'time': {'next_step': 'guests', 'prompt': texts.BOOKING_ASK_GUESTS, 'keyboard': keyboards.get_cancel_booking_keyboard()},
            'guests': {'next_step': 'reason', 'prompt': texts.BOOKING_ASK_REASON, 'keyboard': keyboards.get_cancel_booking_keyboard()},
        }

        # –°–ª–æ–≤–∞—Ä—å-–º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        admin_prompts = {
            'admin_name': {'next_step': 'phone', 'prompt': texts.ADMIN_BOOKING_PHONE, 'keyboard': keyboards.get_cancel_booking_keyboard()},
            'phone': {'next_step': 'date', 'prompt': texts.ADMIN_BOOKING_DATE, 'keyboard': keyboards.get_cancel_booking_keyboard()},
            'date': {'next_step': 'time', 'prompt': texts.ADMIN_BOOKING_TIME, 'keyboard': keyboards.get_cancel_booking_keyboard()},
            'time': {'next_step': 'guests', 'prompt': texts.ADMIN_BOOKING_GUESTS, 'keyboard': keyboards.get_cancel_booking_keyboard()},
            'guests': {'next_step': 'source', 'prompt': texts.ADMIN_BOOKING_SOURCE, 'keyboard': keyboards.get_traffic_source_keyboard()},
        }

        # –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä
        prompts = admin_prompts if is_admin_booking else user_prompts

        if step in prompts:
            # –î–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º admin_name –≤ name –≤ –¥–∞–Ω–Ω—ã—Ö
            if step == 'admin_name':
                current_data['name'] = current_data.pop('admin_name')
                
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥, –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π
            next_step_info = prompts[step]
            db.update({'step': next_step_info['next_step'], 'data': current_data}, User.user_id == user_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –µ—Å–ª–∏ –µ—Å—Ç—å
            if 'keyboard' in next_step_info:
                bot.send_message(message.chat.id, next_step_info['prompt'], reply_markup=next_step_info['keyboard'])
            else:
                bot.send_message(message.chat.id, next_step_info['prompt'])
                
        elif step == 'reason':
            # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            db.update({'step': 'confirmation', 'data': current_data}, User.user_id == user_id)
            confirmation_text = texts.get_booking_confirmation_text(current_data)
            bot.send_message(
                message.chat.id,
                confirmation_text,
                reply_markup=keyboards.get_booking_confirmation_keyboard()
            )

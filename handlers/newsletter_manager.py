# handlers/newsletter_manager.py
"""
–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏ –¥–ª—è –±–æ—Ç–∞ –ï–≤–≥–µ–Ω–∏—á.
–í–∫–ª—é—á–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–∫—É, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫—É —Ä–∞—Å—Å—ã–ª–æ–∫.
"""
import logging
import datetime
import pytz
from typing import Optional, Dict, Any
from telebot import types
import database
import keyboards
import texts
from config import ADMIN_IDS

class NewsletterManager:
    def __init__(self, bot, scheduler):
        self.bot = bot
        self.scheduler = scheduler
        self.creation_states = {}  # –°–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫
        
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—Å—ã–ª–æ–∫."""
        
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('admin_content_'))
        def handle_content_callbacks(call):
            if call.from_user.id not in ADMIN_IDS:
                self.bot.answer_callback_query(call.id, "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
                return
                
            action = call.data
            self.bot.answer_callback_query(call.id)
            
            if action == 'admin_content_stats':
                self._show_audience_stats(call.message)
            elif action == 'admin_content_create':
                self._start_newsletter_creation(call.message)
            elif action == 'admin_content_list':
                self._show_newsletters_list(call.message)
            elif action == 'admin_content_analytics':
                self._show_analytics_overview(call.message)
                
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('admin_newsletter_'))
        def handle_newsletter_callbacks(call):
            if call.from_user.id not in ADMIN_IDS:
                self.bot.answer_callback_query(call.id, "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
                return
                
            action = call.data
            self.bot.answer_callback_query(call.id)
            
            if action.startswith('admin_newsletter_type_'):
                media_type = action.split('_')[-1]
                self._handle_newsletter_type_selection(call.message, media_type)
            elif action.startswith('admin_newsletter_test_'):
                newsletter_id = int(action.split('_')[-1])
                self._send_test_newsletter(call.message, newsletter_id)
            elif action.startswith('admin_newsletter_send_'):
                newsletter_id = int(action.split('_')[-1])
                self._send_newsletter_immediately(call.message, newsletter_id)
            elif action.startswith('admin_newsletter_schedule_'):
                newsletter_id = int(action.split('_')[-1])
                self._start_newsletter_scheduling(call.message, newsletter_id)
            elif action.startswith('admin_newsletter_view_'):
                newsletter_id = int(action.split('_')[-1])
                self._show_newsletter_details(call.message, newsletter_id)
            elif action.startswith('admin_newsletter_stats_'):
                newsletter_id = int(action.split('_')[-1])
                self._show_newsletter_analytics(call.message, newsletter_id)
            elif action.startswith('admin_newsletter_ready_'):
                newsletter_id = int(action.split('_')[-1])
                self._show_newsletter_sending_menu(call.message, newsletter_id)
                
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('admin_button_'))
        def handle_button_callbacks(call):
            if call.from_user.id not in ADMIN_IDS:
                self.bot.answer_callback_query(call.id, "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
                return
                
            action = call.data
            self.bot.answer_callback_query(call.id)
            
            if action.startswith('admin_button_template_'):
                parts = action.split('_')
                newsletter_id = int(parts[3])
                template = parts[4]
                self._handle_button_template(call.message, newsletter_id, template)
        
        logging.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—Å—ã–ª–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    def _show_audience_stats(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫."""
        try:
            audience_count = database.get_newsletter_audience_count()
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            conn = database.get_db_connection()
            cur = conn.cursor()
            
            cur.execute("SELECT COUNT(*) FROM users WHERE status = 'registered'")
            registered_count = cur.fetchone()[0]
            
            cur.execute("SELECT COUNT(*) FROM users WHERE status IN ('issued', 'redeemed')")
            active_count = cur.fetchone()[0]
            
            cur.execute("SELECT COUNT(*) FROM users WHERE status = 'redeemed_and_left'")
            churned_count = cur.fetchone()[0]
            
            conn.close()
            
            stats_text = (
                f"{texts.CONTENT_STATS_TEXT}"
                f"**–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:** {audience_count}\n\n"
                f"**–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:**\n"
                f"‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã: {registered_count}\n"
                f"‚Ä¢ –ü–æ–ª—É—á–∏–ª–∏ –∫—É–ø–æ–Ω—ã: {active_count}\n"
                f"‚Ä¢ –û—Ç–ø–∏—Å–∞–ª–∏—Å—å: {churned_count}\n\n"
                f"üìß –†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ **{audience_count}** –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"
            )
            
            self.bot.edit_message_text(
                stats_text,
                message.chat.id,
                message.message_id,
                reply_markup=keyboards.get_content_management_menu(),
                parse_mode="Markdown"
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏: {e}")
            self.bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    def _start_newsletter_creation(self, message):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
        try:
            self.bot.edit_message_text(
                texts.NEWSLETTER_CREATION_START,
                message.chat.id,
                message.message_id,
                reply_markup=keyboards.get_newsletter_creation_menu(),
                parse_mode="Markdown"
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
    
    def _handle_newsletter_type_selection(self, message, media_type):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Ä–∞—Å—Å—ã–ª–∫–∏."""
        user_id = message.chat.id
        self.creation_states[user_id] = {
            'step': 'title',
            'media_type': media_type,
            'created_at': datetime.datetime.now()
        }
        
        self.bot.send_message(
            user_id,
            texts.NEWSLETTER_TITLE_REQUEST,
            parse_mode="Markdown"
        )
        self.bot.register_next_step_handler(message, self._handle_title_input)
    
    def _handle_title_input(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏."""
        user_id = message.chat.id
        if user_id not in self.creation_states:
            self.bot.send_message(user_id, "–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return
            
        title = message.text.strip()
        if not title or len(title) > 100:
            self.bot.send_message(
                user_id, 
                "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            self.bot.register_next_step_handler(message, self._handle_title_input)
            return
        
        self.creation_states[user_id]['title'] = title
        self.creation_states[user_id]['step'] = 'content'
        
        self.bot.send_message(
            user_id,
            texts.NEWSLETTER_CONTENT_REQUEST,
            parse_mode="Markdown"
        )
        self.bot.register_next_step_handler(message, self._handle_content_input)
    
    def _handle_content_input(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
        user_id = message.chat.id
        if user_id not in self.creation_states:
            self.bot.send_message(user_id, "–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return
        
        content = message.text.strip()
        if not content or len(content) > 4000:
            self.bot.send_message(
                user_id,
                "–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            self.bot.register_next_step_handler(message, self._handle_content_input)
            return
            
        self.creation_states[user_id]['content'] = content
        
        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –º–µ–¥–∏–∞ - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º, –∏–Ω–∞—á–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–Ω–æ–ø–∫–∞–º
        if self.creation_states[user_id]['media_type'] != 'text':
            self.creation_states[user_id]['step'] = 'media'
            self.bot.send_message(
                user_id,
                texts.NEWSLETTER_MEDIA_REQUEST,
                parse_mode="Markdown"
            )
            self.bot.register_next_step_handler(message, self._handle_media_input)
        else:
            self._proceed_to_buttons_step(user_id)
    
    def _handle_media_input(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –º–µ–¥–∏–∞-—Ñ–∞–π–ª–∞."""
        user_id = message.chat.id
        if user_id not in self.creation_states:
            self.bot.send_message(user_id, "–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return
        
        media_type = self.creation_states[user_id]['media_type']
        file_id = None
        
        if media_type == 'photo' and message.photo:
            file_id = message.photo[-1].file_id
        elif media_type == 'video' and message.video:
            file_id = message.video.file_id
        else:
            expected = "–∫–∞—Ä—Ç–∏–Ω–∫—É" if media_type == 'photo' else "–≤–∏–¥–µ–æ"
            self.bot.send_message(
                user_id,
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {expected}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            self.bot.register_next_step_handler(message, self._handle_media_input)
            return
        
        self.creation_states[user_id]['media_file_id'] = file_id
        self._proceed_to_buttons_step(user_id)
    
    def _proceed_to_buttons_step(self, user_id):
        """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —ç—Ç–∞–ø—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫."""
        self.creation_states[user_id]['step'] = 'buttons'
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤ –ë–î
        state = self.creation_states[user_id]
        newsletter_id = database.create_newsletter(
            title=state['title'],
            content=state['content'],
            created_by=user_id,
            media_type=state.get('media_type') if state['media_type'] != 'text' else None,
            media_file_id=state.get('media_file_id')
        )
        
        if newsletter_id:
            self.creation_states[user_id]['newsletter_id'] = newsletter_id
            
            self.bot.send_message(
                user_id,
                texts.NEWSLETTER_BUTTONS_PROMPT,
                reply_markup=keyboards.get_newsletter_buttons_menu(newsletter_id),
                parse_mode="Markdown"
            )
        else:
            self.bot.send_message(user_id, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            del self.creation_states[user_id]
    
    def _show_newsletter_sending_menu(self, message, newsletter_id):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ—Ç–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏."""
        newsletter = database.get_newsletter_by_id(newsletter_id)
        if not newsletter:
            self.bot.send_message(message.chat.id, "–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        buttons = database.get_newsletter_buttons(newsletter_id)
        audience_count = database.get_newsletter_audience_count()
        
        content_preview = newsletter['content'][:100] + "..." if len(newsletter['content']) > 100 else newsletter['content']
        media_status = "–ï—Å—Ç—å" if newsletter['media_file_id'] else "–ù–µ—Ç"
        
        ready_text = texts.NEWSLETTER_READY_TEXT.format(
            title=newsletter['title'],
            content_preview=content_preview,
            media_status=media_status,
            buttons_count=len(buttons),
            audience_count=audience_count
        )
        
        self.bot.edit_message_text(
            ready_text,
            message.chat.id,
            message.message_id,
            reply_markup=keyboards.get_newsletter_sending_menu(newsletter_id),
            parse_mode="Markdown"
        )
    
    def _send_test_newsletter(self, message, newsletter_id):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É –∞–¥–º–∏–Ω—É."""
        newsletter = database.get_newsletter_by_id(newsletter_id)
        if not newsletter:
            self.bot.send_message(message.chat.id, "–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        success = self._send_newsletter_to_user(message.chat.id, newsletter_id)
        if success:
            self.bot.send_message(
                message.chat.id,
                texts.NEWSLETTER_TEST_SENT,
                parse_mode="Markdown"
            )
        else:
            self.bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
    
    def _send_newsletter_immediately(self, message, newsletter_id):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏."""
        self.bot.send_message(
            message.chat.id,
            texts.NEWSLETTER_SENDING_START,
            parse_mode="Markdown"
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ —Ñ–æ–Ω–µ
        self.scheduler.add_job(
            func=lambda: self._execute_newsletter_sending(newsletter_id, message.chat.id),
            trigger='date',
            run_date=datetime.datetime.now() + datetime.timedelta(seconds=2),
            id=f'newsletter_send_{newsletter_id}',
            replace_existing=True
        )
    
    def _execute_newsletter_sending(self, newsletter_id, admin_chat_id):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∞—Å—Å–æ–≤—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏."""
        try:
            user_ids = database.get_active_users_for_newsletter()
            delivered_count = 0
            failed_count = 0
            
            for user_id in user_ids:
                try:
                    if self._send_newsletter_to_user(user_id, newsletter_id):
                        delivered_count += 1
                        database.track_newsletter_delivery(newsletter_id, user_id)
                    else:
                        failed_count += 1
                    
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ Telegram
                    import time
                    time.sleep(0.1)
                    
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ {newsletter_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    failed_count += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏
            database.mark_newsletter_sent(newsletter_id, len(user_ids), delivered_count)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
            result_text = texts.NEWSLETTER_SENDING_COMPLETE.format(
                target=len(user_ids),
                delivered=delivered_count,
                failed=failed_count
            )
            
            self.bot.send_message(admin_chat_id, result_text, parse_mode="Markdown")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ {newsletter_id}: {e}")
            self.bot.send_message(admin_chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏")
    
    def _send_newsletter_to_user(self, user_id: int, newsletter_id: int) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        try:
            newsletter = database.get_newsletter_by_id(newsletter_id)
            if not newsletter:
                return False
            
            buttons = database.get_newsletter_buttons(newsletter_id)
            keyboard = keyboards.create_newsletter_inline_keyboard(buttons) if buttons else None
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–µ–¥–∏–∞
            if newsletter['media_type'] == 'photo':
                self.bot.send_photo(
                    user_id,
                    newsletter['media_file_id'],
                    caption=newsletter['content'],
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
            elif newsletter['media_type'] == 'video':
                self.bot.send_video(
                    user_id,
                    newsletter['media_file_id'],
                    caption=newsletter['content'],
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
            else:
                self.bot.send_message(
                    user_id,
                    newsletter['content'],
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
            
            return True
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ {newsletter_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            return False
    
    def _show_newsletters_list(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        newsletters = database.get_user_newsletters(message.chat.id, 10)
        
        if not newsletters:
            self.bot.edit_message_text(
                texts.NO_NEWSLETTERS_TEXT,
                message.chat.id,
                message.message_id,
                reply_markup=keyboards.get_content_management_menu(),
                parse_mode="Markdown"
            )
            return
        
        list_text = "üìã **–í–∞—à–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:**\n\n"
        for newsletter in newsletters[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
            status_text = {
                'draft': '–ß–µ—Ä–Ω–æ–≤–∏–∫',
                'scheduled': '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞',
                'sent': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞',
                'sending': '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è'
            }.get(newsletter['status'], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            list_text += f"‚Ä¢ **{newsletter['title']}** ({status_text})\n"
        
        self.bot.edit_message_text(
            list_text,
            message.chat.id,
            message.message_id,
            reply_markup=keyboards.get_newsletter_list_keyboard(newsletters),
            parse_mode="Markdown"
        )
    
    def _show_newsletter_analytics(self, message, newsletter_id):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏."""
        newsletter = database.get_newsletter_by_id(newsletter_id)
        if not newsletter:
            self.bot.send_message(message.chat.id, "–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        analytics = database.get_newsletter_analytics(newsletter_id)
        
        analytics_text = texts.NEWSLETTER_ANALYTICS_HEADER.format(
            title=newsletter['title'],
            target_count=analytics['target_count'],
            delivered_count=analytics['delivered_count'],
            total_clicks=analytics['total_clicks']
        )
        
        if analytics['button_stats']:
            for button_stat in analytics['button_stats']:
                analytics_text += f"‚Ä¢ {button_stat['text']}: {button_stat['clicks']} –∫–ª–∏–∫–æ–≤\n"
        else:
            analytics_text += "‚Ä¢ –ö–Ω–æ–ø–æ–∫ –Ω–µ—Ç\n"
        
        if analytics['delivered_count'] > 0:
            ctr = round(analytics['total_clicks'] / analytics['delivered_count'] * 100, 1)
            analytics_text += f"\n**CTR (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å):** {ctr}%"
        
        self.bot.edit_message_text(
            analytics_text,
            message.chat.id,
            message.message_id,
            reply_markup=keyboards.get_newsletter_view_keyboard(newsletter_id, newsletter['status']),
            parse_mode="Markdown"
        )
    
    def _show_analytics_overview(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –≤—Å–µ—Ö —Ä–∞—Å—Å—ã–ª–æ–∫."""
        newsletters = database.get_user_newsletters(message.chat.id, 20)
        
        if not newsletters:
            self.bot.edit_message_text(
                "üìà **–û–±—â–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞**\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Å—ã–ª–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.",
                message.chat.id,
                message.message_id,
                reply_markup=keyboards.get_content_management_menu(),
                parse_mode="Markdown"
            )
            return
        
        total_sent = sum(n['target_count'] or 0 for n in newsletters if n['status'] == 'sent')
        total_delivered = sum(n['delivered_count'] or 0 for n in newsletters if n['status'] == 'sent')
        
        overview_text = (
            f"üìà **–û–±—â–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫**\n\n"
            f"**–í—Å–µ–≥–æ —Ä–∞—Å—Å—ã–ª–æ–∫:** {len(newsletters)}\n"
            f"**–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:** {total_sent}\n"
            f"**–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ:** {total_delivered}\n\n"
            f"**–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏:**\n"
        )
        
        for newsletter in newsletters[:5]:
            status_emoji = {'draft': 'üìù', 'scheduled': '‚è∞', 'sent': '‚úÖ'}.get(newsletter['status'], '‚ùì')
            overview_text += f"{status_emoji} {newsletter['title'][:30]}...\n"
        
        self.bot.edit_message_text(
            overview_text,
            message.chat.id,
            message.message_id,
            reply_markup=keyboards.get_content_management_menu(),
            parse_mode="Markdown"
        )

def register_newsletter_handlers(bot, scheduler):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—Å—ã–ª–æ–∫."""
    manager = NewsletterManager(bot, scheduler)
    manager.register_handlers()
    logging.info("–°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—Å—ã–ª–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

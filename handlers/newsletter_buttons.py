# handlers/newsletter_buttons.py
"""
–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫.
–ü–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —É–¥–∞–ª—è—Ç—å –∫–Ω–æ–ø–∫–∏ —Å UTM-—Ç—Ä–µ–∫–∏–Ω–≥–æ–º.
"""
import logging
from typing import Dict, Any
import database
import keyboards
import texts
from config import ADMIN_IDS

class NewsletterButtonsManager:
    def __init__(self, bot):
        self.bot = bot
        self.button_states = {}  # –°–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
        
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('admin_button_'))
        def handle_button_callbacks(call):
            if call.from_user.id not in ADMIN_IDS:
                self.bot.answer_callback_query(call.id, "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
                return
                
            action = call.data
            self.bot.answer_callback_query(call.id)
            
            parts = action.split('_')
            if len(parts) < 4:
                return
                
            if action.startswith('admin_button_template_'):
                newsletter_id = int(parts[3])
                template = parts[4] if len(parts) > 4 else None
                self._handle_button_template(call.message, newsletter_id, template)
            elif action.startswith('admin_button_add_'):
                newsletter_id = int(parts[3])
                self._start_button_creation(call.message, newsletter_id)
            elif action.startswith('admin_button_finish_'):
                newsletter_id = int(parts[3])
                self._finish_button_setup(call.message, newsletter_id)
            elif action.startswith('admin_button_skip_'):
                newsletter_id = int(parts[3])
                self._skip_buttons(call.message, newsletter_id)
                
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('newsletter_click_'))
        def handle_newsletter_button_clicks(call):
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∏–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º –≤ —Ä–∞—Å—Å—ã–ª–∫–∞—Ö."""
            try:
                parts = call.data.split('_')
                if len(parts) >= 4:
                    newsletter_id = int(parts[2])
                    button_id = int(parts[3])
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–ª–∏–∫ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
                    database.track_newsletter_click(newsletter_id, button_id, call.from_user.id)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–æ–ø–∫–µ
                    button = database.get_newsletter_button_by_id(button_id)
                    if button and button['url']:
                        self.bot.answer_callback_query(
                            call.id,
                            "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –ø–æ —Å—Å—ã–ª–∫–µ...",
                            url=button['url']
                        )
                    else:
                        self.bot.answer_callback_query(call.id, "–°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                        
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
                self.bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞")
    
    def _handle_button_template(self, message, newsletter_id, template):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞ –∫–Ω–æ–ø–æ–∫."""
        if template == 'website':
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞—à —Å–∞–π—Ç"
            button_id = database.add_newsletter_button(
                newsletter_id=newsletter_id,
                text="üåê –ù–∞—à —Å–∞–π—Ç",
                url="https://evgenich.ru?utm_source=telegram&utm_medium=newsletter&utm_campaign=website_button",
                utm_source="telegram",
                utm_medium="newsletter",
                utm_campaign="website_button"
            )
            
            if button_id:
                self._update_buttons_display(message, newsletter_id, "–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ '–ù–∞—à —Å–∞–π—Ç'")
            else:
                self.bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏")
                
        elif template == 'booking':
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª"
            button_id = database.add_newsletter_button(
                newsletter_id=newsletter_id,
                text="üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª",
                url="https://evgenich.ru/booking?utm_source=telegram&utm_medium=newsletter&utm_campaign=booking_button",
                utm_source="telegram",
                utm_medium="newsletter",
                utm_campaign="booking_button"
            )
            
            if button_id:
                self._update_buttons_display(message, newsletter_id, "–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª'")
            else:
                self.bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏")
                
        elif template == 'menu':
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é"
            button_id = database.add_newsletter_button(
                newsletter_id=newsletter_id,
                text="üçΩ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é",
                url="https://evgenich.ru/menu?utm_source=telegram&utm_medium=newsletter&utm_campaign=menu_button",
                utm_source="telegram",
                utm_medium="newsletter",
                utm_campaign="menu_button"
            )
            
            if button_id:
                self._update_buttons_display(message, newsletter_id, "–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é'")
            else:
                self.bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏")
                
        elif template == 'promotion':
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏"
            button_id = database.add_newsletter_button(
                newsletter_id=newsletter_id,
                text="üéÅ –£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏",
                url="https://evgenich.ru/promo?utm_source=telegram&utm_medium=newsletter&utm_campaign=promo_button",
                utm_source="telegram",
                utm_medium="newsletter",
                utm_campaign="promo_button"
            )
            
            if button_id:
                self._update_buttons_display(message, newsletter_id, "–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ '–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏'")
            else:
                self.bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏")
                
        elif template == 'contact':
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏"
            button_id = database.add_newsletter_button(
                newsletter_id=newsletter_id,
                text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏",
                url="https://evgenich.ru/contact?utm_source=telegram&utm_medium=newsletter&utm_campaign=contact_button",
                utm_source="telegram",
                utm_medium="newsletter",
                utm_campaign="contact_button"
            )
            
            if button_id:
                self._update_buttons_display(message, newsletter_id, "–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ '–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏'")
            else:
                self.bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏")
    
    def _start_button_creation(self, message, newsletter_id):
        """–ù–∞—á–∏–Ω–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–Ω–æ–ø–∫–∏."""
        user_id = message.chat.id
        self.button_states[user_id] = {
            'newsletter_id': newsletter_id,
            'step': 'text'
        }
        
        self.bot.send_message(
            user_id,
            texts.BUTTON_TEXT_REQUEST,
            parse_mode="Markdown"
        )
        self.bot.register_next_step_handler(message, self._handle_button_text_input)
    
    def _handle_button_text_input(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏."""
        user_id = message.chat.id
        if user_id not in self.button_states:
            self.bot.send_message(user_id, "–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –∏—Å—Ç–µ–∫–ª–∞")
            return
        
        text = message.text.strip()
        if not text or len(text) > 30:
            self.bot.send_message(
                user_id,
                "–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            self.bot.register_next_step_handler(message, self._handle_button_text_input)
            return
        
        self.button_states[user_id]['text'] = text
        self.button_states[user_id]['step'] = 'url'
        
        self.bot.send_message(
            user_id,
            texts.BUTTON_URL_REQUEST,
            parse_mode="Markdown"
        )
        self.bot.register_next_step_handler(message, self._handle_button_url_input)
    
    def _handle_button_url_input(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ URL –∫–Ω–æ–ø–∫–∏."""
        user_id = message.chat.id
        if user_id not in self.button_states:
            self.bot.send_message(user_id, "–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –∏—Å—Ç–µ–∫–ª–∞")
            return
        
        url = message.text.strip()
        if not url.startswith(('http://', 'https://')):
            self.bot.send_message(
                user_id,
                "URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            self.bot.register_next_step_handler(message, self._handle_button_url_input)
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º UTM-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if 'utm_source' not in url:
            separator = '&' if '?' in url else '?'
            url += f"{separator}utm_source=telegram&utm_medium=newsletter&utm_campaign=custom_button"
        
        state = self.button_states[user_id]
        newsletter_id = state['newsletter_id']
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É
        button_id = database.add_newsletter_button(
            newsletter_id=newsletter_id,
            text=state['text'],
            url=url,
            utm_source="telegram",
            utm_medium="newsletter",
            utm_campaign="custom_button"
        )
        
        if button_id:
            del self.button_states[user_id]
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
            buttons = database.get_newsletter_buttons(newsletter_id)
            buttons_text = texts.BUTTON_MANAGEMENT_TEXT.format(
                current_count=len(buttons)
            )
            
            # –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
            for i, button in enumerate(buttons, 1):
                buttons_text += f"{i}. {button['text']}\n"
            
            self.bot.send_message(
                user_id,
                buttons_text,
                reply_markup=keyboards.get_newsletter_buttons_menu(newsletter_id),
                parse_mode="Markdown"
            )
        else:
            self.bot.send_message(user_id, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            del self.button_states[user_id]
    
    def _update_buttons_display(self, message, newsletter_id, success_message=None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫."""
        buttons = database.get_newsletter_buttons(newsletter_id)
        
        buttons_text = texts.BUTTON_MANAGEMENT_TEXT.format(
            current_count=len(buttons)
        )
        
        if success_message:
            buttons_text = f"‚úÖ {success_message}\n\n" + buttons_text
        
        # –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
        for i, button in enumerate(buttons, 1):
            buttons_text += f"{i}. {button['text']}\n"
        
        self.bot.edit_message_text(
            buttons_text,
            message.chat.id,
            message.message_id,
            reply_markup=keyboards.get_newsletter_buttons_menu(newsletter_id),
            parse_mode="Markdown"
        )
    
    def _finish_button_setup(self, message, newsletter_id):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∫–Ω–æ–ø–æ–∫ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É –º–µ–Ω—é."""
        from handlers.newsletter_manager import NewsletterManager
        manager = NewsletterManager(self.bot, None)
        manager._show_newsletter_sending_menu(message, newsletter_id)
    
    def _skip_buttons(self, message, newsletter_id):
        """–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫."""
        self._finish_button_setup(message, newsletter_id)

def register_newsletter_buttons_handlers(bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ä–∞—Å—Å—ã–ª–æ–∫."""
    manager = NewsletterButtonsManager(bot)
    manager.register_handlers()
    logging.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —Ä–∞—Å—Å—ã–ª–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

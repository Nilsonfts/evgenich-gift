# /handlers/ai_logic.py

import logging
from telebot import types
from tinydb import TinyDB, Query

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º "–º–æ–∑–≥"
from ai_assistant import get_ai_recommendation
from menu_nastoiki import MENU_DATA
from food_menu import FOOD_MENU_DATA

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, —Ç–µ–∫—Å—Ç—ã –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from g_sheets import log_conversation_turn, get_conversation_history, get_daily_updates
import texts
import keyboards

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Ç–æ–π –∂–µ –ë–î, —á—Ç–æ –∏ –≤ booking_flow, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä—è—Ç—å, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ —é–∑–µ—Ä
db = TinyDB('booking_data.json')
User = Query()

def register_ai_handlers(bot):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏ –¥—Ä—É–≥–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫.
    """

    @bot.message_handler(func=lambda message: message.text == "üó£ –°–ø—Ä–æ—Å–∏ —É –ï–≤–≥–µ–Ω–∏—á–∞")
    def handle_ai_prompt_button(message: types.Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É-–ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è –ò–ò."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        if db.contains(User.user_id == message.from_user.id):
            bot.reply_to(message, texts.BOOKING_IN_PROGRESS_TEXT)
            return
        bot.reply_to(message, texts.AI_PROMPT_HINT)

    @bot.message_handler(content_types=['text'])
    def handle_text_query(message: types.Message):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª—é–±–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –±—ã–ª –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω
        –¥—Ä—É–≥–∏–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ (–∫–æ–º–∞–Ω–¥–∞–º–∏, —à–∞–≥–∞–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è).
        """
        user_id = message.from_user.id
        user_text = message.text

        # –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞ –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è —Ä–∞–Ω—å—à–µ –∏ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ.

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        known_buttons = [
            'üìñ –ú–µ–Ω—é', 'ü§ù –ü—Ä–∏–≤–µ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∏—â–∞', 'üó£ –°–ø—Ä–æ—Å–∏ —É –ï–≤–≥–µ–Ω–∏—á–∞',
            'ü•É –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç–æ–π–∫—É –ø–æ —Ç–∞–ª–æ–Ω—É', 'üìç –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª'
        ]
        if user_text.startswith('/') or user_text in known_buttons:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥—Ä—É–≥–∏–º–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏
            return

        # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏–∫—É AI
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å AI: '{user_text}'")

        log_conversation_turn(user_id, "user", user_text)

        history = get_conversation_history(user_id, limit=6)
        daily_updates = get_daily_updates()

        bot.send_chat_action(message.chat.id, 'typing')

        ai_response = get_ai_recommendation(
            user_query=user_text,
            conversation_history=history,
            menu_data=MENU_DATA,
            food_menu_data=FOOD_MENU_DATA,
            daily_updates=daily_updates
        )

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
        if "[START_BOOKING_FLOW]" in ai_response:
            logging.info(f"AI –æ–ø—Ä–µ–¥–µ–ª–∏–ª –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
            log_conversation_turn(user_id, "assistant", "–ü—Ä–µ–¥–ª–æ–∂–∏–ª –≤–∞—Ä–∏–∞–Ω—Ç—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
            bot.send_message(
                message.chat.id,
                texts.BOOKING_PROMPT_TEXT,
                reply_markup=keyboards.get_booking_options_keyboard()
            )
        else:
            log_conversation_turn(user_id, "assistant", ai_response)
            bot.reply_to(message, ai_response, parse_mode="Markdown")

            # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç-–∑–∞–≥–ª—É—à–∫–∞ ---
            if "–ø–ª—ë–Ω–∫—É –∑–∞–∂–µ–≤–∞–ª–æ" not in ai_response:
                try:
                    feedback_message = bot.send_message(
                        message.chat.id,
                        texts.AI_FEEDBACK_PROMPT,
                        reply_markup=keyboards.get_ai_feedback_keyboard()
                    )

                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                    if not hasattr(bot, 'feedback_data'):
                        bot.feedback_data = {}

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ, –Ω—É–∂–Ω—ã–µ –¥–ª—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                    bot.feedback_data[feedback_message.message_id] = {
                        'user_id': user_id,
                        'query': user_text,
                        'response': ai_response
                    }
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ AI: {e}")

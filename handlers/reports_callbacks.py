# /handlers/reports_callbacks.py
"""
Callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.
"""
import datetime
import pytz
import database
from handlers.reports import send_report

def handle_report_callbacks(bot, admin_states, settings_manager, keyboards, texts):
    @bot.callback_query_handler(func=lambda call: call.data.startswith('admin_report_'))
    def report_callback(call):
        action = call.data
        tz_moscow = pytz.timezone('Europe/Moscow')
        end_time = datetime.datetime.now(tz_moscow)
        if action == 'admin_report_manual_daily':
            start_time = end_time - datetime.timedelta(days=1)
            send_report(bot, call.message.chat.id, start_time, end_time)
        elif action == 'admin_report_source_funnel':
            start_time = end_time - datetime.timedelta(days=30)
            _, _, _, sources, _ = database.get_report_data_for_period(start_time, end_time)
            if not sources:
                bot.send_message(call.message.chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –∑–∞ –º–µ—Å—è—Ü.")
            else:
                text = f"üî¨ –í–æ—Ä–æ–Ω–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º (30 –¥–Ω–µ–π):\n"
                total = sum(sources.values())
                for src, count in sorted(sources.items(), key=lambda x: x[1], reverse=True):
                    percent = round(count / total * 100, 1) if total else 0
                    text += f"‚Ä¢ {src or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}: {count} ({percent}%)\n"
                bot.send_message(call.message.chat.id, text)
        elif action == 'admin_report_churn_by_source':
            start_time = end_time - datetime.timedelta(days=30)
            try:
                conn = database.get_db_connection()
                cur = conn.cursor()
                cur.execute("SELECT source, COUNT(*) as cnt FROM users WHERE redeem_date BETWEEN ? AND ? AND status = 'redeemed_and_left' GROUP BY source", (start_time, end_time))
                rows = cur.fetchall()
                conn.close()
                if not rows:
                    bot.send_message(call.message.chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ—Ç—Ç–æ–∫—É –∑–∞ –º–µ—Å—è—Ü.")
                else:
                    total = sum(row['cnt'] for row in rows)
                    text = f"üìà –ê–Ω–∞–ª–∏–∑ –æ—Ç—Ç–æ–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º (30 –¥–Ω–µ–π):\n"
                    for row in rows:
                        percent = round(row['cnt'] / total * 100, 1) if total else 0
                        text += f"‚Ä¢ {row['source'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}: {row['cnt']} ({percent}%)\n"
                    bot.send_message(call.message.chat.id, text)
            except Exception as e:
                bot.send_message(call.message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")
        elif action == 'admin_report_activity_time':
            start_time = end_time - datetime.timedelta(days=30)
            try:
                conn = database.get_db_connection()
                cur = conn.cursor()
                cur.execute("SELECT strftime('%H', signup_date) as hour, COUNT(*) as cnt FROM users WHERE signup_date BETWEEN ? AND ? GROUP BY hour ORDER BY hour", (start_time, end_time))
                rows = cur.fetchall()
                conn.close()
                if not rows:
                    bot.send_message(call.message.chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≥–æ—Å—Ç–µ–π –∑–∞ –º–µ—Å—è—Ü.")
                else:
                    text = f"üïí –ü–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≥–æ—Å—Ç–µ–π (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, 30 –¥–Ω–µ–π):\n"
                    for row in rows:
                        text += f"‚Ä¢ {row['hour']}:00 ‚Äî {row['cnt']}\n"
                    bot.send_message(call.message.chat.id, text)
            except Exception as e:
                bot.send_message(call.message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")

#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å–±–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import sqlite3
import database
import texts

def test_database_functions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    database.init_database()
    
    test_user_id = 999999999  # –¢–µ—Å—Ç–æ–≤—ã–π ID
    test_phone = "+79991234567"
    test_name = "–ò–≤–∞–Ω –¢–µ—Å—Ç–æ–≤–∏—á"
    test_birth_date = "15.03.1990"
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if database.add_user(test_user_id, "TestUser", "test_user"):
            print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        if database.update_user_contact(test_user_id, test_phone):
            print("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏
        if database.update_user_name(test_user_id, test_name):
            print("‚úÖ –ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
        if database.update_user_birth_date(test_user_id, test_birth_date):
            print("‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = database.find_user_by_id(test_user_id)
        if user_data:
            print("üìä –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
            print(f"   üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone_number']}")
            print(f"   üë§ –ò–º—è: {user_data['real_name']}")
            print(f"   üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user_data['birth_date']}")
            print(f"   ‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω: {'–î–∞' if user_data['profile_completed'] else '–ù–µ—Ç'}")
        
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        conn = sqlite3.connect(database.DB_FILE)
        cur = conn.cursor()
        cur.execute("DELETE FROM users WHERE user_id = ?", (test_user_id,))
        conn.commit()
        conn.close()
        print("üóëÔ∏è –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

def test_texts():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤"""
    print("\nüìù –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤...")
    
    required_texts = [
        'NAME_REQUEST_TEXT',
        'NAME_RECEIVED_TEXT', 
        'BIRTH_DATE_REQUEST_TEXT',
        'BIRTH_DATE_ERROR_TEXT',
        'PROFILE_COMPLETED_TEXT'
    ]
    
    for text_name in required_texts:
        if hasattr(texts, text_name):
            text_value = getattr(texts, text_name)
            print(f"‚úÖ {text_name}: {text_value[:50]}...")
        else:
            print(f"‚ùå {text_name}: –ù–ï –ù–ê–ô–î–ï–ù")

def test_date_validation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞—Ç"""
    print("\nüìÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞—Ç...")
    
    import re
    import datetime
    
    test_dates = [
        ("15.03.1990", True),
        ("29.02.2020", True),  # –í–∏—Å–æ–∫–æ—Å–Ω—ã–π –≥–æ–¥
        ("29.02.2021", False), # –ù–µ –≤–∏—Å–æ–∫–æ—Å–Ω—ã–π –≥–æ–¥
        ("32.01.2000", False), # –ù–µ–≤–µ—Ä–Ω—ã–π –¥–µ–Ω—å
        ("15.13.2000", False), # –ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Å—è—Ü
        ("15/03/1990", False), # –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        ("15.3.1990", False),  # –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    ]
    
    for date_str, should_be_valid in test_dates:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
            if not re.match(r'^\d{2}\.\d{2}\.\d{4}$', date_str):
                is_valid = False
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
                day, month, year = map(int, date_str.split('.'))
                birth_date = datetime.date(year, month, day)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –±—É–¥—É—â–µ–º
                today = datetime.date.today()
                is_valid = birth_date <= today
            
            result = "‚úÖ" if is_valid == should_be_valid else "‚ùå"
            print(f"{result} {date_str}: {'–≤–∞–ª–∏–¥–Ω–∞—è' if is_valid else '–Ω–µ–≤–∞–ª–∏–¥–Ω–∞—è'}")
            
        except (ValueError, TypeError):
            is_valid = False
            result = "‚úÖ" if is_valid == should_be_valid else "‚ùå"
            print(f"{result} {date_str}: –Ω–µ–≤–∞–ª–∏–¥–Ω–∞—è (–∏—Å–∫–ª—é—á–µ–Ω–∏–µ)")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —Å–±–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π\n")
    
    test_database_functions()
    test_texts()
    test_date_validation()
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –æ—Ç—á–µ—Ç–æ–≤
"""

import sqlite3
from datetime import datetime
import logging

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = "data/evgenich_data.db"

def get_report_data_for_period_fixed(start_time: datetime, end_time: datetime) -> tuple:
    """–¢–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –¥–∞—Ç"""
    try:
        conn = sqlite3.connect(DB_PATH)
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫—É ISO —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è SQLite
        start_str = start_time.isoformat()
        end_str = end_time.isoformat()
        
        cur.execute("SELECT COUNT(*) FROM users WHERE signup_date BETWEEN ? AND ? AND status IN ('issued', 'redeemed', 'redeemed_and_left')", (start_str, end_str))
        issued_count = cur.fetchone()[0]
        cur.execute("SELECT COUNT(*) FROM users WHERE redeem_date BETWEEN ? AND ?", (start_str, end_str))
        redeemed_count = cur.fetchone()[0]
        cur.execute("SELECT source, COUNT(*) FROM users WHERE signup_date BETWEEN ? AND ? GROUP BY source", (start_str, end_str))
        all_sources = {row['source']: row['COUNT(*)'] for row in cur.fetchall()}
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏: –≤—Å–µ –æ–±—ã—á–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        sources = {k: v for k, v in all_sources.items() if k != "staff"}
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ—Ç–¥–µ–ª—å–Ω–æ
        staff_count = all_sources.get("staff", 0)
        if staff_count > 0:
            sources["staff"] = staff_count
        total_redeem_time_seconds = 0
        if redeemed_count > 0:
            cur.execute("SELECT SUM(strftime('%s', redeem_date) - strftime('%s', signup_date)) FROM users WHERE redeem_date BETWEEN ? AND ? AND status IN ('redeemed', 'redeemed_and_left')", (start_str, end_str))
            total_redeem_time_seconds_row = cur.fetchone()[0]
            total_redeem_time_seconds = total_redeem_time_seconds_row or 0
        conn.close()
        return issued_count, redeemed_count, [], sources, total_redeem_time_seconds
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞ –≤ SQLite: {e}")
        return 0, 0, [], {}, 0

def get_daily_churn_data_fixed(start_time: datetime, end_time: datetime) -> tuple:
    """–¢–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç—Ç–æ–∫–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –¥–∞—Ç"""
    try:
        conn = sqlite3.connect(DB_PATH)
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫—É ISO —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è SQLite
        start_str = start_time.isoformat()
        end_str = end_time.isoformat()
        
        cur.execute("SELECT COUNT(*) FROM users WHERE redeem_date BETWEEN ? AND ? AND status IN ('redeemed', 'redeemed_and_left')", (start_str, end_str))
        redeemed_total = cur.fetchone()[0]
        cur.execute(
            "SELECT COUNT(*) FROM users WHERE redeem_date BETWEEN ? AND ? AND status = 'redeemed_and_left'",
            (start_str, end_str)
        )
        left_count = cur.fetchone()[0]
        conn.close()
        return redeemed_total, left_count
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –¥–Ω–µ–≤–Ω–æ–º –æ—Ç—Ç–æ–∫–µ: {e}")
        return 0, 0

def test_report_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å—é —Å–∏—Å—Ç–µ–º—É –æ—Ç—á–µ—Ç–æ–≤"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –æ—Ç—á–µ—Ç–æ–≤")
    
    # –ü–µ—Ä–∏–æ–¥ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    start_time = datetime(2025, 8, 8, 12, 0)
    end_time = datetime(2025, 8, 8, 16, 44)
    
    print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_time.strftime('%d.%m %H:%M')} - {end_time.strftime('%d.%m %H:%M')}")
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    general_stats = get_report_data_for_period_fixed(start_time, end_time)
    issued, redeemed, _, sources, total_redeem_time = general_stats
    
    print("üìä –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  üé´ –í—ã–¥–∞–Ω–æ –ø–æ–¥–∞—Ä–∫–æ–≤: {issued}")
    print(f"  üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥–∞—Ä–∫–æ–≤: {redeemed}")
    print(f"  ‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {total_redeem_time} —Å–µ–∫.")
    
    if issued > 0:
        conversion_rate = round((redeemed / issued) * 100, 1)
        print(f"  üìà –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {conversion_rate}%")
    
    print()
    
    # –ò—Å—Ç–æ—á–Ω–∏–∫–∏
    if sources:
        print("üìä –ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞:")
        sorted_sources = sorted(sources.items(), key=lambda x: x[1], reverse=True)
        for source, count in sorted_sources:
            print(f"  ‚Ä¢ {source}: {count}")
    else:
        print("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º")
    
    print()
    
    # –û—Ç—Ç–æ–∫
    redeemed_total, left_count = get_daily_churn_data_fixed(start_time, end_time)
    print("üìâ –ê–Ω–∞–ª–∏–∑ –æ—Ç—Ç–æ–∫–∞:")
    print(f"  üë• –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–æ: {redeemed_total}")
    print(f"  üëã –ü–æ–∫–∏–Ω—É–ª–∏ –∑–∞–≤–µ–¥–µ–Ω–∏–µ: {left_count}")
    
    if redeemed_total > 0:
        retention_rate = round(((redeemed_total - left_count) / redeemed_total) * 100, 1)
        print(f"  üéØ –£–¥–µ—Ä–∂–∞–Ω–∏–µ: {retention_rate}%")
    
    print()
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Ç–µ–ø–µ—Ä—å —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –≤–µ—Ä–Ω–µ—Ç "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    if issued == 0:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –ù–ï —Ä–µ—à–µ–Ω–∞: –≤—Å–µ –µ—â–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        print("–ó–∞ –ø–µ—Ä–∏–æ–¥ —Å 08.08 12:00 –ø–æ 08.08 16:44 –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω—ã.")
    else:
        print("‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ –†–ï–®–ï–ù–ê: –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã!")
        print(f"–ó–∞ –ø–µ—Ä–∏–æ–¥ —Å 08.08 12:00 –ø–æ 08.08 16:44 –Ω–∞–π–¥–µ–Ω–æ {issued} –≤—ã–¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤")

if __name__ == "__main__":
    test_report_system()

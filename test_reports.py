#!/usr/bin/env python3
import database
import datetime
import pytz

print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É
database.init_db()

conn = database.get_db_connection()
cur = conn.cursor()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã users
cur.execute("PRAGMA table_info(users)")
columns = cur.fetchall()
print("–ö–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ users:")
for col in columns:
    print(f"  {col[1]} ({col[2]})")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
cur.execute("SELECT COUNT(*) FROM users")
total = cur.fetchone()[0]
print(f"\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}")

if total > 0:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
    cur.execute("SELECT status, COUNT(*) FROM users GROUP BY status")
    statuses = cur.fetchall()
    print("\n–°—Ç–∞—Ç—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    for row in statuses:
        print(f"  {row[0]}: {row[1]}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    cur.execute("SELECT source, COUNT(*) FROM users GROUP BY source")
    sources = cur.fetchall()
    print("\n–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    for row in sources:
        print(f"  {row[0] or 'Null'}: {row[1]}")

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
if total == 0:
    print("\nüìù –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    now = datetime.datetime.now(pytz.utc)
    test_data = [
        (200001, 'test1', '–¢–µ—Å—Ç–æ–≤—ã–π1', '–¢–µ–ª–µ–≥—Ä–∞–º', 'redeemed_and_left', now - datetime.timedelta(days=5)),
        (200002, 'test2', '–¢–µ—Å—Ç–æ–≤—ã–π2', 'QR-–∫–æ–¥', 'redeemed_and_left', now - datetime.timedelta(days=3)),
        (200003, 'test3', '–¢–µ—Å—Ç–æ–≤—ã–π3', '–†–µ—Ñ–µ—Ä–∞–ª', 'redeemed', now - datetime.timedelta(days=1)),
        (200004, 'test4', '–¢–µ—Å—Ç–æ–≤—ã–π4', '–¢–µ–ª–µ–≥—Ä–∞–º', 'issued', now - datetime.timedelta(hours=12)),
    ]
    
    for data in test_data:
        cur.execute("""
            INSERT OR REPLACE INTO users 
            (user_id, username, first_name, source, status, signup_date) 
            VALUES (?, ?, ?, ?, ?, ?)
        """, data)
    
    conn.commit()
    print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")

# –¢–µ–ø–µ—Ä—å —Ç–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –∏–∑ reports_callbacks
print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –æ—Ç—á–µ—Ç–æ–≤...")

# –ê–Ω–∞–ª–∏–∑ –æ—Ç—Ç–æ–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
end_time = datetime.datetime.now(pytz.utc)
start_time = end_time - datetime.timedelta(days=30)

cur.execute("""
    SELECT source, COUNT(*) as cnt 
    FROM users 
    WHERE status = 'redeemed_and_left' 
    GROUP BY source
""")
churn_data = cur.fetchall()

print("\nüìà –ê–Ω–∞–ª–∏–∑ –æ—Ç—Ç–æ–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:")
if churn_data:
    total_churn = sum(row[1] for row in churn_data)
    for row in churn_data:
        percent = round(row[1] / total_churn * 100, 1) if total_churn else 0
        print(f"  ‚Ä¢ {row[0] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}: {row[1]} ({percent}%)")
else:
    print("  ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ—Ç—Ç–æ–∫—É")

# –ü–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
cur.execute("""
    SELECT strftime('%H', signup_date) as hour, COUNT(*) as cnt 
    FROM users 
    WHERE signup_date BETWEEN ? AND ? 
    GROUP BY hour 
    ORDER BY hour
""", (start_time, end_time))
activity_data = cur.fetchall()

print("\nüïí –ü–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:")
if activity_data:
    for row in activity_data:
        print(f"  ‚Ä¢ {row[0]}:00 ‚Äî {row[1]}")
else:
    print("  ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")

conn.close()
print("\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

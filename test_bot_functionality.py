#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞.
"""

import sys
import os
import logging

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π."""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        import config
        print("‚úÖ config.py - OK")
    except Exception as e:
        print(f"‚ùå config.py - –û–®–ò–ë–ö–ê: {e}")
        
    try:
        import database
        print("‚úÖ database.py - OK")
    except Exception as e:
        print(f"‚ùå database.py - –û–®–ò–ë–ö–ê: {e}")
        
    try:
        import keyboards
        print("‚úÖ keyboards.py - OK")
    except Exception as e:
        print(f"‚ùå keyboards.py - –û–®–ò–ë–ö–ê: {e}")
        
    try:
        import texts
        print("‚úÖ texts.py - OK")
    except Exception as e:
        print(f"‚ùå texts.py - –û–®–ò–ë–ö–ê: {e}")
        
    try:
        from handlers import callback_query
        print("‚úÖ handlers/callback_query.py - OK")
    except Exception as e:
        print(f"‚ùå handlers/callback_query.py - –û–®–ò–ë–ö–ê: {e}")
        
    try:
        from handlers import user_commands
        print("‚úÖ handlers/user_commands.py - OK")
    except Exception as e:
        print(f"‚ùå handlers/user_commands.py - –û–®–ò–ë–ö–ê: {e}")
        
    try:
        from handlers import admin_panel
        print("‚úÖ handlers/admin_panel.py - OK")
    except Exception as e:
        print(f"‚ùå handlers/admin_panel.py - –û–®–ò–ë–ö–ê: {e}")
        
    try:
        from handlers import ai_logic
        print("‚úÖ handlers/ai_logic.py - OK")
    except Exception as e:
        print(f"‚ùå handlers/ai_logic.py - –û–®–ò–ë–ö–ê: {e}")
        
    try:
        from ai import assistant
        print("‚úÖ ai/assistant.py - OK")
    except Exception as e:
        print(f"‚ùå ai/assistant.py - –û–®–ò–ë–ö–ê: {e}")

def test_database_functions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    print("\nüóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        import database
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        database.init_db()
        print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - OK")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π
        test_user_id = 12345
        database.update_user_concept(test_user_id, "rvv")
        concept = database.get_user_concept(test_user_id)
        if concept == "rvv":
            print("‚úÖ –§—É–Ω–∫—Ü–∏–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π —Ä–∞–±–æ—Ç–∞—é—Ç - OK")
        else:
            print(f"‚ùå –§—É–Ω–∫—Ü–∏–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π - –û–®–ò–ë–ö–ê: –æ–∂–∏–¥–∞–ª–æ—Å—å 'rvv', –ø–æ–ª—É—á–µ–Ω–æ '{concept}'")
            
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - –û–®–ò–ë–ö–ê: {e}")

def test_keyboards():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä."""
    print("\n‚å®Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä...")
    
    try:
        import keyboards
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–æ–Ω—Ü–µ–ø—Ü–∏–π
        concept_keyboard = keyboards.get_concept_choice_keyboard()
        if concept_keyboard.keyboard:
            print("‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π —Å–æ–∑–¥–∞–µ—Ç—Å—è - OK")
        else:
            print("‚ùå –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π - –û–®–ò–ë–ö–ê: –ø—É—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞")
            
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        main_keyboard = keyboards.get_main_menu_keyboard(12345)
        if main_keyboard.keyboard:
            print("‚úÖ –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è - OK")
        else:
            print("‚ùå –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ - –û–®–ò–ë–ö–ê: –ø—É—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞")
            
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä - –û–®–ò–ë–ö–ê: {e}")

def test_ai_concepts():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º AI –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏."""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –∫–æ–Ω—Ü–µ–ø—Ü–∏–π...")
    
    try:
        from ai.assistant import create_system_prompt
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
        concepts = ["evgenich", "rvv", "nebar", "spletni", "orbita"]
        
        for concept in concepts:
            prompt = create_system_prompt("—Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ", concept)
            if concept.upper() in prompt or concept in prompt:
                print(f"‚úÖ –ö–æ–Ω—Ü–µ–ø—Ü–∏—è '{concept}' - OK")
            else:
                print(f"‚ùå –ö–æ–Ω—Ü–µ–ø—Ü–∏—è '{concept}' - –û–®–ò–ë–ö–ê: –∫–æ–Ω—Ü–µ–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø—Ä–æ–º–ø—Ç–µ")
                
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –∫–æ–Ω—Ü–µ–ø—Ü–∏–π - –û–®–ò–ë–ö–ê: {e}")

def test_environment_variables():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    print("\nüåç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    try:
        import config
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        critical_vars = [
            ("BOT_TOKEN", config.BOT_TOKEN),
            ("CHANNEL_ID", config.CHANNEL_ID),
            ("ADMIN_IDS", config.ADMIN_IDS)
        ]
        
        for var_name, var_value in critical_vars:
            if var_value:
                print(f"‚úÖ {var_name} - —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            else:
                print(f"‚ùå {var_name} - –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê (–∫—Ä–∏—Ç–∏—á–Ω–æ!)")
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        optional_vars = [
            ("OPENAI_API_KEY", config.OPENAI_API_KEY),
            ("GOOGLE_SHEET_KEY", config.GOOGLE_SHEET_KEY),
            ("REPORT_CHAT_ID", config.REPORT_CHAT_ID)
        ]
        
        for var_name, var_value in optional_vars:
            if var_value:
                print(f"‚úÖ {var_name} - —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            else:
                print(f"‚ö†Ô∏è {var_name} - –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
                
    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è - –û–®–ò–ë–ö–ê: {e}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ '–ï–≤–≥–µ–Ω–∏—á'...\n")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    logging.basicConfig(level=logging.WARNING)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    test_imports()
    test_environment_variables()
    test_database_functions()
    test_keyboards()
    test_ai_concepts()
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫")
    print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞ –≤ Telegram —Å –∫–æ–º–∞–Ω–¥–æ–π /concept")
    print("4. –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ callback'–æ–≤")

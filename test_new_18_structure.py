#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –Ω–æ–≤–æ–π 18-–∫–æ–ª–æ–Ω–æ—á–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
"""

# –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞  
import os
os.environ['BOT_TOKEN'] = 'test'
os.environ['CHANNEL_ID'] = '123'
os.environ['ADMIN_IDS'] = '123'
os.environ['GOOGLE_SHEET_KEY'] = 'test1,test2'
os.environ['GOOGLE_CREDENTIALS_JSON'] = '{}'
os.environ['HELLO_STICKER_ID'] = 'test'
os.environ['NASTOYKA_STICKER_ID'] = 'test'
os.environ['THANK_YOU_STICKER_ID'] = 'test'
os.environ['SMM_IDS'] = '555666777,888999000'

import logging
from typing import Dict, Any
from unittest.mock import patch

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')

def test_export_booking_to_secondary_table():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ export_booking_to_secondary_table —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""
    print("üß™ –¢–µ—Å—Ç export_booking_to_secondary_table (18 —Å—Ç–æ–ª–±—Ü–æ–≤)")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
    from social_bookings_export import export_booking_to_secondary_table
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    booking_data = {
        'name': '–¢–µ—Å—Ç –ù–æ–≤–∞—è –°—Ç—Ä—É–∫—Ç—É—Ä–∞',
        'phone': '+7900111222',
        'date': '2024-01-15',
        'time': '20:00',
        'guests': '6',
        'source': 'direct'
    }
    
    user_id = 555666777  # –°–ú–ú—â–∏–∫
    is_admin_booking = True
    
    print(f"üìã –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    for key, value in booking_data.items():
        print(f"  {key}: {value}")
    print(f"  user_id: {user_id}")
    print(f"  is_admin_booking: {is_admin_booking}")
    
    # –ú–æ–∫ –¥–ª—è Google Sheets (—á—Ç–æ–±—ã –Ω–µ –ø–∏—Å–∞—Ç—å –≤ —Ä–µ–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É)
    def mock_gspread_open_by_key(key):
        class MockWorksheet:
            def append_row(self, row):
                print(f"üìù Mock append_row –≤—ã–∑–≤–∞–Ω:")
                print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤: {len(row)}")
                print(f"   –û–∂–∏–¥–∞–µ—Ç—Å—è: 18 (A-R)")
                print(f"   –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç: {'‚úÖ' if len(row) == 18 else '‚ùå'}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                columns = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R']
                print(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:")
                for i, (col, data) in enumerate(zip(columns, row)):
                    if data:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
                        print(f"     {col}: {data}")
                
                return True
                
        class MockSpreadsheet:
            def sheet1(self):
                return MockWorksheet()
                
        return MockSpreadsheet()
    
    # –ü–∞—Ç—á–∏–º gspread
    with patch('gspread.service_account') as mock_service_account:
        mock_client = mock_service_account.return_value
        mock_client.open_by_key = mock_gspread_open_by_key
        
        try:
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            result = export_booking_to_secondary_table(booking_data, user_id, is_admin_booking)
            print(f"‚úÖ –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ: {result}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
            import traceback
            traceback.print_exc()
            return False

def test_column_mapping():
    """–¢–µ—Å—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–ª–æ–Ω–æ–∫"""
    print(f"\nüóÇÔ∏è  –¢–µ—Å—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–ª–æ–Ω–æ–∫:")
    
    expected_columns = {
        'A': '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ (–ï–í–ì_–°–ü–ë + –∏–º—è + —Ç–µ–ª–µ—Ñ–æ–Ω)',
        'B': '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)',
        'C': '–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞',
        'D': '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ—Å–µ—â–µ–Ω–∏—è',
        'E': '–¢–µ–≥ –≥–æ—Ä–æ–¥–∞ (–ï–í–ì_–°–ü–ë)',
        'F': '–¢–µ–ª–µ—Ñ–æ–Ω',
        'G': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π',
        'H': '–ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞',
        'I': 'UTM Source',
        'J': 'UTM Medium',
        'K': 'UTM Campaign',
        'L': 'UTM Term',
        'M': 'UTM Content',
        'N': 'Client ID',
        'O': 'Session ID',
        'P': 'FB Click ID',
        'Q': 'GA Client ID',
        'R': 'Telegram ID'
    }
    
    print(f"üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ 18 —Å—Ç–æ–ª–±—Ü–æ–≤ (A-R):")
    for col, desc in expected_columns.items():
        print(f"   {col}: {desc}")
    
    return True

if __name__ == "__main__":
    print("üöÄ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã\n")
    
    # –¢–µ—Å—Ç 1: —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–æ–Ω–æ–∫
    mapping_ok = test_column_mapping()
    
    # –¢–µ—Å—Ç 2: —Ñ—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    export_ok = test_export_booking_to_secondary_table()
    
    print(f"\nüìã –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"  –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–æ–Ω–æ–∫: {'‚úÖ' if mapping_ok else '‚ùå'}")
    print(f"  –§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞: {'‚úÖ' if export_ok else '‚ùå'}")
    
    if mapping_ok and export_ok:
        print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print(f"‚úÖ –ù–æ–≤–∞—è 18-–∫–æ–ª–æ–Ω–æ—á–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞")
        print(f"‚úÖ –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"‚úÖ –°–ú–ú—â–∏–∫–∏ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å (–ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ SMM_IDS)")
    else:
        print(f"\n‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´!")

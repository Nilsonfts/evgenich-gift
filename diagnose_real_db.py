#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å QR-–∫–æ–¥–∞–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
"""

import sqlite3
import sys

def check_real_database():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö bot_database.db"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –†–ï–ê–õ–¨–ù–û–ô –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    try:
        conn = sqlite3.connect('bot_database.db')
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã staff
        print("üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã staff:")
        cur.execute("PRAGMA table_info(staff)")
        staff_columns = cur.fetchall()
        for col in staff_columns:
            print(f"  ‚Ä¢ {col['name']}: {col['type']}")
        
        print("\n" + "-" * 30)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        cur.execute("SELECT COUNT(*) as count FROM staff")
        staff_count = cur.fetchone()['count']
        print(f"üë• –í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –±–∞–∑–µ: {staff_count}")
        
        if staff_count > 0:
            cur.execute("SELECT * FROM staff ORDER BY staff_id")
            staff_list = cur.fetchall()
            
            print("\nüë• –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:")
            for staff in staff_list:
                print(f"  ‚Ä¢ ID: {staff['staff_id']}")
                print(f"    –ò–º—è: {staff['full_name']}")
                print(f"    –ö–æ–¥: {staff['unique_code']}")
                print(f"    –°—Ç–∞—Ç—É—Å: {staff['status']}")
                print(f"    Telegram ID: {staff.get('telegram_id', '–ù–ï–¢')}")
                print(f"    –î–æ–ª–∂–Ω–æ—Å—Ç—å: {staff.get('position', '–ù–ï–¢')}")
                print()
        
        print("-" * 30)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã users
        print("\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã users:")
        cur.execute("PRAGMA table_info(users)")
        user_columns = cur.fetchall()
        for col in user_columns:
            print(f"  ‚Ä¢ {col['name']}: {col['type']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cur.execute("SELECT COUNT(*) as count FROM users")
        users_count = cur.fetchone()['count']
        print(f"\nüë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")
        
        if users_count > 0:
            cur.execute("""
                SELECT user_id, source, brought_by_staff_id, created_at 
                FROM users 
                ORDER BY rowid DESC 
                LIMIT 10
            """)
            recent_users = cur.fetchall()
            
            print("\nüì± –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
            for user in recent_users:
                print(f"  ‚Ä¢ ID: {user['user_id']}")
                print(f"    –ò—Å—Ç–æ—á–Ω–∏–∫: {user['source']}")
                print(f"    –°–æ—Ç—Ä—É–¥–Ω–∏–∫ ID: {user.get('brought_by_staff_id', '–ù–ï–¢')}")
                print(f"    –î–∞—Ç–∞: {user.get('created_at', '–ù–ï–¢')}")
                print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
        cur.execute("""
            SELECT u.source, COUNT(*) as count
            FROM users u
            GROUP BY u.source
            ORDER BY count DESC
        """)
        source_stats = cur.fetchall()
        
        print("-" * 30)
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:")
        for stat in source_stats:
            print(f"  ‚Ä¢ {stat['source']}: {stat['count']} —á–µ–ª.")
        
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–∏–≤–ª–µ—á–µ–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
        cur.execute("""
            SELECT COUNT(*) as count 
            FROM users 
            WHERE brought_by_staff_id IS NOT NULL
        """)
        staff_referred = cur.fetchone()['count']
        print(f"\nüéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–∏–≤–ª–µ—á–µ–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏: {staff_referred}")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

def test_staff_lookup():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –∫–æ–¥–∞–º"""
    print("\nüß™ –¢–ï–°–¢ –ü–û–ò–°–ö–ê –°–û–¢–†–£–î–ù–ò–ö–û–í")
    print("=" * 50)
    
    try:
        conn = sqlite3.connect('bot_database.db')
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–¥—ã
        cur.execute("SELECT unique_code FROM staff WHERE status = 'active'")
        codes = [row['unique_code'] for row in cur.fetchall()]
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤: {len(codes)}")
        
        for code in codes:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –∫–∞–∂–¥–æ–º—É –∫–æ–¥—É
            cur.execute("""
                SELECT staff_id, full_name, short_name, unique_code, status
                FROM staff 
                WHERE unique_code = ? AND status = 'active'
            """, (code,))
            
            result = cur.fetchone()
            if result:
                print(f"  ‚úÖ –ö–æ–¥ '{code}' ‚Üí {result['full_name']}")
            else:
                print(f"  ‚ùå –ö–æ–¥ '{code}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–∏—Å–∫–∞: {e}")

if __name__ == "__main__":
    check_real_database()
    test_staff_lookup()

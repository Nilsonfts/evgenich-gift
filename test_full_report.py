#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_with_mock_data():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å –º–æ–∫–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
    print("üß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not os.path.exists('data'):
            os.makedirs('data')
            print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è data")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        import sqlite3
        from datetime import datetime, timedelta

        db_path = "data/evgenich_data.db"
        conn = sqlite3.connect(db_path)
        cur = conn.cursor()

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É users —Å –Ω—É–∂–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
        cur.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                first_name TEXT,
                username TEXT,
                status TEXT DEFAULT 'registered',
                source TEXT DEFAULT 'direct',
                utm_source TEXT,
                utm_medium TEXT,
                utm_campaign TEXT,
                signup_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                redeem_date TIMESTAMP,
                referrer_id INTEGER,
                brought_by_staff_id INTEGER,
                registration_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        base_date = datetime(2025, 7, 10)  # –î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
        test_users = [
            (1, "–ò–≤–∞–Ω", "ivan123", "redeemed", "direct", None, None, None, base_date, base_date + timedelta(hours=2)),
            (2, "–ü–µ—Ç—Ä", "petr456", "issued", "referral", "telegram", "social", "promo1", base_date + timedelta(days=1), None),
            (3, "–ú–∞—Ä–∏—è", "maria789", "redeemed_and_left", "staff", None, None, None, base_date + timedelta(days=2), base_date + timedelta(days=2, hours=3)),
            (4, "–ê–Ω–Ω–∞", "anna000", "redeemed", "channel", "instagram", "social", "ads", base_date + timedelta(days=3), base_date + timedelta(days=3, hours=1)),
            (5, "–û–ª–µ–≥", "oleg111", "left", "direct", None, None, None, base_date + timedelta(days=4), None),
        ]

        for user_data in test_users:
            cur.execute("""
                INSERT OR REPLACE INTO users 
                (user_id, first_name, username, status, source, utm_source, utm_medium, utm_campaign, signup_date, redeem_date)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, user_data)

        conn.commit()
        conn.close()
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É")

        # –¢–µ–ø–µ—Ä—å —Ç–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ get_all_users_for_report...")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é –∏–∑ database
        import sqlite3
        
        # –ö–æ–ø–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∞
        conn = sqlite3.connect(db_path)
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()
        
        cur.execute("""
            SELECT 
                user_id,
                first_name,
                username, 
                status,
                source,
                utm_source,
                utm_medium,
                utm_campaign,
                signup_date,
                redeem_date,
                referrer_id,
                brought_by_staff_id,
                registration_time
            FROM users 
            ORDER BY signup_date ASC
        """)
        
        rows = cur.fetchall()
        conn.close()
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(rows)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ—Ç—á–µ—Ç–∞
        total_subscribed = 0
        total_unsubscribed = 0
        sources_stats = {}
        
        for row in rows:
            user = dict(row)
            print(f"  ‚Ä¢ {user['first_name']} (@{user['username']}) - {user['status']} - {user['source']}")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∞–≤—à–∏—Ö—Å—è
            if user.get('status') in ['issued', 'redeemed', 'redeemed_and_left']:
                total_subscribed += 1
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç–ø–∏—Å–∞–≤—à–∏—Ö—Å—è
            if user.get('status') in ['left', 'unsubscribed']:
                total_unsubscribed += 1
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            source = user.get('source', 'direct')
            utm_source = user.get('utm_source', 'unknown')
            
            if source == 'referral':
                channel = '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞'
            elif source == 'staff':
                channel = '–ß–µ—Ä–µ–∑ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞'
            elif utm_source and utm_source != 'unknown':
                channel = f'UTM: {utm_source}'
            elif source == 'channel':
                channel = 'Telegram –∫–∞–Ω–∞–ª'
            else:
                channel = '–ü—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥'
            
            sources_stats[channel] = sources_stats.get(channel, 0) + 1
        
        delta = total_subscribed - total_unsubscribed
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:")
        print(f"‚úÖ –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–∞–ª–æ—Å—å: {total_subscribed}")
        print(f"‚ùå –í—Å–µ–≥–æ –æ—Ç–ø–∏—Å–∞–ª–æ—Å—å: {total_unsubscribed}")
        print(f"üìä –î–µ–ª—å—Ç–∞: {delta:+d}")
        print(f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(rows)}")
        print(f"\nüéØ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è:")
        for channel, count in sorted(sources_stats.items(), key=lambda x: x[1], reverse=True):
            percentage = (count / len(rows)) * 100 if rows else 0
            print(f"‚Ä¢ {channel}: {count} —á–µ–ª. ({percentage:.1f}%)")

        print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_with_mock_data()

#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø—Ä–æ—Å—Ç—ã—Ö QR-–∫–æ–¥–æ–≤ –ø–æ Telegram ID
"""

import sqlite3
import os
from datetime import datetime, timedelta

def test_simple_qr_codes():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç QR-–∫–æ–¥—ã —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –∫–æ–¥–∞–º–∏ (Telegram ID)."""
    
    db_path = "data/evgenich_data.db"
    
    if not os.path.exists(db_path):
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    print("üß™ –¢–ï–°–¢ –ü–†–û–°–¢–´–• QR-–ö–û–î–û–í")
    print("=" * 30)
    
    conn = sqlite3.connect(db_path)
    conn.row_factory = sqlite3.Row
    cur = conn.cursor()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–¥—ã
    test_codes = [
        "208281210",  # –ö—Ä–∏—Å—Ç–∏–Ω–∞
        "196614680",  # –ù–∏–ª
        "TEST2024"    # –¢–µ—Å—Ç–æ–≤—ã–π
    ]
    
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:")
    for code in test_codes:
        cur.execute("SELECT * FROM staff WHERE unique_code = ? AND status = 'active'", (code,))
        staff = cur.fetchone()
        
        if staff:
            print(f"‚úÖ –ö–æ–¥ '{code}' ‚Üí {staff['full_name']} ({staff['position']})")
        else:
            print(f"‚ùå –ö–æ–¥ '{code}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ QR-–∫–æ–¥—É –ö—Ä–∏—Å—Ç–∏–Ω—ã
    print(f"\nüì± –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ QR-–∫–æ–¥—É –ö—Ä–∏—Å—Ç–∏–Ω—ã:")
    print(f"üîó https://t.me/evgenichspbbot?start=w_208281210")
    
    # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cur.execute("DELETE FROM users WHERE user_id >= 800000000")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∫–æ–¥ –ö—Ä–∏—Å—Ç–∏–Ω—ã
    test_user_id = 800000001
    staff_code = "208281210"
    
    # –ù–∞—Ö–æ–¥–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    cur.execute("SELECT * FROM staff WHERE unique_code = ? AND status = 'active'", (staff_code,))
    staff_member = cur.fetchone()
    
    if staff_member:
        try:
            cur.execute("""
                INSERT INTO users 
                (user_id, username, first_name, source, brought_by_staff_id, status, registration_time)
                VALUES (?, ?, ?, 'staff', ?, 'issued', datetime('now'))
            """, (
                test_user_id,
                "testuser_kristina",
                "–¢–µ—Å—Ç–æ–≤—ã–π –ì–æ—Å—Ç—å –ö—Ä–∏—Å—Ç–∏–Ω—ã",
                staff_member['staff_id']
            ))
            
            conn.commit()
            print(f"‚úÖ –ì–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É: {staff_member['full_name']}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:")
    cur.execute("""
        SELECT source, COUNT(*) as count 
        FROM users 
        WHERE user_id >= 800000000
        GROUP BY source 
        ORDER BY count DESC
    """)
    
    sources = cur.fetchall()
    for source in sources:
        print(f"‚Ä¢ {source['source']}: {source['count']} –ø–µ—Ä–µ—Ö–æ–¥–æ–≤")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
    print(f"\nüë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥—ã):")
    cur.execute("""
        SELECT 
            s.full_name,
            s.unique_code,
            COUNT(u.user_id) as attracted_users
        FROM staff s
        LEFT JOIN users u ON s.staff_id = u.brought_by_staff_id 
            AND u.source = 'staff'
            AND u.user_id >= 800000000
        WHERE s.status = 'active'
        GROUP BY s.staff_id, s.full_name, s.unique_code
        ORDER BY attracted_users DESC
    """)
    
    staff_stats = cur.fetchall()
    for staff in staff_stats:
        qr_url = f"https://t.me/evgenichspbbot?start=w_{staff['unique_code']}"
        print(f"‚Ä¢ {staff['full_name']}: {staff['attracted_users']} –≥–æ—Å—Ç–µ–π")
        print(f"  QR: {qr_url}")
        print()
    
    conn.close()
    print("üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    test_simple_qr_codes()

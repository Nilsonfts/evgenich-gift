# main.py

import telebot
import logging
import os
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger
import datetime
import pytz

from config import BOT_TOKEN, FRIEND_BONUS_STICKER_ID, REPORT_CHAT_ID, CHANNEL_ID
import database
import keyboards
import texts

from handlers.user_commands import register_user_command_handlers
from handlers.callback_query import register_callback_handlers
from handlers.booking_flow import register_booking_handlers
from handlers.admin_panel import register_admin_handlers, send_report
from handlers.ai_logic import register_ai_handlers
from handlers.iiko_data_handler import register_iiko_data_handlers
from delayed_tasks_processor import DelayedTasksProcessor

if not os.path.exists('logs'):
    os.makedirs('logs')

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler("logs/bot.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)

bot = telebot.TeleBot(BOT_TOKEN, threaded=False)
scheduler = BackgroundScheduler(timezone="Europe/Moscow")
delayed_tasks_processor = DelayedTasksProcessor(bot)

def send_friend_bonus(referrer_id, friend_name):
    # –¢—É—Ç –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–æ–Ω—É—Å–∞
    pass

def request_feedback(user_id):
    # –¢—É—Ç –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    pass

def send_daily_report_job():
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –∑–∞ —Å–º–µ–Ω—É —Å 12:00 –¥–æ 06:00."""
    logging.info("Scheduler: –ó–∞–ø—É—Å–∫–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
    try:
        tz_moscow = pytz.timezone('Europe/Moscow')
        current_time = datetime.datetime.now(tz_moscow)
        
        # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –¥–æ 12:00, —Ç–æ –æ—Ç—á–µ—Ç –∑–∞ —Å–º–µ–Ω—É: 12:00 –ø–æ–∑–∞–≤—á–µ—Ä–∞ - 06:00 –≤—á–µ—Ä–∞
        # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –ø–æ—Å–ª–µ 12:00, —Ç–æ –æ—Ç—á–µ—Ç –∑–∞ —Å–º–µ–Ω—É: 12:00 –≤—á–µ—Ä–∞ - 06:00 —Å–µ–≥–æ–¥–Ω—è
        if current_time.hour < 12:
            # –û—Ç—á–µ—Ç –∑–∞ –ø–æ–∑–∞–≤—á–µ—Ä–∞—à–Ω—é—é —Å–º–µ–Ω—É
            end_time = current_time.replace(hour=6, minute=0, second=0, microsecond=0)
            start_time = (end_time - datetime.timedelta(days=1)).replace(hour=12, minute=0, second=0, microsecond=0)
        else:
            # –û—Ç—á–µ—Ç –∑–∞ –≤—á–µ—Ä–∞—à–Ω—é—é —Å–º–µ–Ω—É  
            end_time = current_time.replace(hour=6, minute=0, second=0, microsecond=0)
            if current_time.hour >= 6:
                # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –ø–æ—Å–ª–µ 06:00, —Ç–æ –±–µ—Ä–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ 06:00
                pass
            else:
                # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –¥–æ 06:00, —Ç–æ –±–µ—Ä–µ–º –≤—á–µ—Ä–∞—à–Ω–∏–µ 06:00
                end_time = end_time - datetime.timedelta(days=1)
            start_time = (end_time - datetime.timedelta(days=1)).replace(hour=12, minute=0, second=0, microsecond=0)
        
        logging.info(f"–§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á–µ—Ç –∑–∞ —Å–º–µ–Ω—É: {start_time.strftime('%d.%m.%Y %H:%M')} - {end_time.strftime('%d.%m.%Y %H:%M')}")
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ iiko –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç—á–µ—Ç–∞
        report_date = end_time.date()
        request_iiko_data_before_report(report_date, start_time, end_time)
        
    except Exception as e:
        logging.error(f"Scheduler: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")

def request_iiko_data_before_report(report_date: datetime.date, start_time: datetime.datetime, end_time: datetime.datetime):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ iiko –ø–µ—Ä–µ–¥ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ—Ç—á–µ—Ç–∞."""
    from texts import IIKO_DATA_REQUEST_TEXT
    from database import is_waiting_for_iiko_data
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω—ã –ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞ —ç—Ç—É –¥–∞—Ç—É
    if is_waiting_for_iiko_data(report_date):
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ —á–∞—Ç –æ—Ç—á–µ—Ç–æ–≤ –≤ 05:30
            bot.send_message(
                REPORT_CHAT_ID,
                IIKO_DATA_REQUEST_TEXT,
                parse_mode='Markdown'
            )
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö iiko –∑–∞ {report_date}")
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç—á–µ—Ç–∞ —á–µ—Ä–µ–∑ 35 –º–∏–Ω—É—Ç (–≤ 06:05)
            scheduler.add_job(
                lambda: send_final_report_with_iiko(start_time, end_time),
                'date',
                run_date=datetime.datetime.now(pytz.timezone('Europe/Moscow')) + datetime.timedelta(minutes=35),
                id=f'final_report_{report_date}',
                replace_existing=True
            )
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö iiko: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö iiko
            send_final_report_with_iiko(start_time, end_time)
    else:
        # –î–∞–Ω–Ω—ã–µ —É–∂–µ –µ—Å—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç —Å—Ä–∞–∑—É
        send_final_report_with_iiko(start_time, end_time)

def send_final_report_with_iiko(start_time: datetime.datetime, end_time: datetime.datetime):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ iiko (–µ—Å–ª–∏ –µ—Å—Ç—å)."""
    try:
        send_report(bot, REPORT_CHAT_ID, start_time, end_time)
        logging.info(f"Scheduler: –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {REPORT_CHAT_ID}.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")

def run_nightly_auditor_job():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ—Ö, –∫—Ç–æ –ø–æ–≥–∞—Å–∏–ª –∫—É–ø–æ–Ω, –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏.
    """
    logging.info("–ê—É–¥–∏—Ç–æ—Ä: –ù–∞—á–∏–Ω–∞—é –Ω–æ—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Ç–ø–∏—Å–∞–≤—à–∏—Ö—Å—è...")
    users_to_check = database.get_redeemed_users_for_audit()
    if not users_to_check:
        logging.info("–ê—É–¥–∏—Ç–æ—Ä: –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏. –ó–∞–≤–µ—Ä—à–∞—é.")
        return

    logging.info(f"–ê—É–¥–∏—Ç–æ—Ä: –ù–∞–π–¥–µ–Ω–æ {len(users_to_check)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
    left_count = 0
    for user_row in users_to_check:
        user_id = user_row['user_id']
        try:
            # –î–µ–ª–∞–µ–º –ø–∞—É–∑—É, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç—ã Telegram
            import time
            time.sleep(1)
            
            chat_member = bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
            if chat_member.status not in ['member', 'administrator', 'creator']:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø–∏—Å–∞–ª—Å—è
                database.mark_user_as_left(user_id)
                left_count += 1
        except telebot.apihelper.ApiTelegramException as e:
            if 'user not found' in e.description or 'bot was blocked by the user' in e.description:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–∏–ª –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
                database.mark_user_as_left(user_id)
                left_count += 1
                logging.warning(f"–ê—É–¥–∏—Ç–æ—Ä: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω (—É–¥–∞–ª–∏–ª/–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª). –ü–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ—Ç–ø–∏—Å–∞–≤—à–∏–π—Å—è.")
            else:
                logging.error(f"–ê—É–¥–∏—Ç–æ—Ä: –û—à–∏–±–∫–∞ API Telegram –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {user_id}: {e}")
        except Exception as e:
            logging.error(f"–ê—É–¥–∏—Ç–æ—Ä: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {user_id}: {e}")

    logging.info(f"–ê—É–¥–∏—Ç–æ—Ä: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ {left_count} –æ—Ç–ø–∏—Å–∞–≤—à–∏—Ö—Å—è.")

if __name__ == "__main__":
    logging.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    database.init_db()

    logging.info("ü§ñ –ù–∞—á–∏–Ω–∞—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
    register_user_command_handlers(bot)
    register_callback_handlers(bot, scheduler, send_friend_bonus, request_feedback)
    register_booking_handlers(bot)
    register_admin_handlers(bot)
    register_ai_handlers(bot)
    register_iiko_data_handlers(bot)

    # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –≤ 05:30 (–∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö iiko)
    scheduler.add_job(
        send_daily_report_job,
        trigger=CronTrigger(hour=5, minute=30, timezone='Europe/Moscow'),
        id='daily_report_job', name='Daily report', replace_existing=True
    )
    logging.info("Scheduler: –ó–∞–¥–∞—á–∞ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 05:30.")

    # –ù–æ—á–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä –≤ 04:00
    scheduler.add_job(
        run_nightly_auditor_job,
        trigger=CronTrigger(hour=4, minute=0, timezone='Europe/Moscow'),
        id='nightly_auditor_job', name='Nightly Auditor', replace_existing=True
    )
    logging.info("Scheduler: –ó–∞–¥–∞—á–∞ '–ù–æ—á–Ω–æ–π –ê—É–¥–∏—Ç–æ—Ä' –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 04:00.")

    scheduler.start()
    delayed_tasks_processor.start()
    logging.info("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã.")

    bot.infinity_polling(skip_pending=True)

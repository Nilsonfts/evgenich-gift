# main.py 

import telebot
import logging
import os
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger
import datetime
import pytz

from config import BOT_TOKEN, FRIEND_BONUS_STICKER_ID, REPORT_CHAT_ID
import database
import keyboards
import texts

from handlers.user_commands import register_user_command_handlers
from handlers.callback_query import register_callback_handlers
from handlers.booking_flow import register_booking_handlers
from handlers.admin_panel import register_admin_handlers, send_report
from handlers.ai_logic import register_ai_handlers

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
if not os.path.exists('logs'):
    os.makedirs('logs')

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler("logs/bot.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)

bot = telebot.TeleBot(BOT_TOKEN, threaded=False)
scheduler = BackgroundScheduler(timezone="Europe/Moscow")

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á ---
def send_friend_bonus(referrer_id, friend_name):
    pass # ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

def request_feedback(user_id):
    pass# ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ï–ñ–ï–î–ù–ï–í–ù–û–ì–û –û–¢–ß–ï–¢–ê ---
def send_daily_report_job():
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞.
    """
    logging.info("Scheduler: –ó–∞–ø—É—Å–∫–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: —Å 06:00 –≤—á–µ—Ä–∞ –¥–æ 06:00 —Å–µ–≥–æ–¥–Ω—è
        tz_moscow = pytz.timezone('Europe/Moscow')
        end_time = datetime.datetime.now(tz_moscow).replace(hour=6, minute=0, second=0, microsecond=0)
        start_time = end_time - datetime.timedelta(days=1)
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        send_report(bot, REPORT_CHAT_ID, start_time, end_time)
        logging.info(f"Scheduler: –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {REPORT_CHAT_ID}.")
    except Exception as e:
        logging.error(f"Scheduler: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")

if __name__ == "__main__":
    logging.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    database.init_db()

    logging.info("ü§ñ –ù–∞—á–∏–Ω–∞—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")

    register_user_command_handlers(bot)
    register_callback_handlers(bot, scheduler, send_friend_bonus, request_feedback)
    register_booking_handlers(bot)
    register_admin_handlers(bot)
    register_ai_handlers(bot)
    
    # --- –î–û–ë–ê–í–õ–ï–ù–ò–ï –ó–ê–î–ê–ß–ò –í –ü–õ–ê–ù–ò–†–û–í–©–ò–ö ---
    scheduler.add_job(
        send_daily_report_job,
        trigger=CronTrigger(hour=6, minute=5, timezone='Europe/Moscow'), # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 06:05
        id='daily_report_job',
        name='Daily report',
        replace_existing=True
    )
    logging.info("Scheduler: –ó–∞–¥–∞—á–∞ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 06:05.")
    
    scheduler.start()
    logging.info("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã.")
    
    bot.infinity_polling(skip_pending=True)

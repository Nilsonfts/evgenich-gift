#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –æ—Ç—á–µ—Ç–æ–≤ —Å –Ω–æ–≤—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏.
"""
import sqlite3
import datetime
import pytz
from typing import Dict, Tuple

def get_report_data_for_period(start_time: datetime.datetime, end_time: datetime.datetime) -> Tuple[int, int, Dict]:
    """–ò–º–∏—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ database.py –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    try:
        from config import DATABASE_PATH
        conn = sqlite3.connect(DATABASE_PATH)
        cur = conn.cursor()
        
        # –ü–æ–¥—Å—á–µ—Ç –≤—ã–¥–∞–Ω–Ω—ã—Ö –∫—É–ø–æ–Ω–æ–≤
        cur.execute("""
            SELECT COUNT(*) FROM users 
            WHERE signup_date BETWEEN ? AND ? 
            AND status IN ('issued', 'redeemed', 'redeemed_and_left')
        """, (start_time, end_time))
        issued_count = cur.fetchone()[0]
        
        # –ü–æ–¥—Å—á–µ—Ç –ø–æ–≥–∞—à–µ–Ω–Ω—ã—Ö –∫—É–ø–æ–Ω–æ–≤
        cur.execute("""
            SELECT COUNT(*) FROM users 
            WHERE redeem_date BETWEEN ? AND ?
        """, (start_time, end_time))
        redeemed_count = cur.fetchone()[0]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        cur.execute("""
            SELECT source, COUNT(*) FROM users 
            WHERE signup_date BETWEEN ? AND ? 
            GROUP BY source
        """, (start_time, end_time))
        all_sources = {row[0]: row[1] for row in cur.fetchall()}
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏: –≤—Å–µ –æ–±—ã—á–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        sources = {k: v for k, v in all_sources.items() if k != "staff"}
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ—Ç–¥–µ–ª—å–Ω–æ
        staff_count = all_sources.get("staff", 0)
        if staff_count > 0:
            sources["staff"] = staff_count
        
        conn.close()
        return issued_count, redeemed_count, sources
        
    except Exception as e:
        return 0, 0, {}

def generate_test_report():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤."""
    print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
    
    # –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    tz_moscow = pytz.timezone('Europe/Moscow')
    end_time = datetime.datetime.now(tz_moscow)
    start_time = end_time - datetime.timedelta(days=30)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    issued, redeemed, sources = get_report_data_for_period(start_time, end_time)
    
    print(f"\nüìà **–û—Ç—á–µ—Ç –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º —Ç—Ä–∞—Ñ–∏–∫–∞** üìà")
    print(f"**–ü–µ—Ä–∏–æ–¥:** {start_time.strftime('%d.%m.%Y %H:%M')} - {end_time.strftime('%d.%m.%Y %H:%M')}")
    print(f"\n‚úÖ **–í—ã–¥–∞–Ω–æ –∫—É–ø–æ–Ω–æ–≤:** {issued}")
    print(f"ü•É **–ü–æ–≥–∞—à–µ–Ω–æ –Ω–∞—Å—Ç–æ–µ–∫:** {redeemed}")
    
    conversion = round((redeemed / issued) * 100, 1) if issued > 0 else 0
    print(f"üìà **–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø–æ–≥–∞—à–µ–Ω–∏–µ:** {conversion}%")
    
    if sources:
        print(f"\n---\n")
        print(f"**üìç –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:**")
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
        sorted_sources = sorted(sources.items(), key=lambda x: x[1], reverse=True)
        for source, count in sorted_sources:
            print(f"‚Ä¢ {source}: {count}")
    
    print(f"\n‚úÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"\nüìã **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**")
    print(f"‚Ä¢ –í—Å–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(sources)}")
    print(f"‚Ä¢ –°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫: {max(sources.items(), key=lambda x: x[1])[0] if sources else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}")
    
    return True

if __name__ == "__main__":
    success = generate_test_report()
    if success:
        print(f"\nüéâ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –æ—Ç—á–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print(f"\nüí• –û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –æ—Ç—á–µ—Ç–æ–≤!")

#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ—Å—Ç–µ–≤–æ–π –∑–∞—è–≤–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤–æ –≤—Ç–æ—Ä—É—é —Ç–∞–±–ª–∏—Ü—É
"""

import os
import sys
import json
import gspread
from google.oauth2.service_account import Credentials
import logging
from datetime import datetime
import time
import pytz

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

def get_moscow_time():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è (UTC+3)."""
    try:
        moscow_tz = pytz.timezone('Europe/Moscow')
        moscow_time = datetime.now(moscow_tz)
        return moscow_time.strftime('%d.%m.%Y %H:%M')
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        # Fallback - –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º 3 —á–∞—Å–∞ –∫ UTC
        moscow_time = datetime.utcnow() + timedelta(hours=3)
        return moscow_time.strftime('%d.%m.%Y %H:%M')

def parse_booking_date(date_str):
    """–ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä –¥–∞—Ç –¥–ª—è —Ç–µ—Å—Ç–∞."""
    if date_str.lower() == '–∑–∞–≤—Ç—Ä–∞':
        tomorrow = datetime.now() + timedelta(days=1)
        return tomorrow.strftime('%d.%m.%Y')
    return date_str

def test_guest_booking_with_secondary_export():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –≥–æ—Å—Ç–µ–≤–æ–π –∑–∞—è–≤–∫–∏ —Å —ç–∫—Å–ø–æ—Ä—Ç–æ–º –≤–æ –≤—Ç–æ—Ä—É—é —Ç–∞–±–ª–∏—Ü—É."""
    
    print("üîç –¢–µ—Å—Ç –≥–æ—Å—Ç–µ–≤–æ–π –∑–∞—è–≤–∫–∏ —Å —ç–∫—Å–ø–æ—Ä—Ç–æ–º –≤–æ –≤—Ç–æ—Ä—É—é —Ç–∞–±–ª–∏—Ü—É")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    google_sheet_key_raw = os.getenv("GOOGLE_SHEET_KEY")
    google_credentials_json = os.getenv("GOOGLE_CREDENTIALS_JSON")
    
    if not google_sheet_key_raw or not google_credentials_json:
        print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
        print("   –≠—Ç–æ—Ç —Ç–µ—Å—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ Railway –≥–¥–µ –µ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("   –õ–æ–∫–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª")
        return False
    
    # –ü–∞—Ä—Å–∏–º –∫–ª—é—á–∏
    keys = [key.strip() for key in google_sheet_key_raw.split(',') if key.strip()]
    if len(keys) < 2:
        print("‚ùå –í—Ç–æ—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ - –Ω—É–∂–Ω–æ –¥–≤–∞ –∫–ª—é—á–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
        return False
    
    primary_key = keys[0]
    secondary_key = keys[1]
    
    print(f"‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞: {primary_key[:10]}...")
    print(f"‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞: {secondary_key[:10]}...")
    print()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
    booking_data = {
        'name': f'–¢–µ—Å—Ç-–≠–∫—Å–ø–æ—Ä—Ç-{int(time.time())}',
        'phone': '+79991234567',
        'date': '–∑–∞–≤—Ç—Ä–∞', 
        'time': '20:00',
        'guests': '3',
        'reason': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞',
        'source': 'source_bot_tg'
    }
    
    user_id = 196614680  # –¢–µ—Å—Ç–æ–≤—ã–π Telegram ID
    
    print("üìã –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:")
    for key, value in booking_data.items():
        print(f"   {key}: {value}")
    print(f"   user_id: {user_id}")
    print()
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
        print("üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Google Sheets...")
        credentials_info = json.loads(google_credentials_json)
        credentials = Credentials.from_service_account_info(
            credentials_info,
            scopes=['https://www.googleapis.com/auth/spreadsheets']
        )
        
        gc = gspread.authorize(credentials)
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        print("üìä –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É...")
        secondary_sheet = gc.open_by_key(secondary_key)
        print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ –æ—Ç–∫—Ä—ã—Ç–∞: '{secondary_sheet.title}'")
        
        # –ò—â–µ–º –Ω—É–∂–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        target_gid = "871899838"
        target_worksheet = None
        
        print(f"üîç –ò—â–µ–º –≤–∫–ª–∞–¥–∫—É —Å ID {target_gid}...")
        for ws in secondary_sheet.worksheets():
            print(f"   - {ws.title} (id={ws.id})")
            if str(ws.id) == target_gid:
                target_worksheet = ws
        
        if not target_worksheet:
            print(f"‚ùå –í–∫–ª–∞–¥–∫–∞ —Å ID {target_gid} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return False
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≤–∫–ª–∞–¥–∫–∞: '{target_worksheet.title}'")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
        print("üìù –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
        
        creation_datetime = get_moscow_time()
        booking_date = parse_booking_date(booking_data.get('date', ''))
        datetime_combined = f"{booking_date} {booking_data.get('time', '')}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É (A-P)
        row_data = [
            creation_datetime,                      # A: –î–∞—Ç–∞ –ó–∞—è–≤–∫–∏  
            "–ì–æ—Å—Ç–µ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",               # B: –ö–∞–Ω–∞–ª
            "üë§ –ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å (—á–µ—Ä–µ–∑ –±–æ—Ç–∞)",          # C: –ö—Ç–æ —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É
            '–ù–æ–≤–∞—è',                               # D: –°—Ç–∞—Ç—É—Å
            f"BID-{int(time.time())}",            # E: ID us
            booking_data.get('name', ''),          # F: –ò–º—è –ì–æ—Å—Ç—è
            booking_data.get('phone', ''),         # G: –¢–µ–ª–µ—Ñ–æ–Ω
            datetime_combined,                     # H: –î–∞—Ç–∞ / –í—Ä–µ–º—è
            booking_data.get('guests', ''),        # I: –ö–æ–ª-–≤–æ –≥–æ—Å—Ç–µ–π
            booking_data.get('reason', ''),        # J: –ü–æ–≤–æ–¥ –í–∏–∑–∏—Ç–∞
            'bot_tg',                              # K: UTM Source
            'guest_booking',                       # L: UTM Medium
            'direct_guest',                        # M: UTM Campaign
            'bot_guest_booking',                   # N: UTM Content
            'guest_direct',                        # O: UTM Term
            user_id                                # P: ID TG
        ]
        
        print(f"üìä –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∏–∑ {len(row_data)} –∫–æ–ª–æ–Ω–æ–∫:")
        for i, value in enumerate(row_data):
            column_letter = chr(65 + i)  # A, B, C...
            print(f"   {column_letter}: {value}")
        print()
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
        print("üíæ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É...")
        target_worksheet.append_row(row_data)
        print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç timedelta –¥–ª—è parse_booking_date
    from datetime import timedelta
    
    success = test_guest_booking_with_secondary_export()
    print()
    print("=" * 60)
    print(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£–°–ü–ï–•' if success else '‚ùå –û–®–ò–ë–ö–ê'}")

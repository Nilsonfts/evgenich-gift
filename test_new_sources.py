#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Ç—Ä–∞—Ñ–∏–∫–∞.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_new_sources():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Ç—Ä–∞—Ñ–∏–∫–∞...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not os.path.exists('data'):
            os.makedirs('data')
            print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è data")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        import sqlite3
        from datetime import datetime, timedelta
        from config import DATABASE_PATH

        db_path = DATABASE_PATH
        conn = sqlite3.connect(db_path)
        cur = conn.cursor()

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É users —Å –Ω—É–∂–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
        cur.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                first_name TEXT,
                username TEXT,
                status TEXT DEFAULT 'registered',
                source TEXT DEFAULT 'direct',
                signup_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                redeem_date TIMESTAMP,
                referrer_id INTEGER,
                brought_by_staff_id INTEGER
            )
        """)

        # –ù–æ–≤—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –¢–ì –±–æ—Ç–∞
        new_sources_data = [
            (10001, "–ú–∞–∫—Å–∏–º", "maxim_tv", "issued", "QR-–∫–æ–¥ –Ω–∞ –¢–í"),
            (10002, "–°–≤–µ—Ç–ª–∞–Ω–∞", "sveta_bar", "redeemed", "QR-–∫–æ–¥ –Ω–∞ –±–∞—Ä–µ"), 
            (10003, "–î–µ–Ω–∏—Å", "denis_waiter", "issued", "QR –æ—Ç –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞"),
            (10004, "–û–ª–µ—Å—è", "olesya_vk", "redeemed", "–°—Å—ã–ª–∫–∞ –∏–∑ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ"),
            (10005, "–ù–∏–∫–æ–ª–∞–π", "nick_inst", "issued", "–°—Å—ã–ª–∫–∞ –∏–∑ Instagram"),
            (10006, "–ö–∞—Ç—è", "katya_menu", "redeemed", "–ú–µ–Ω—é –≤ –±–∞—Ä–µ"),
            (10007, "–†–æ–º–∞–Ω", "roman_flyer", "issued", "–õ–∏—Å—Ç–æ–≤–∫–∞ –Ω–∞ —É–ª–∏—Ü–µ"),
            (10008, "–ò—Ä–∏–Ω–∞", "ira_street", "redeemed", "–£–ª–∏—á–Ω–æ–µ –ú–µ–Ω—é"),
            (10009, "–°–µ—Ä–≥–µ–π", "sergey_2gis", "issued", "2–ì–ò–° –ö–Ω–æ–ø–∫–∞"),
            (10010, "–Æ–ª–∏—è", "yulia_site", "redeemed", "–ö–Ω–æ–ø–∫–∞ –°–∞–π—Ç"),
            (10011, "–ê–Ω–¥—Ä–µ–π", "andrey_taplink", "issued", "–¢–∞–ø–ª–∏–Ω–∫ –Ω–∞ –¢–í"),
        ]

        base_date = datetime.now()

        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        cur.execute("DELETE FROM users WHERE user_id >= 10000")

        for i, (user_id, first_name, username, status, source) in enumerate(new_sources_data):
            signup_date = base_date - timedelta(days=len(new_sources_data)-i)
            redeem_date = signup_date + timedelta(hours=2) if status == "redeemed" else None
            
            cur.execute("""
                INSERT INTO users 
                (user_id, first_name, username, status, source, signup_date, redeem_date)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            """, (user_id, first_name, username, status, source, signup_date, redeem_date))

        conn.commit()
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(new_sources_data)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–æ–≤—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º...")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é get_report_data_for_period
        start_time = base_date - timedelta(days=30)
        end_time = base_date + timedelta(days=1)
        
        # –ü–æ–¥—Å—á–µ—Ç –≤—ã–¥–∞–Ω–Ω—ã—Ö –∫—É–ø–æ–Ω–æ–≤
        cur.execute("""
            SELECT COUNT(*) FROM users 
            WHERE signup_date BETWEEN ? AND ? 
            AND status IN ('issued', 'redeemed', 'redeemed_and_left')
        """, (start_time, end_time))
        issued_count = cur.fetchone()[0]
        
        # –ü–æ–¥—Å—á–µ—Ç –ø–æ–≥–∞—à–µ–Ω–Ω—ã—Ö –∫—É–ø–æ–Ω–æ–≤
        cur.execute("""
            SELECT COUNT(*) FROM users 
            WHERE redeem_date BETWEEN ? AND ?
        """, (start_time, end_time))
        redeemed_count = cur.fetchone()[0]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        cur.execute("""
            SELECT source, COUNT(*) FROM users 
            WHERE signup_date BETWEEN ? AND ? 
            GROUP BY source 
            ORDER BY COUNT(*) DESC
        """, (start_time, end_time))
        sources_stats = dict(cur.fetchall())
        
        conn.close()
        
        print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"   –í—ã–¥–∞–Ω–æ –∫—É–ø–æ–Ω–æ–≤: {issued_count}")
        print(f"   –ü–æ–≥–∞—à–µ–Ω–æ –∫—É–ø–æ–Ω–æ–≤: {redeemed_count}")
        print(f"   –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {round((redeemed_count/issued_count)*100, 1) if issued_count > 0 else 0}%")
        
        print(f"\nüìç –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:")
        for source, count in sources_stats.items():
            print(f"   ‚Ä¢ {source}: {count}")
        
        print(f"\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç –≤ Google Sheets (—Å–∏–º—É–ª—è—Ü–∏—è)
        print(f"\nüìÑ –°–∏–º—É–ª—è—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Google Sheets...")
        conn = sqlite3.connect(db_path)
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()
        
        cur.execute("""
            SELECT user_id, first_name, username, status, source, signup_date, redeem_date
            FROM users 
            WHERE user_id >= 10000
            ORDER BY signup_date DESC
        """)
        
        users = cur.fetchall()
        conn.close()
        
        print(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ ({len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π):")
        print(f"ID | –ò–º—è | Username | –°—Ç–∞—Ç—É—Å | –ò—Å—Ç–æ—á–Ω–∏–∫ | –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
        print("-" * 80)
        
        for user in users:
            signup_str = user['signup_date'][:16] if user['signup_date'] else "–Ω/–¥"
            print(f"{user['user_id']} | {user['first_name']} | @{user['username']} | {user['status']} | {user['source']} | {signup_str}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_new_sources()
    if success:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\nüí• –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏!")
        sys.exit(1)

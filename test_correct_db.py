#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö evgenich_data.db
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∑–∞–≥–ª—É—à–∫—É –¥–ª—è config, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
class MockConfig:
    GOOGLE_SHEET_KEY = None
    GOOGLE_CREDENTIALS_JSON = None

sys.modules['config'] = MockConfig()

import sqlite3

def test_correct_database():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö evgenich_data.db"""
    print("üîç –¢–ï–°–¢ –ü–†–ê–í–ò–õ–¨–ù–û–ô –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    # –ü—É—Ç—å –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    data_dir = "data"
    db_file = os.path.join(data_dir, "evgenich_data.db")
    
    print(f"üìÇ –ü–∞–ø–∫–∞ data: {os.path.exists(data_dir)}")
    print(f"üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_file}")
    print(f"üìÅ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(db_file)}")
    
    if not os.path.exists(db_file):
        print("‚ùå –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        print("üí° –≠—Ç–æ –æ–±—ä—è—Å–Ω—è–µ—Ç, –ø–æ—á–µ–º—É QR-–∫–æ–¥—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –ø—Ä–æ–¥–∞–∫—à–Ω–µ")
        print("\nüõ†Ô∏è –†–ï–®–ï–ù–ò–ï:")
        print("1. –ù—É–∂–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ database.init_db()")
        print("2. –ò–ª–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ bot_database.db –≤ evgenich_data.db")
        return
    
    try:
        conn = sqlite3.connect(db_file)
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        cur.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = [row['name'] for row in cur.fetchall()]
        
        print(f"\nüìã –¢–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
        for table in tables:
            print(f"  ‚Ä¢ {table}")
        
        if 'staff' in tables:
            cur.execute("SELECT COUNT(*) as count FROM staff")
            staff_count = cur.fetchone()['count']
            print(f"\nüë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –±–∞–∑–µ: {staff_count}")
            
            if staff_count > 0:
                cur.execute("SELECT unique_code, full_name FROM staff WHERE status = 'active'")
                active_staff = cur.fetchall()
                
                print("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏:")
                for staff in active_staff:
                    print(f"  ‚Ä¢ {staff['full_name']} ‚Üí {staff['unique_code']}")
            else:
                print("‚ùå –í –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ù–ï–¢ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤!")
        else:
            print("‚ùå –¢–∞–±–ª–∏—Ü–∞ staff –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –±–∞–∑–µ!")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –±–∞–∑—ã: {e}")

def copy_staff_data():
    """–ö–æ–ø–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ bot_database.db –≤ evgenich_data.db"""
    print("\nüìã –ö–û–ü–ò–†–û–í–ê–ù–ò–ï –î–ê–ù–ù–´–• –°–û–¢–†–£–î–ù–ò–ö–û–í")
    print("=" * 50)
    
    source_db = "bot_database.db"
    target_db = os.path.join("data", "evgenich_data.db")
    
    if not os.path.exists(source_db):
        print(f"‚ùå –ò—Å—Ö–æ–¥–Ω–∞—è –±–∞–∑–∞ {source_db} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    try:
        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π –±–∞–∑—ã
        source_conn = sqlite3.connect(source_db)
        source_conn.row_factory = sqlite3.Row
        source_cur = source_conn.cursor()
        
        source_cur.execute("SELECT * FROM staff")
        staff_data = source_cur.fetchall()
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(staff_data)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –∏—Å—Ö–æ–¥–Ω–æ–π –±–∞–∑–µ")
        
        # –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤—É—é –±–∞–∑—É, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        target_conn = sqlite3.connect(target_db)
        target_cur = target_conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É staff
        target_cur.execute("""
            CREATE TABLE IF NOT EXISTS staff (
                staff_id INTEGER PRIMARY KEY AUTOINCREMENT,
                full_name TEXT NOT NULL,
                short_name TEXT NOT NULL,
                unique_code TEXT UNIQUE NOT NULL,
                position TEXT NOT NULL,
                status TEXT DEFAULT 'active',
                telegram_id INTEGER UNIQUE,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # –û—á–∏—â–∞–µ–º —Ü–µ–ª–µ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
        target_cur.execute("DELETE FROM staff")
        
        # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        for staff in staff_data:
            target_cur.execute("""
                INSERT INTO staff (staff_id, full_name, short_name, unique_code, position, status, telegram_id, created_at)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                staff['staff_id'],
                staff['full_name'], 
                staff['short_name'],
                staff['unique_code'],
                staff['position'],
                staff['status'],
                staff['telegram_id'],
                staff['created_at']
            ))
        
        target_conn.commit()
        
        print(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {len(staff_data)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ {target_db}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        target_cur.execute("SELECT COUNT(*) as count FROM staff")
        copied_count = target_cur.fetchone()[0]
        print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: {copied_count} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ —Ü–µ–ª–µ–≤–æ–π –±–∞–∑–µ")
        
        source_conn.close()
        target_conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

if __name__ == "__main__":
    test_correct_database()
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    response = input("\n–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ bot_database.db? (y/n): ")
    if response.lower() == 'y':
        copy_staff_data()
        print("\n" + "="*50)
        test_correct_database()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑

#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ QR-–∫–æ–¥–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import sqlite3

def test_real_qr_code():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–∞–ª—å–Ω–æ–≥–æ QR-–∫–æ–¥–∞"""
    print("üß™ –¢–ï–°–¢ –†–ï–ê–õ–¨–ù–û–ì–û QR-–ö–û–î–ê –°–û–¢–†–£–î–ù–ò–ö–ê")
    print("=" * 50)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Ä–µ–∞–ª—å–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('bot_database.db')
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤
        cur.execute("SELECT unique_code, full_name, short_name FROM staff WHERE status = 'active'")
        active_staff = cur.fetchall()
        
        print("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏:")
        for staff in active_staff:
            print(f"  ‚Ä¢ {staff['full_name']} ‚Üí –∫–æ–¥: {staff['unique_code']}")
        
        if not active_staff:
            print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤!")
            return
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∫–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∞
        test_code = active_staff[0]['unique_code']
        test_name = active_staff[0]['full_name']
        
        print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–¥: {test_code} (—Å–æ—Ç—Ä—É–¥–Ω–∏–∫: {test_name})")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ handle_start
        payload = f"w_{test_code}"
        print(f"üì± QR-—Å—Å—ã–ª–∫–∞: https://t.me/bot?start={payload}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –∏–∑ payload
        if payload.startswith('w_'):
            staff_code = payload.replace('w_', '')
            print(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∫–æ–¥: {staff_code}")
            
            # –ò—â–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            cur.execute("SELECT * FROM staff WHERE unique_code = ? AND status = 'active'", (staff_code,))
            staff_member = cur.fetchone()
            
            if staff_member:
                print(f"‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω:")
                print(f"   ID: {staff_member['staff_id']}")
                print(f"   –ò–º—è: {staff_member['full_name']}")
                print(f"   –ö—Ä–∞—Ç–∫–æ–µ –∏–º—è: {staff_member['short_name']}")
                print(f"   –ö–æ–¥: {staff_member['unique_code']}")
                print(f"   –°—Ç–∞—Ç—É—Å: {staff_member['status']}")
                print(f"   Telegram ID: {staff_member['telegram_id']}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                test_user_id = 999999
                source = f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {staff_member['short_name']}"
                brought_by_staff_id = staff_member['staff_id']
                
                print(f"\nüìù –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
                print(f"   User ID: {test_user_id}")
                print(f"   Source: {source}")
                print(f"   Brought by staff ID: {brought_by_staff_id}")
                
                print(f"\nüéâ QR-–∫–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
                
            else:
                print(f"‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ù–ï –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–æ–¥–∞: {staff_code}")
                print("üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                print("   ‚Ä¢ –ö–æ–¥ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π")
                print("   ‚Ä¢ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
                print("   ‚Ä¢ –û—à–∏–±–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

def test_with_user_codes():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å –∫–æ–¥–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å"""
    print("\nüîß –¢–ï–°–¢ –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ú–ò –ö–û–î–ê–ú–ò")
    print("=" * 50)
    
    # –ö–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    test_codes = ['IVAN2024', 'MARIA2024', 'ALEX2024', 'ELENA2024', '–¢–ï–°–¢2024']
    
    try:
        conn = sqlite3.connect('bot_database.db')
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()
        
        for code in test_codes:
            print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–¥: {code}")
            
            cur.execute("SELECT * FROM staff WHERE unique_code = ? AND status = 'active'", (code,))
            staff_member = cur.fetchone()
            
            if staff_member:
                print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω: {staff_member['full_name']}")
                print(f"     Source –±—É–¥–µ—Ç: –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {staff_member['short_name']}")
                print(f"     Staff ID: {staff_member['staff_id']}")
            else:
                print(f"  ‚ùå –ù–ï –Ω–∞–π–¥–µ–Ω!")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    test_real_qr_code()
    test_with_user_codes()

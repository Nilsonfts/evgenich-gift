#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã QR-–∫–æ–¥–æ–≤
"""

import sqlite3
import datetime
import random
import string

def create_test_database():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö."""
    print("üî® –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    conn = sqlite3.connect('bot_database.db')
    conn.row_factory = sqlite3.Row
    cur = conn.cursor()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É staff
    cur.execute('''
        CREATE TABLE IF NOT EXISTS staff (
            staff_id INTEGER PRIMARY KEY AUTOINCREMENT,
            full_name TEXT NOT NULL,
            short_name TEXT NOT NULL,
            unique_code TEXT NOT NULL UNIQUE,
            position TEXT NOT NULL,
            status TEXT DEFAULT 'active',
            telegram_id INTEGER,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É users
    cur.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            status TEXT DEFAULT 'registered',
            source TEXT,
            referrer_id INTEGER,
            brought_by_staff_id INTEGER,
            signup_date DATETIME DEFAULT CURRENT_TIMESTAMP,
            redeem_date DATETIME,
            FOREIGN KEY (brought_by_staff_id) REFERENCES staff (staff_id)
        )
    ''')
    
    print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    test_staff = [
        ("–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤", "–ò–≤–∞–Ω –ü.", "IVAN2024", "–û—Ñ–∏—Ü–∏–∞–Ω—Ç"),
        ("–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞", "–ú–∞—Ä–∏—è –°.", "MARIA2024", "–ë–∞—Ä–º–µ–Ω"),
        ("–ê–ª–µ–∫—Å–µ–π –ö–æ–∑–ª–æ–≤", "–ê–ª–µ–∫—Å–µ–π –ö.", "ALEX2024", "–ú–µ–Ω–µ–¥–∂–µ—Ä"),
        ("–ï–ª–µ–Ω–∞ –í–æ–ª–∫–æ–≤–∞", "–ï–ª–µ–Ω–∞ –í.", "ELENA2024", "–û—Ñ–∏—Ü–∏–∞–Ω—Ç"),
    ]
    
    for full_name, short_name, code, position in test_staff:
        try:
            cur.execute('''
                INSERT OR IGNORE INTO staff (full_name, short_name, unique_code, position, status)
                VALUES (?, ?, ?, ?, 'active')
            ''', (full_name, short_name, code, position))
            print(f"  ‚ûï –î–æ–±–∞–≤–ª–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: {full_name} (–∫–æ–¥: {code})")
        except sqlite3.IntegrityError:
            print(f"  ‚ö†Ô∏è  –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {full_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    print("\nüì± –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    cur.execute("SELECT staff_id, short_name FROM staff WHERE status = 'active'")
    staff_list = cur.fetchall()
    
    current_time = datetime.datetime.now()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    for day in range(7):
        signup_date = current_time - datetime.timedelta(days=day)
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Ç —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        test_users = [
            # –ü—Ä—è–º—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
            (100000 + day * 10 + 1, f"user{day}1", "–¢–µ—Å—Ç1", "direct", None, None),
            (100000 + day * 10 + 2, f"user{day}2", "–¢–µ—Å—Ç2", "qr_bar", None, None),
            
            # –ü–µ—Ä–µ—Ö–æ–¥—ã –ø–æ QR-–∫–æ–¥–∞–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏)
        ]
        
        if staff_list:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã –ø–æ QR-–∫–æ–¥–∞–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
            for i, staff in enumerate(staff_list):
                if random.random() < 0.7:  # 70% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∞
                    user_id = 100000 + day * 10 + 10 + i
                    source = f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {staff['short_name']}"
                    test_users.append((
                        user_id, 
                        f"staff_user{day}{i}", 
                        f"–ì–æ—Å—Ç—å{i}", 
                        source, 
                        None, 
                        staff['staff_id']
                    ))
        
        for user_id, username, first_name, source, referrer_id, brought_by_staff_id in test_users:
            try:
                cur.execute('''
                    INSERT OR IGNORE INTO users 
                    (user_id, username, first_name, status, source, referrer_id, brought_by_staff_id, signup_date)
                    VALUES (?, ?, ?, 'issued', ?, ?, ?, ?)
                ''', (user_id, username, first_name, source, referrer_id, brought_by_staff_id, signup_date))
                
                print(f"  ‚ûï –î–µ–Ω—å {day}: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (–∏—Å—Ç–æ—á–Ω–∏–∫: {source})")
            except sqlite3.IntegrityError:
                pass  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –∫–æ–¥–∞–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    print("\n‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –∫–æ–¥–∞–º–∏...")
    
    invalid_examples = [
        (200001, "bad_user1", "–û—à–∏–±–∫–∞1", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π_—Å–æ—Ç—Ä—É–¥–Ω–∏–∫_WRONG123"),
        (200002, "bad_user2", "–û—à–∏–±–∫–∞2", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π_—Å–æ—Ç—Ä—É–¥–Ω–∏–∫_FAKE456"),
    ]
    
    for user_id, username, first_name, source in invalid_examples:
        try:
            cur.execute('''
                INSERT OR IGNORE INTO users 
                (user_id, username, first_name, status, source, signup_date)
                VALUES (?, ?, ?, 'registered', ?, ?)
            ''', (user_id, username, first_name, source, current_time))
            print(f"  ‚ûï –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥: {username} (–∏—Å—Ç–æ—á–Ω–∏–∫: {source})")
        except sqlite3.IntegrityError:
            pass
    
    conn.commit()
    conn.close()
    
    print("\n‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞!")
    print("\nüéØ –ß—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ:")
    print("  ‚Ä¢ 4 —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å QR-–∫–æ–¥–∞–º–∏")
    print("  ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Ç —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∑–∞ 7 –¥–Ω–µ–π")
    print("  ‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã —É—Å–ø–µ—à–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ QR-–∫–æ–¥–∞–º")
    print("  ‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö QR-–∫–æ–¥–æ–≤")
    
    return True

def show_qr_codes():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç QR-–∫–æ–¥—ã –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤."""
    print("\nüîó QR-–ö–û–î–´ –°–û–¢–†–£–î–ù–ò–ö–û–í:")
    print("=" * 50)
    
    conn = sqlite3.connect('bot_database.db')
    conn.row_factory = sqlite3.Row
    cur = conn.cursor()
    
    cur.execute("SELECT * FROM staff WHERE status = 'active'")
    staff_list = cur.fetchall()
    
    for staff in staff_list:
        qr_url = f"https://t.me/EvgenichTapBarBot?start=w_{staff['unique_code']}"
        print(f"üë§ {staff['full_name']} ({staff['position']})")
        print(f"   –ö–æ–¥: {staff['unique_code']}")
        print(f"   QR-—Å—Å—ã–ª–∫–∞: {qr_url}")
        print()
    
    conn.close()

if __name__ == "__main__":
    print("üß™ –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ô –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    create_test_database()
    show_qr_codes()
    
    print("üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É:")
    print("   python simple_qr_test.py")
    print("=" * 50)

import logging
import datetime
from telebot import types
import pytz

# --- –ò–ó–ú–ï–ù–ï–ù–ù–´–ô –ö–û–î: –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã ---
from config import (
    CHANNEL_ID, HELLO_STICKER_ID, NASTOYKA_STICKER_ID, THANK_YOU_STICKER_ID,
    FRIEND_BONUS_STICKER_ID, ADMIN_IDS, REPORT_CHAT_ID, GOOGLE_SHEET_KEY, MENU_URL
)
from g_sheets import (
    get_reward_status, add_new_user, update_status, delete_user,
    get_referrer_id_from_user, count_successful_referrals, mark_referral_bonus_claimed,
    get_report_data_for_period, get_stats_by_source, get_weekly_cohort_data, get_top_referrers,
    get_sheet
)
# --- –ù–û–í–´–ô –ö–û–î: –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –º–µ–Ω—é –∏ –ò–ò ---
from menu_nastoiki import MENU_DATA
from ai_assistant import get_ai_recommendation


def register_handlers(bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–Ω–æ–ø–æ–∫."""

    # === –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ ===
    @bot.message_handler(commands=['start'])
    def handle_start(message: types.Message):
        user_id = message.from_user.id
        status = get_reward_status(user_id)
        
        # –°—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –£–ñ–ï –ø–æ–ª—É—á–∏–ª –Ω–∞—Å—Ç–æ–π–∫—É
        if status == 'redeemed':
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            menu_button = types.KeyboardButton("üìñ –ú–µ–Ω—é")
            friend_button = types.KeyboardButton("ü§ù –ü—Ä–∏–≤–µ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∏—â–∞")
            ai_help_button = types.KeyboardButton("ü§ñ –ß—Ç–æ –º–Ω–µ –≤—ã–ø–∏—Ç—å?")
            
            keyboard.row(menu_button, friend_button)
            keyboard.row(ai_help_button)

            if user_id in ADMIN_IDS:
                restart_button = types.KeyboardButton("/restart")
                keyboard.row(restart_button)
            
            info_text = (
                "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, —Ç–æ–≤–∞—Ä–∏—â! –†–∞–¥—ã –≤–∏–¥–µ—Ç—å —Å–Ω–æ–≤–∞. üòâ\n\n"
                "–ù–∞–∂–∏–º–∞–π ¬´üìñ –ú–µ–Ω—é¬ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ **–ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –≤ —á–∞—Ç, —á–µ–≥–æ –±—ã —Ç–µ–±–µ —Ö–æ—Ç–µ–ª–æ—Å—å** "
                "(–Ω–∞–ø—Ä–∏–º–µ—Ä: _¬´—Ö–æ—á—É —á—Ç–æ-–Ω–∏–±—É–¥—å –∫–∏—Å–ª–æ–µ –∏ —è–≥–æ–¥–Ω–æ–µ¬ª_), –∏ —è –ø–æ–º–æ–≥—É —Å –≤—ã–±–æ—Ä–æ–º!"
            )
            bot.send_message(user_id, info_text, reply_markup=keyboard, parse_mode="Markdown")
            return

        # –°—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –µ—â–µ –ù–ï –ø–æ–ª—É—á–∞–ª –Ω–∞—Å—Ç–æ–π–∫—É (not_found, registered, issued)
        if status == 'not_found':
            referrer_id = None
            source = 'direct'
            args = message.text.split()
            if len(args) > 1:
                payload = args[1]
                if payload.startswith('ref_'):
                    try:
                        referrer_id = int(payload.replace('ref_', ''))
                        source = '–†–µ—Ñ–µ—Ä–∞–ª'
                    except (ValueError, IndexError): pass
                else:
                    allowed_sources = {'qr_tv': 'QR —Å –¢–í', 'qr_bar': 'QR –Ω–∞ –±–∞—Ä–µ', 'qr_toilet': 'QR –≤ —Ç—É–∞–ª–µ—Ç–µ', 'vk': 'VK', 'inst': 'Instagram', 'flyer': '–õ–∏—Å—Ç–æ–≤–∫–∏', 'site': '–°–∞–π—Ç'}
                    if payload in allowed_sources:
                        source = allowed_sources[payload]
            
            add_new_user(user_id, message.from_user.username or "N/A", message.from_user.first_name, source, referrer_id)
            if referrer_id:
                bot.send_message(user_id, "ü§ù –ü—Ä–∏–≤–µ—Ç, —Ç–æ–≤–∞—Ä–∏—â! –í–∏–∂—É, —Ç–µ–±—è –Ω–∞–ø—Ä–∞–≤–∏–ª —Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–π –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω. –ü—Ä–æ—Ö–æ–¥–∏, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è.")

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        gift_button = types.KeyboardButton("ü•É –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç–æ–π–∫—É –ø–æ —Ç–∞–ª–æ–Ω—É")
        keyboard.add(gift_button)
        bot.send_message(message.chat.id, "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, —Ç–æ–≤–∞—Ä–∏—â! –ü–∞—Ä—Ç–∏—è –¥–∞–µ—Ç —Ç–µ–±–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —à–∞–Ω—Å: –æ–±–º–µ–Ω—è—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –¥–µ—Ñ–∏—Ü–∏—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç ‚Äî —Ñ–∏—Ä–º–µ–Ω–Ω—É—é –Ω–∞—Å—Ç–æ–π–∫—É ¬´–ï–≤–≥–µ–Ω–∏—á¬ª! –ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, –Ω–µ —Ç—è–Ω–∏.", reply_markup=keyboard)

    @bot.message_handler(commands=['friend'])
    @bot.message_handler(func=lambda message: message.text == "ü§ù –ü—Ä–∏–≤–µ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∏—â–∞")
    def handle_friend_command(message: types.Message):
        user_id = message.from_user.id
        bot_username = bot.get_me().username
        ref_link = f"https://t.me/{bot_username}?start=ref_{user_id}"
        text = (
            "üí™ –†–µ—à–∏–ª –ø–µ—Ä–µ–≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–ª–∞–Ω, —Ç–æ–≤–∞—Ä–∏—â? –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n"
            "–í–æ—Ç —Ç–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–∏–≤–∞ –Ω–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–æ–π—Ü–∞. –ù–∞–∂–º–∏ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å:\n"
            f"`{ref_link}`\n\n"
            "–û—Ç–ø—Ä–∞–≤—å –µ–µ –¥—Ä—É–≥—É. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –ø—Ä–æ–π–¥–µ—Ç –≤—Å–µ –∏–Ω—Å—Ç–∞–Ω—Ü–∏–∏ –∏ –ø–æ–ª—É—á–∏—Ç —Å–≤–æ—é –Ω–∞—Å—Ç–æ–π–∫—É (–∏ –≤—ã–¥–µ—Ä–∂–∏—Ç '–∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫' –≤ 24 —á–∞—Å–∞), –ø–∞—Ä—Ç–∏—è —Ç–µ–±—è –æ—Ç–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç **–µ—â–µ –æ–¥–Ω–æ–π –¥–µ—Ñ–∏—Ü–∏—Ç–Ω–æ–π –Ω–∞—Å—Ç–æ–π–∫–æ–π**! ü•É\n\n"
            "*–ü–æ–º–Ω–∏, –ø–ª–∞–Ω ‚Äî –Ω–µ –±–æ–ª–µ–µ 5 —Ç–æ–≤–∞—Ä–∏—â–µ–π.*"
        )
        bot.send_message(user_id, text, parse_mode="Markdown")

    @bot.message_handler(commands=['channel'])
    def handle_channel_command(message: types.Message):
        keyboard = types.InlineKeyboardMarkup()
        channel_url = f"https://t.me/{CHANNEL_ID.lstrip('@')}"
        url_button = types.InlineKeyboardButton(text="‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª", url=channel_url)
        keyboard.add(url_button)
        bot.send_message(message.chat.id, "–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª:", reply_markup=keyboard)

    # --- –ò–ó–ú–ï–ù–ï–ù–ù–´–ô –ö–û–î: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —Ç–µ–ø–µ—Ä—å –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±–æ—Ä ---
    @bot.message_handler(commands=['menu'])
    @bot.message_handler(func=lambda message: message.text == "üìñ –ú–µ–Ω—é")
    def handle_menu_command(message: types.Message):
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        nastoiki_button = types.InlineKeyboardButton(text="ü•É –ú–µ–Ω—é –Ω–∞—Å—Ç–æ–µ–∫ (–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ)", callback_data="menu_nastoiki_main")
        full_menu_button = types.InlineKeyboardButton(text="üìñ –ü–æ–ª–Ω–æ–µ –º–µ–Ω—é –±–∞—Ä–∞ (–°–∞–π—Ç)", url=MENU_URL)
        keyboard.add(nastoiki_button, full_menu_button)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –º–µ–Ω—é, —Ç–æ–≤–∞—Ä–∏—â:", reply_markup=keyboard)

    @bot.message_handler(commands=['help'])
    def handle_help_command(message: types.Message):
        user_id = message.from_user.id
        help_text = (
            "**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –±–æ—Ç—É ¬´–ï–≤–≥–µ–Ω–∏—á –ù–∞—Å—Ç–∞–∏–≤–∞–µ—Ç¬ª**\n\n"
            "–Ø ‚Äî –≤–∞—à –ø–∞—Ä—Ç–∏–π–Ω—ã–π —Ç–æ–≤–∞—Ä–∏—â, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–¥–∞–µ—Ç –¥–µ—Ñ–∏—Ü–∏—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç (—Ñ–∏—Ä–º–µ–Ω–Ω—É—é –Ω–∞—Å—Ç–æ–π–∫—É) –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.\n\n"
            "**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
            "‚Ä¢ `/start` - –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ –∏ –ø–æ–ª—É—á–∏—Ç—å —Ç–∞–ª–æ–Ω –Ω–∞ –Ω–∞—Å—Ç–æ–π–∫—É.\n"
            "‚Ä¢ `/menu` - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é –Ω–∞—à–µ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è.\n"
            "‚Ä¢ `/channel` - –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π Telegram-–∫–∞–Ω–∞–ª.\n"
            "‚Ä¢ `/friend` - –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –∑–∞ —ç—Ç–æ –±–æ–Ω—É—Å.\n"
            "‚Ä¢ `/help` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ."
        )
        if user_id in ADMIN_IDS:
            admin_help_text = (
                "\n\n**üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
                "‚Ä¢ `/admin` - –û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –æ—Ç—á–µ—Ç–∞–º–∏.\n"
                "‚Ä¢ `/restart` - –°–±—Ä–æ—Å–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!)."
            )
            help_text += admin_help_text
        bot.send_message(user_id, help_text, parse_mode="Markdown")

    # --- –ù–û–í–´–ô –ö–û–î: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏-–ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –ò–ò ---
    @bot.message_handler(func=lambda message: message.text == "ü§ñ –ß—Ç–æ –º–Ω–µ –≤—ã–ø–∏—Ç—å?")
    def handle_ai_prompt_button(message: types.Message):
        bot.reply_to(message, "–°–º–µ–ª–æ –ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è! –ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–ø–æ—Å–æ–≤–µ—Ç—É–π —á—Ç–æ-–Ω–∏–±—É–¥—å —Å–ª–∞–¥–∫–æ–µ –∏ —Å–ª–∏–≤–æ—á–Ω–æ–µ¬ª –∏–ª–∏ ¬´–∏—â—É —Å–∞–º—É—é —è–¥—Ä—ë–Ω—É—é –Ω–∞—Å—Ç–æ–π–∫—É¬ª.")

    @bot.message_handler(func=lambda message: message.text == "ü•É –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç–æ–π–∫—É –ø–æ —Ç–∞–ª–æ–Ω—É")
    def handle_get_gift_press(message: types.Message):
        user_id = message.from_user.id
        status = get_reward_status(user_id)
        if status in ['issued', 'redeemed']:
            bot.send_message(user_id, "–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ —Å–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏! üòâ")
            return
        try:
            chat_member = bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
            if chat_member.status in ['member', 'administrator', 'creator']:
                bot.send_message(user_id, "–£–≤–∞–∂–∞—é ‚Äî –ø–æ–¥–ø–∏—Å–∞–ª—Å—è! –ü–æ–ª—É—á–∞–π –≥–æ—Å—Ç–∏–Ω–µ—Ü.")
                issue_coupon(bot, user_id, message.from_user.username, message.from_user.first_name, message.chat.id)
                return
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}: {e}")
        welcome_text = ("–û—Ç–ª–∏—á–Ω–æ! üëç\n\n"
                        "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç–æ–π–∫—É, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª. –≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ —Å–µ–∫—É–Ω–¥—É.\n\n"
                        "–ö–æ–≥–¥–∞ –ø–æ–¥–ø–∏—à–µ—à—å—Å—è ‚Äî –Ω–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è¬ª –∑–¥–µ—Å—å –∂–µ.")
        inline_keyboard = types.InlineKeyboardMarkup(row_width=1)
        channel_url = f"https://t.me/{CHANNEL_ID.lstrip('@')}"
        subscribe_button = types.InlineKeyboardButton(text="‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞–Ω–∞–ª—É", url=channel_url)
        check_button = types.InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å!", callback_data="check_subscription")
        inline_keyboard.add(subscribe_button, check_button)
        try:
            bot.send_sticker(message.chat.id, HELLO_STICKER_ID)
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä: {e}")
        bot.send_message(message.chat.id, welcome_text, reply_markup=inline_keyboard, parse_mode="Markdown")

    @bot.callback_query_handler(func=lambda call: call.data == "check_subscription")
    def handle_check_subscription(call: types.CallbackQuery):
        user_id = call.from_user.id
        bot.answer_callback_query(call.id, text="–ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É...")
        try:
            chat_member = bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
            if chat_member.status in ['member', 'administrator', 'creator']:
                bot.delete_message(call.message.chat.id, call.message.message_id)
                issue_coupon(bot, user_id, call.from_user.username, call.from_user.first_name, call.message.chat.id)
            else:
                bot.answer_callback_query(call.id, "–ù—É –∫—É–¥–∞ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏, —Ä–æ–¥–Ω–æ–π? –¢–∞–º –≤—Å—ë –ø–æ-—á–µ—Å—Ç–Ω–æ–º—É.", show_alert=True)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}: {e}")
            bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

    # --- –ò–ó–ú–ï–ù–ï–ù–ù–´–ô –ö–û–î: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã —Ç–µ–ø–µ—Ä—å –≤—ã–¥–∞–µ—Ç –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ —Ç–µ–∫—Å—Ç ---
    @bot.callback_query_handler(func=lambda call: call.data == "redeem_reward")
    def handle_redeem_reward(call: types.CallbackQuery):
        user_id = call.from_user.id
        if update_status(user_id, 'redeemed'):
            final_text = ("‚úÖ –ù—É –≤–æ—Ç –∏ –±–∞—Ö–Ω—É–ª–∏!\n\n"
                          "–ú–µ–∂–¥—É –ø–µ—Ä–≤–æ–π –∏ –≤—Ç–æ—Ä–æ–π, –∫–∞–∫ –∏–∑–≤–µ—Å—Ç–Ω–æ, –ø–µ—Ä–µ—Ä—ã–≤—á–∏–∫ –Ω–µ–±–æ–ª—å—à–æ–π‚Ä¶\n"
                          "üç∑ –ñ–¥—ë–º —Ç–µ–±—è –∑–∞ —Å–ª–µ–¥—É—é—â–µ–π!")
            bot.delete_message(call.message.chat.id, call.message.message_id)
            bot.send_message(call.message.chat.id, final_text)
            try:
                bot.send_sticker(call.message.chat.id, THANK_YOU_STICKER_ID)
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—â–∞–ª—å–Ω—ã–π —Å—Ç–∏–∫–µ—Ä: {e}")
            
            final_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            menu_button = types.KeyboardButton("üìñ –ú–µ–Ω—é")
            friend_button = types.KeyboardButton("ü§ù –ü—Ä–∏–≤–µ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∏—â–∞")
            ai_help_button = types.KeyboardButton("ü§ñ –ß—Ç–æ –º–Ω–µ –≤—ã–ø–∏—Ç—å?")
            
            final_keyboard.row(menu_button, friend_button)
            final_keyboard.row(ai_help_button)

            if user_id in ADMIN_IDS:
                restart_button = types.KeyboardButton("/restart")
                final_keyboard.row(restart_button)
            
            info_text = (
                "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, —Ç–æ–≤–∞—Ä–∏—â.\n\n"
                "–ù–∞–∂–∏–º–∞–π ¬´üìñ –ú–µ–Ω—é¬ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ **–ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –≤ —á–∞—Ç, —á–µ–≥–æ –±—ã —Ç–µ–±–µ —Ö–æ—Ç–µ–ª–æ—Å—å** "
                "(–Ω–∞–ø—Ä–∏–º–µ—Ä: _¬´—Ö–æ—á—É —á—Ç–æ-–Ω–∏–±—É–¥—å –∫–∏—Å–ª–æ–µ –∏ —è–≥–æ–¥–Ω–æ–µ¬ª_), –∏ —è –ø–æ–º–æ–≥—É —Å –≤—ã–±–æ—Ä–æ–º!"
            )
            bot.send_message(user_id, info_text, reply_markup=final_keyboard, parse_mode="Markdown")

            referrer_id = get_referrer_id_from_user(user_id)
            if referrer_id:
                logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–≥–∞—Å–∏–ª –Ω–∞–≥—Ä–∞–¥—É. –í–Ω–µ—à–Ω–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–æ–ª–∂–µ–Ω –±—É–¥–µ—Ç –µ–≥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–ª—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ {referrer_id} —á–µ—Ä–µ–∑ 24—á.")
        else:
            bot.answer_callback_query(call.id, "–≠—Ç–∞ –Ω–∞–≥—Ä–∞–¥–∞ —É–∂–µ –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞.", show_alert=True)

    # --- –ù–û–í–´–ô –ö–û–î: –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ú–ï–ù–Æ –ù–ê–°–¢–û–ï–ö ---
    @bot.callback_query_handler(func=lambda call: call.data == "menu_nastoiki_main")
    def callback_menu_nastoiki_main(call: types.CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –Ω–∞—Å—Ç–æ–µ–∫."""
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        buttons = []
        for index, category in enumerate(MENU_DATA):
            buttons.append(
                types.InlineKeyboardButton(
                    text=category['title'],
                    callback_data=f"menu_category_{index}"
                )
            )
        keyboard.add(*buttons)
        try:
            bot.edit_message_text(
                "**–ú–µ–Ω—é –Ω–∞—Å—Ç–æ–µ–∫ ¬´–ï–≤–≥–µ–Ω–∏—á¬ª**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        except Exception: # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ
            bot.send_message(call.message.chat.id, "**–ú–µ–Ω—é –Ω–∞—Å—Ç–æ–µ–∫ ¬´–ï–µ–Ω–∏—á¬ª**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard, parse_mode="Markdown")
        bot.answer_callback_query(call.id)


    @bot.callback_query_handler(func=lambda call: call.data.startswith("menu_category_"))
    def callback_menu_category(call: types.CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç–æ–µ–∫ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        category_index = int(call.data.split("_")[2])
        category = MENU_DATA[category_index]

        text = f"**{category['title']}**\n_{category.get('category_narrative', '')}_\n\n"
        for item in category['items']:
            text += f"‚Ä¢ **{item['name']}** ‚Äî {item['price']}\n_{item['narrative_desc']}_\n\n"

        keyboard = types.InlineKeyboardMarkup()
        back_button = types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="menu_nastoiki_main")
        keyboard.add(back_button)

        bot.edit_message_text(
            text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        bot.answer_callback_query(call.id)


    # === –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ===
    @bot.message_handler(commands=['admin'])
    def handle_admin(message: types.Message):
        if message.from_user.id not in ADMIN_IDS:
            bot.reply_to(message, "‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        reports_button = types.InlineKeyboardButton("üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—Ç—á–µ—Ç—ã", callback_data="admin_menu_reports")
        analytics_button = types.InlineKeyboardButton("üìà –ì–ª—É–±–æ–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="admin_menu_analytics")
        leaderboard_button = types.InlineKeyboardButton("üèÜ –î–æ—Å–∫–∞ –ø–æ—á–µ—Ç–∞ –≤–µ—Ä–±–æ–≤—â–∏–∫–æ–≤", callback_data="admin_action_leaderboard")
        keyboard.add(reports_button, analytics_button, leaderboard_button)
        bot.send_message(message.chat.id, "üëë **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏**", reply_markup=keyboard, parse_mode="Markdown")

    @bot.message_handler(commands=['restart'])
    def handle_restart_command(message: types.Message):
        if message.from_user.id not in ADMIN_IDS:
            return
        user_id = message.from_user.id
        success, response_message = delete_user(user_id)
        if success:
            bot.reply_to(message, f"‚úÖ –£—Å–ø–µ—Ö: {response_message}\n–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É /start.")
        else:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø—Ä–æ—Ñ–∏–ª—è: {response_message}")

    @bot.callback_query_handler(func=lambda call: call.data.startswith('admin_'))
    def handle_admin_callbacks(call: types.CallbackQuery):
        if call.from_user.id not in ADMIN_IDS:
            bot.answer_callback_query(call.id, "‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return
        
        action = call.data
        main_menu_text = "üëë **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏**"
        
        if action == 'admin_menu_main':
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            reports_button = types.InlineKeyboardButton("üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—Ç—á–µ—Ç—ã", callback_data="admin_menu_reports")
            analytics_button = types.InlineKeyboardButton("üìà –ì–ª—É–±–æ–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="admin_menu_analytics")
            leaderboard_button = types.InlineKeyboardButton("üèÜ –î–æ—Å–∫–∞ –ø–æ—á–µ—Ç–∞ –≤–µ—Ä–±–æ–≤—â–∏–∫–æ–≤", callback_data="admin_action_leaderboard")
            keyboard.add(reports_button, analytics_button, leaderboard_button)
            try: bot.edit_message_text(main_menu_text, call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode="Markdown")
            except: pass
            return
        elif action == 'admin_menu_reports':
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            today_report_button = types.InlineKeyboardButton("üìä –û—Ç—á–µ—Ç –∑–∞ —Ç–µ–∫—É—â—É—é —Å–º–µ–Ω—É", callback_data="admin_report_today")
            week_report_button = types.InlineKeyboardButton("üìÖ –û—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é", callback_data="admin_report_week")
            month_report_button = types.InlineKeyboardButton("üóìÔ∏è –û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü", callback_data="admin_report_month")
            back_button = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_menu_main")
            keyboard.add(today_report_button, week_report_button, month_report_button, back_button)
            bot.edit_message_text("**–ú–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤**", call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode="Markdown")
            return
        elif action == 'admin_menu_analytics':
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            source_button = types.InlineKeyboardButton("–ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º", callback_data="admin_action_sources")
            cohort_button = types.InlineKeyboardButton("–ö–æ–≥–æ—Ä—Ç—ã –ø–æ –Ω–µ–¥–µ–ª—è–º", callback_data="admin_action_cohorts")
            back_button = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_menu_main")
            keyboard.add(source_button, cohort_button, back_button)
            bot.edit_message_text("**–ú–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏**", call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode="Markdown")
            return

        if action == 'admin_action_leaderboard':
            bot.answer_callback_query(call.id, "–°–æ—Å—Ç–∞–≤–ª—è—é —Ä–µ–π—Ç–∏–Ω–≥...")
            top_list = get_top_referrers(5)
            if not top_list:
                bot.send_message(call.message.chat.id, "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏–≤–µ–ª –¥—Ä—É–∑–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –±—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞—Å—Ç–æ–π–∫—É.")
                return
            response = "**üèÜ –î–æ—Å–∫–∞ –ü–æ—á–µ—Ç–∞ —É–¥–∞—Ä–Ω–∏–∫–æ–≤ —Ç—Ä—É–¥–∞:**\n(—É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥—Ä—É–∑—å—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–≥–∞—Å–∏–ª–∏ –Ω–∞—Å—Ç–æ–π–∫—É)\n\n"
            medals = ["ü•á", "ü•à", "ü•â", "4.", "5."]
            for i, (name, count) in enumerate(top_list):
                response += f"{medals[i]} –¢–æ–≤–∞—Ä–∏—â **{name}** ‚Äî {count} —á–µ–ª.\n"
            bot.send_message(call.message.chat.id, response, parse_mode="Markdown")
        elif action == 'admin_action_sources':
            bot.answer_callback_query(call.id, "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏—Å—Ç–æ—á–Ω–∏–∫–∏...")
            stats = get_stats_by_source()
            if not stats:
                bot.send_message(call.message.chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º.")
                return
            response = "**üìà –ê–Ω–∞–ª–∏–∑ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º (–∑–∞ –≤—Å–µ –≤—Ä–µ–º—è):**\n\n"
            sorted_stats = sorted(stats.items(), key=lambda item: item[1]['issued'], reverse=True)
            for source, data in sorted_stats:
                conversion = round((data['redeemed'] / data['issued']) * 100, 1) if data['issued'] > 0 else 0
                response += f"**{source}:**\n  –ü–æ–¥–ø–∏—Å–∞–ª–æ—Å—å: {data['issued']}\n  –ü–æ–≥–∞—à–µ–Ω–æ: {data['redeemed']} (–ö–æ–Ω–≤–µ—Ä—Å–∏—è: {conversion}%)\n\n"
            bot.send_message(call.message.chat.id, response, parse_mode="Markdown")
        elif action == 'admin_action_cohorts':
            bot.answer_callback_query(call.id, "–°—Ä–∞–≤–Ω–∏–≤–∞—é –∫–æ–≥–æ—Ä—Ç—ã...")
            cohorts = get_weekly_cohort_data()
            if not cohorts:
                bot.send_message(call.message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–≥–æ—Ä—Ç.")
                return
            response = "**üóìÔ∏è –ê–Ω–∞–ª–∏–∑ –ø–æ –Ω–µ–¥–µ–ª—å–Ω—ã–º –∫–æ–≥–æ—Ä—Ç–∞–º:**\n(—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º, –∫–∞–∫ —Ö–æ—Ä–æ—à–æ –≥–æ—Å—Ç–∏ —Ä–∞–∑–Ω—ã—Ö –Ω–µ–¥–µ–ª—å –¥–æ—Ö–æ–¥—è—Ç –¥–æ –±–∞—Ä–∞)\n\n"
            for cohort in cohorts:
                if cohort['issued'] == 0: continue
                conversion = round((cohort['redeemed'] / cohort['issued']) * 100, 1)
                response += f"**–ù–µ–¥–µ–ª—è ({cohort['week']}):**\n  –ù–æ–≤—ã—Ö: {cohort['issued']}, –ü–æ–≥–∞—à–µ–Ω–æ: {cohort['redeemed']} (–ö–æ–Ω–≤–µ—Ä—Å–∏—è: {conversion}%)\n\n"
            bot.send_message(call.message.chat.id, response, parse_mode="Markdown")
        
        elif call.data.startswith('admin_report'):
            period = call.data.split('_')[-1]
            tz_moscow = pytz.timezone('Europe/Moscow')
            now_moscow = datetime.datetime.now(tz_moscow)
            end_time = now_moscow
            if period == 'today':
                if now_moscow.hour < 12: start_time = (now_moscow - datetime.timedelta(days=1)).replace(hour=12, minute=0, second=0, microsecond=0)
                else: start_time = now_moscow.replace(hour=12, minute=0, second=0, microsecond=0)
            elif period == 'week': start_time = now_moscow - datetime.timedelta(days=7)
            elif period == 'month': start_time = now_moscow - datetime.timedelta(days=30)
            else: return
            send_report(bot, call.message.chat.id, start_time, end_time)

    # === –°–ö–†–´–¢–´–ï –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê ===
    @bot.message_handler(commands=['send_daily_report'])
    def handle_send_report_command(message):
        tz_moscow = pytz.timezone('Europe/Moscow')
        now_moscow = datetime.datetime.now(tz_moscow)
        end_time = now_moscow.replace(hour=6, minute=0, second=0, microsecond=0)
        start_time = (end_time - datetime.timedelta(days=1)).replace(hour=12, minute=0, second=0, microsecond=0)
        send_report(bot, REPORT_CHAT_ID, start_time, end_time)

    @bot.message_handler(commands=['check_referral_and_give_bonus'])
    def handle_check_referral_command(message):
        try:
            parts = message.text.split()
            if len(parts) < 3: return
            referred_user_id, referrer_id = int(parts[1]), int(parts[2])
            member = bot.get_chat_member(CHANNEL_ID, referred_user_id)
            if member.status not in ['member', 'administrator', 'creator']:
                logging.info(f"–†–µ—Ñ–µ—Ä–∞–ª {referred_user_id} –æ—Ç–ø–∏—Å–∞–ª—Å—è.")
                return
            if count_successful_referrals(referrer_id) >= 5:
                logging.info(f"–†–µ—Ñ–µ—Ä–µ—Ä {referrer_id} –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞.")
                return
            bonus_text = ("‚úä –¢–æ–≤–∞—Ä–∏—â! –¢–≤–æ–π –¥—Ä—É–≥ –ø—Ä–æ—è–≤–∏–ª —Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –æ—Å—Ç–∞–ª—Å—è –≤ –Ω–∞—à–∏—Ö —Ä—è–¥–∞—Ö. –ü–∞—Ä—Ç–∏—è —Ç–æ–±–æ–π –≥–æ—Ä–¥–∏—Ç—Å—è!\n\n"
                          "–í–æ—Ç —Ç–≤–æ–π –∑–∞—Å–ª—É–∂–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å. –ü–æ–∫–∞–∂–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–∞—Ä–º–µ–Ω—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å **–µ—â–µ –æ–¥–Ω—É —Ñ–∏—Ä–º–µ–Ω–Ω—É—é –Ω–∞—Å—Ç–æ–π–∫—É**.")
            if FRIEND_BONUS_STICKER_ID:
                try: bot.send_sticker(referrer_id, FRIEND_BONUS_STICKER_ID)
                except Exception as e: logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä –∑–∞ –¥—Ä—É–≥–∞: {e}")
            bot.send_message(referrer_id, bonus_text)
            mark_referral_bonus_claimed(referred_user_id)
            logging.info(f"–ë–æ–Ω—É—Å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ {referred_user_id} —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω {referrer_id}.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º: {e}")

    # === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
    def issue_coupon(bot, user_id, username, first_name, chat_id):
        update_status(user_id, 'issued')
        coupon_text = ("üéâ –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω-—Ç–æ–≤–∞—Ä–∏—â, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n\n"
                       "–¢–µ–±–µ –¥–æ—Å—Ç–∞–ª–∞—Å—å —Ñ–∏—Ä–º–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç–æ–π–∫–∞ ¬´–ï–≤–≥–µ–Ω–∏—á¬ª ‚Äî –ø–æ—á—Ç–∏ –∫–∞–∫ –ø—É—Ç—ë–≤–∫–∞ –≤ –ø–∏–æ–Ω–µ—Ä–ª–∞–≥–µ—Ä—å, —Ç–æ–ª—å–∫–æ –ø–æ–≤–µ—Å–µ–ª–µ–µ.\n\n"
                       "–ß—Ç–æ –¥–µ–ª–∞—Ç—å ‚Äî –∫–æ—Ä–æ—Ç–∫–æ –∏ —è—Å–Ω–æ:\n"
                       "1. –ü–æ–∫–∞–∂–∏ —ç—Ç–æ—Ç —ç–∫—Ä–∞–Ω –±–∞—Ä–º–µ–Ω—É-–¥–µ–∂—É—Ä–Ω–æ–º—É.\n"
                       "2. –ü–æ –µ–≥–æ —Å–∏–≥–Ω–∞–ª—É –∂–º–∏ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É ‚Äî –∏ —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∞–µ—à—å —Å—Ç–æ–ø–∫—É!")
        redeem_keyboard = types.InlineKeyboardMarkup()
        redeem_button = types.InlineKeyboardButton(text="üîí –ù–ê–õ–ò–¢–¨ –ü–†–ò –ë–ê–†–ú–ï–ù–ï", callback_data="redeem_reward")
        redeem_keyboard.add(redeem_button)
        try:
            bot.send_sticker(chat_id, NASTOYKA_STICKER_ID)
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä-–∫—É–ø–æ–Ω: {e}")
        bot.send_message(chat_id, coupon_text, parse_mode="Markdown", reply_markup=redeem_keyboard)

    def generate_report_text(start_time, end_time, issued, redeemed, redeemed_users, sources, total_redeem_time_seconds):
        conversion_rate = round((redeemed / issued) * 100, 1) if issued > 0 else 0
        avg_redeem_time_str = "–Ω/–¥"
        if redeemed > 0:
            avg_seconds = total_redeem_time_seconds / redeemed
            hours, remainder = divmod(int(avg_seconds), 3600)
            minutes, _ = divmod(remainder, 60)
            avg_redeem_time_str = f"{hours} —á {minutes} –º–∏–Ω"
        report_date = end_time.strftime('%d.%m.%Y')
        header = f"**#–ù–∞—Å—Ç–æ–π–∫–∞_–∑–∞_–ü–æ–¥–ø–∏—Å–∫—É (–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ {report_date})**\n\n"
        period_str = f"**–ü–µ—Ä–∏–æ–¥:** —Å {start_time.strftime('%d.%m %H:%M')} –ø–æ {end_time.strftime('%d.%m %H:%M')}\n\n"
        stats = (f"‚úÖ **–í—ã–¥–∞–Ω–æ –∫—É–ø–æ–Ω–æ–≤:** {issued}\n"
                 f"ü•É **–ü–æ–≥–∞—à–µ–Ω–æ –Ω–∞—Å—Ç–æ–µ–∫:** {redeemed}\n"
                 f"üìà **–ö–æ–Ω–≤–µ—Ä—Å–∏—è:** {conversion_rate}%\n"
                 f"‚è±Ô∏è **–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è:** {avg_redeem_time_str}\n")
        sources_str = ""
        if sources:
            sources_str += "\n**–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:**\n"
            sorted_sources = sorted(sources.items(), key=lambda item: item[1], reverse=True)
            for source, count in sorted_sources:
                sources_str += f"‚Ä¢ {source}: {count}\n"
        users_str = ""
        if redeemed_users:
            users_str += "\n**–ù–∞—Å—Ç–æ–π–∫—É –ø–æ–ª—É—á–∏–ª–∏:**\n"
            for user in redeemed_users[:10]:
                users_str += f"‚Ä¢ {user}\n"
            if len(redeemed_users) > 10:
                users_str += f"...–∏ –µ—â–µ {len(redeemed_users) - 10}."
        return header + period_str + stats + sources_str + users_str

    def send_report(bot, chat_id, start_time, end_time):
        try:
            issued, redeemed, redeemed_users, sources, total_redeem_time = get_report_data_for_period(start_time, end_time)
            if issued == 0:
                bot.send_message(chat_id, f"–ó–∞ –ø–µ—Ä–∏–æ–¥ —Å {start_time.strftime('%d.%m %H:%M')} –ø–æ {end_time.strftime('%d.%m %H:%M')} –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞.")
                return
            report_text = generate_report_text(start_time, end_time, issued, redeemed, redeemed_users, sources, total_redeem_time)
            bot.send_message(chat_id, report_text, parse_mode="Markdown")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –≤ —á–∞—Ç {chat_id}: {e}")

    # --- –ù–û–í–´–ô –ö–û–î: –û–ë–†–ê–ë–û–¢–ß–ò–ö –ó–ê–ü–†–û–°–û–í –ö –ù–ï–ô–†–û–°–ï–¢–ò (–î–û–õ–ñ–ï–ù –ë–´–¢–¨ –í –°–ê–ú–û–ú –ö–û–ù–¶–ï) ---
    @bot.message_handler(func=lambda message: True, content_types=['text'])
    def handle_ai_query(message: types.Message):
        bot.send_chat_action(message.chat.id, 'typing')
        recommendation = get_ai_recommendation(message.text, MENU_DATA)
        bot.reply_to(message, recommendation, parse_mode="Markdown")

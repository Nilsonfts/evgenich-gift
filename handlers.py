import logging
import datetime

# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Telegram-–±–æ—Ç–∞
from telebot import types

# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏, —á—Ç–æ–±—ã –≤—Ä–µ–º—è –±—ã–ª–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º
import pytz

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞ config.py ---
from config import (
    CHANNEL_ID, HELLO_STICKER_ID, NASTOYKA_STICKER_ID, THANK_YOU_STICKER_ID,
    FRIEND_BONUS_STICKER_ID, ADMIN_IDS, REPORT_CHAT_ID, GOOGLE_SHEET_KEY, MENU_URL
)
# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google –¢–∞–±–ª–∏—Ü–∞–º–∏ –∏–∑ —Ñ–∞–π–ª–∞ g_sheets.py ---
from g_sheets import (
    get_reward_status, add_new_user, update_status, delete_user,
    get_referrer_id_from_user, count_successful_referrals, mark_referral_bonus_claimed,
    get_report_data_for_period, get_stats_by_source, get_weekly_cohort_data, get_top_referrers,
    log_conversation_turn, get_conversation_history, get_daily_updates
)
# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –º–µ–Ω—é –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
from menu_nastoiki import MENU_DATA
from food_menu import FOOD_MENU_DATA

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ "–º–æ–∑–≥–∞" –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ - —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–∑–æ–≤–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ ---
from ai_assistant import get_ai_recommendation

# =======================================================================
# === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ===
# =======================================================================

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
user_booking_data = {}


# =======================================================================
# === –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í ===
# =======================================================================

def register_handlers(bot):
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è "—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç" –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫ –≤ –±–æ—Ç–µ.
    """

    # =======================================================================
    # === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
    # =======================================================================
    
    def _cancel_booking(message: types.Message):
        """
        –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏–∫–∏ –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
        """
        user_id = message.from_user.id
        if user_id in user_booking_data:
            del user_booking_data[user_id]
            
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            menu_button = types.KeyboardButton("üìñ –ú–µ–Ω—é")
            friend_button = types.KeyboardButton("ü§ù –ü—Ä–∏–≤–µ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∏—â–∞")
            book_button = types.KeyboardButton("üìç –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª")
            ai_help_button = types.KeyboardButton("üó£ –°–ø—Ä–æ—Å–∏ —É –ï–≤–≥–µ–Ω–∏—á–∞")
            keyboard.row(menu_button, friend_button)
            keyboard.row(ai_help_button, book_button)
            if user_id in ADMIN_IDS:
                restart_button = types.KeyboardButton("/restart")
                keyboard.row(restart_button)
            
            bot.send_message(user_id, "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=keyboard)
        else:
            bot.reply_to(message, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã.")

    # =======================================================================
    # === –û–°–ù–û–í–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ –ò –ö–ù–û–ü–ö–ò ===
    # =======================================================================

    @bot.message_handler(commands=['start'])
    def handle_start(message: types.Message):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start.
        """
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞–∂–∞–ª /start —Å —Ç–µ–∫—Å—Ç–æ–º: {message.text}")
        user_id = message.from_user.id
        status = get_reward_status(user_id)
        
        if status == 'redeemed':
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –ø–æ–ª—É—á–∞–ª –Ω–∞–≥—Ä–∞–¥—É. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é.")
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            menu_button = types.KeyboardButton("üìñ –ú–µ–Ω—é")
            friend_button = types.KeyboardButton("ü§ù –ü—Ä–∏–≤–µ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∏—â–∞")
            book_button = types.KeyboardButton("üìç –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª")
            ai_help_button = types.KeyboardButton("üó£ –°–ø—Ä–æ—Å–∏ —É –ï–≤–≥–µ–Ω–∏—á–∞")
            
            keyboard.row(menu_button, friend_button)
            keyboard.row(ai_help_button, book_button)

            if user_id in ADMIN_IDS:
                restart_button = types.KeyboardButton("/restart")
                keyboard.row(restart_button)
            
            info_text = (
                "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, —Ç–æ–≤–∞—Ä–∏—â! –†–∞–¥—ã –≤–∏–¥–µ—Ç—å —Å–Ω–æ–≤–∞. üòâ\n\n"
                "–ù–∞–∂–∏–º–∞–π ¬´üìñ –ú–µ–Ω—é¬ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ **–ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –≤ —á–∞—Ç, —á–µ–≥–æ –±—ã —Ç–µ–±–µ —Ö–æ—Ç–µ–ª–æ—Å—å** "
                "(–Ω–∞–ø—Ä–∏–º–µ—Ä: _¬´—Ö–æ—á—É —á—Ç–æ-–Ω–∏–±—É–¥—å –∫–∏—Å–ª–æ–µ –∏ —è–≥–æ–¥–Ω–æ–µ¬ª_), –∏ —è –ø–æ–º–æ–≥—É —Å –≤—ã–±–æ—Ä–æ–º!"
            )
            bot.send_message(user_id, info_text, reply_markup=keyboard, parse_mode="Markdown")
            return

        if status == 'not_found':
            logging.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º...")
            referrer_id = None
            source = 'direct'
            
            args = message.text.split(' ', 1)
            
            if len(args) > 1:
                payload = args[1]
                logging.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–∞–≥—Ä—É–∑–∫–∞ (payload): {payload}")
                if payload.startswith('ref_'):
                    try:
                        referrer_id = int(payload.replace('ref_', ''))
                        source = '–†–µ—Ñ–µ—Ä–∞–ª'
                    except (ValueError, IndexError):
                        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å ref_id –∏–∑ {payload}")
                        pass
                else:
                    allowed_sources = {'qr_tv': 'QR —Å –¢–í', 'qr_bar': 'QR –Ω–∞ –±–∞—Ä–µ', 'qr_toilet': 'QR –≤ —Ç—É–∞–ª–µ—Ç–µ', 'vk': 'VK', 'inst': 'Instagram', 'flyer': '–õ–∏—Å—Ç–æ–≤–∫–∏', 'site': '–°–∞–π—Ç'}
                    if payload in allowed_sources:
                        source = allowed_sources[payload]
            
            add_new_user(user_id, message.from_user.username or "N/A", message.from_user.first_name, source, referrer_id)
            if referrer_id:
                bot.send_message(user_id, "ü§ù –ü—Ä–∏–≤–µ—Ç, —Ç–æ–≤–∞—Ä–∏—â! –í–∏–∂—É, —Ç–µ–±—è –Ω–∞–ø—Ä–∞–≤–∏–ª —Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–π –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω. –ü—Ä–æ—Ö–æ–¥–∏, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è.")

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        gift_button = types.KeyboardButton("ü•É –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç–æ–π–∫—É –ø–æ —Ç–∞–ª–æ–Ω—É")
        keyboard.add(gift_button)
        bot.send_message(message.chat.id, "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, —Ç–æ–≤–∞—Ä–∏—â! –ü–∞—Ä—Ç–∏—è –¥–∞–µ—Ç —Ç–µ–±–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —à–∞–Ω—Å: –æ–±–º–µ–Ω—è—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –¥–µ—Ñ–∏—Ü–∏—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç ‚Äî —Ñ–∏—Ä–º–µ–Ω–Ω—É—é –Ω–∞—Å—Ç–æ–π–∫—É ¬´–ï–≤–≥–µ–Ω–∏—á¬ª! –ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, –Ω–µ —Ç—è–Ω–∏.", reply_markup=keyboard)

    @bot.message_handler(commands=['book'])
    @bot.message_handler(func=lambda message: message.text == "üìç –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª")
    def handle_booking_info(message: types.Message):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–∞.
        """
        if user_booking_data.get(message.from_user.id):
            bot.reply_to(message, "–¢—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏ –∫–æ–º–∞–Ω–¥–æ–π /cancel.")
            return
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª', –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π.")
        _show_booking_options(message)

    @bot.message_handler(commands=['friend'])
    @bot.message_handler(func=lambda message: message.text == "ü§ù –ü—Ä–∏–≤–µ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∏—â–∞")
    def handle_friend_command(message: types.Message):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.
        """
        if user_booking_data.get(message.from_user.id):
            bot.reply_to(message, "–¢–æ–≤–∞—Ä–∏—â, –¥–∞–≤–∞–π —Å–Ω–∞—á–∞–ª–∞ –∑–∞–∫–æ–Ω—á–∏–º —Å –±—Ä–æ–Ω—å—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏ –∫–æ–º–∞–Ω–¥–æ–π /cancel.")
            return

        user_id = message.from_user.id
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.")
        
        try:
            bot_username = bot.get_me().username
            if not bot_username:
                logging.error("–û–®–ò–ë–ö–ê: –£ –±–æ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—É–±–ª–∏—á–Ω—ã–π username (@–∏–º—è_–±–æ—Ç–∞). –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞. –ó–∞–π–¥–∏—Ç–µ –≤ @BotFather, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ.")
                bot.send_message(user_id, "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É, —Ç–∞–∫ –∫–∞–∫ —É —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –Ω–µ—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∏–º–µ–Ω–∏ (@username). –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —ç—Ç–æ –≤ @BotFather.")
                return

            ref_link = f"https://t.me/{bot_username}?start=ref_{user_id}"

            text_before = (
                "üí™ –†–µ—à–∏–ª –ø–µ—Ä–µ–≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–ª–∞–Ω, —Ç–æ–≤–∞—Ä–∏—â? –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n"
                "–í–æ—Ç —Ç–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–∏–≤–∞ –Ω–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–æ–π—Ü–∞. –û—Ç–ø—Ä–∞–≤—å —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–≥—É:"
            )
            bot.send_message(user_id, text_before, parse_mode="Markdown")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            bot.send_message(user_id, ref_link, disable_web_page_preview=True)

            text_after = (
                "–ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –ø—Ä–æ–π–¥–µ—Ç –≤—Å–µ –∏–Ω—Å—Ç–∞–Ω—Ü–∏–∏ –∏ –ø–æ–ª—É—á–∏—Ç —Å–≤–æ—é –Ω–∞—Å—Ç–æ–π–∫—É (–∏ –≤—ã–¥–µ—Ä–∂–∏—Ç '–∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫' –≤ 24 —á–∞—Å–∞), –ø–∞—Ä—Ç–∏—è —Ç–µ–±—è –æ—Ç–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç **–µ—â–µ –æ–¥–Ω–æ–π –¥–µ—Ñ–∏—Ü–∏—Ç–Ω–æ–π –Ω–∞—Å—Ç–æ–π–∫–æ–π**! ü•É\n\n"
                "*–ü–æ–º–Ω–∏, –ø–ª–∞–Ω ‚Äî –Ω–µ –±–æ–ª–µ–µ 5 —Ç–æ–≤–∞—Ä–∏—â–µ–π.*"
            )
            bot.send_message(user_id, text_after, parse_mode="Markdown")

        except Exception as e:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è {user_id}: {e}", exc_info=True)
            bot.send_message(user_id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–µ.")

    @bot.message_handler(commands=['channel'])
    def handle_channel_command(message: types.Message):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π Telegram-–∫–∞–Ω–∞–ª –∑–∞–≤–µ–¥–µ–Ω–∏—è.
        """
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª.")
        keyboard = types.InlineKeyboardMarkup()
        channel_url = f"https.me/{CHANNEL_ID.lstrip('@')}"
        url_button = types.InlineKeyboardButton(text="‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª", url=channel_url)
        keyboard.add(url_button)
        bot.send_message(message.chat.id, "–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª:", reply_markup=keyboard)

    @bot.message_handler(commands=['menu'])
    @bot.message_handler(func=lambda message: message.text == "üìñ –ú–µ–Ω—é")
    def handle_menu_command(message: types.Message):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ–Ω—é.
        """
        if user_booking_data.get(message.from_user.id):
            bot.reply_to(message, "–¢–æ–≤–∞—Ä–∏—â, –¥–∞–≤–∞–π —Å–Ω–∞—á–∞–ª–∞ –∑–∞–∫–æ–Ω—á–∏–º —Å –±—Ä–æ–Ω—å—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏ –∫–æ–º–∞–Ω–¥–æ–π /cancel.")
            return
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é.")
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        nastoiki_button = types.InlineKeyboardButton(text="ü•É –ú–µ–Ω—é –Ω–∞—Å—Ç–æ–µ–∫", callback_data="menu_nastoiki_main")
        food_button = types.InlineKeyboardButton(text="üçî –ú–µ–Ω—é –∫—É—Ö–Ω–∏", callback_data="menu_food_main")
        full_menu_button = types.InlineKeyboardButton(text="üìÑ –ü–æ–ª–Ω–æ–µ –º–µ–Ω—é (–°–∞–π—Ç)", url=MENU_URL)
        keyboard.add(nastoiki_button, food_button, full_menu_button)
        bot.send_message(message.chat.id, "–ß–µ–≥–æ –∂–µ–ª–∞–µ—à—å, —Ç–æ–≤–∞—Ä–∏—â? –ù–∞—Å—Ç–æ–π–∫—É –∏–ª–∏ –∑–∞–∫—É—Å–∏—Ç—å?", reply_markup=keyboard)

    @bot.message_handler(commands=['help'])
    def handle_help_command(message: types.Message):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞.
        """
        user_id = message.from_user.id
        help_text = (
            "**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –±–æ—Ç—É ¬´–ï–≤–≥–µ–Ω–∏—á –ù–∞—Å—Ç–∞–∏–≤–∞–µ—Ç¬ª**\n\n"
            "–Ø ‚Äî –≤–∞—à –ø–∞—Ä—Ç–∏–π–Ω—ã–π —Ç–æ–≤–∞—Ä–∏—â, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–¥–∞–µ—Ç –¥–µ—Ñ–∏—Ü–∏—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç (—Ñ–∏—Ä–º–µ–Ω–Ω—É—é –Ω–∞—Å—Ç–æ–π–∫—É) –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.\n\n"
            "**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
            "‚Ä¢ `/start` - –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ –∏ –ø–æ–ª—É—á–∏—Ç—å —Ç–∞–ª–æ–Ω –Ω–∞ –Ω–∞—Å—Ç–æ–π–∫—É.\n"
            "‚Ä¢ `/menu` - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é –Ω–∞—à–µ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è.\n"
            "‚Ä¢ `/book` - –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª.\n"
            "‚Ä¢ `/cancel` - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ).\n"
            "‚Ä¢ `/channel` - –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π Telegram-–∫–∞–Ω–∞–ª.\n"
            "‚Ä¢ `/friend` - –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –∑–∞ —ç—Ç–æ –±–æ–Ω—É—Å.\n"
            "‚Ä¢ `/help` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ."
        )
        if user_id in ADMIN_IDS:
            admin_help_text = (
                "\n\n**üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
                "‚Ä¢ `/admin` - –û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –æ—Ç—á–µ—Ç–∞–º–∏.\n"
                "‚Ä¢ `/restart` - –°–±—Ä–æ—Å–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!)."
            )
            help_text += admin_help_text
        bot.send_message(user_id, help_text, parse_mode="Markdown")
        
    @bot.message_handler(commands=['cancel'])
    def handle_cancel_command(message: types.Message):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.
        """
        _cancel_booking(message)

    @bot.message_handler(func=lambda message: message.text == "üó£ –°–ø—Ä–æ—Å–∏ —É –ï–≤–≥–µ–Ω–∏—á–∞")
    def handle_ai_prompt_button(message: types.Message):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É-–ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è –ò–ò.
        """
        if user_booking_data.get(message.from_user.id):
            bot.reply_to(message, "–¢–æ–≤–∞—Ä–∏—â, –¥–∞–≤–∞–π —Å–Ω–∞—á–∞–ª–∞ –∑–∞–∫–æ–Ω—á–∏–º —Å –±—Ä–æ–Ω—å—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏ –∫–æ–º–∞–Ω–¥–æ–π /cancel.")
            return
        bot.reply_to(message, "–°–º–µ–ª–æ –ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è! –ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–ø–æ—Å–æ–≤–µ—Ç—É–π —á—Ç–æ-–Ω–∏–±—É–¥—å —Å–ª–∞–¥–∫–æ–µ –∏ —Å–ª–∏–≤–æ—á–Ω–æ–µ¬ª –∏–ª–∏ ¬´–∏—â—É —Å–∞–º—É—é —è–¥—Ä—ë–Ω—É—é –Ω–∞—Å—Ç–æ–π–∫—É¬ª.")

    @bot.message_handler(func=lambda message: message.text == "ü•É –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç–æ–π–∫—É –ø–æ —Ç–∞–ª–æ–Ω—É")
    def handle_get_gift_press(message: types.Message):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–æ—Ä–æ–Ω–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç–æ–π–∫–∏ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É.
        """
        user_id = message.from_user.id
        status = get_reward_status(user_id)
        if status in ['issued', 'redeemed']:
            bot.send_message(user_id, "–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ —Å–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏! üòâ")
            return
        try:
            chat_member = bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
            if chat_member.status in ['member', 'administrator', 'creator']:
                bot.send_message(user_id, "–£–≤–∞–∂–∞—é ‚Äî –ø–æ–¥–ø–∏—Å–∞–ª—Å—è! –ü–æ–ª—É—á–∞–π –≥–æ—Å—Ç–∏–Ω–µ—Ü.")
                issue_coupon(bot, user_id, message.from_user.username, message.from_user.first_name, message.chat.id)
                return
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}: {e}")
        
        welcome_text = ("–û—Ç–ª–∏—á–Ω–æ! üëç\n\n"
                        "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç–æ–π–∫—É, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª. –≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ —Å–µ–∫—É–Ω–¥—É.\n\n"
                        "–ö–æ–≥–¥–∞ –ø–æ–¥–ø–∏—à–µ—à—å—Å—è ‚Äî –Ω–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è¬ª –∑–¥–µ—Å—å –∂–µ.")
        inline_keyboard = types.InlineKeyboardMarkup(row_width=1)
        channel_url = f"https.me/{CHANNEL_ID.lstrip('@')}"
        subscribe_button = types.InlineKeyboardButton(text="‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞–Ω–∞–ª—É", url=channel_url)
        check_button = types.InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å!", callback_data="check_subscription")
        inline_keyboard.add(subscribe_button, check_button)
        try:
            bot.send_sticker(message.chat.id, HELLO_STICKER_ID)
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä: {e}")
        bot.send_message(message.chat.id, welcome_text, reply_markup=inline_keyboard, parse_mode="Markdown")

    # =======================================================================
    # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ù–ê–ñ–ê–¢–ò–ô –ù–ê INLINE-–ö–ù–û–ü–ö–ò (CALLBACKS) ===
    # =======================================================================

    @bot.callback_query_handler(func=lambda call: call.data == "check_subscription")
    def handle_check_subscription(call: types.CallbackQuery):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª.
        """
        user_id = call.from_user.id
        bot.answer_callback_query(call.id, text="–ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É...")
        try:
            chat_member = bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
            if chat_member.status in ['member', 'administrator', 'creator']:
                bot.delete_message(call.message.chat.id, call.message.message_id)
                issue_coupon(bot, user_id, call.from_user.username, call.from_user.first_name, call.message.chat.id)
            else:
                bot.answer_callback_query(call.id, "–ù—É –∫—É–¥–∞ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏, —Ä–æ–¥–Ω–æ–π? –¢–∞–º –≤—Å—ë –ø–æ-—á–µ—Å—Ç–Ω–æ–º—É.", show_alert=True)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}: {e}")
            bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

    @bot.callback_query_handler(func=lambda call: call.data == "redeem_reward")
    def handle_redeem_reward(call: types.CallbackQuery):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–≥–∞—à–µ–Ω–∏–µ –∫—É–ø–æ–Ω–∞ –Ω–∞ –Ω–∞—Å—Ç–æ–π–∫—É.
        """
        user_id = call.from_user.id
        if update_status(user_id, 'redeemed'):
            final_text = ("‚úÖ –ù—É –≤–æ—Ç –∏ –±–∞—Ö–Ω—É–ª–∏!\n\n"
                          "–ú–µ–∂–¥—É –ø–µ—Ä–≤–æ–π –∏ –≤—Ç–æ—Ä–æ–π, –∫–∞–∫ –∏–∑–≤–µ—Å—Ç–Ω–æ, –ø–µ—Ä–µ—Ä—ã–≤—á–∏–∫ –Ω–µ–±–æ–ª—å—à–æ–π‚Ä¶\n"
                          "üç∑ –ñ–¥—ë–º —Ç–µ–±—è –∑–∞ —Å–ª–µ–¥—É—é—â–µ–π!")
            bot.delete_message(call.message.chat.id, call.message.message_id)
            bot.send_message(call.message.chat.id, final_text)
            try:
                bot.send_sticker(call.message.chat.id, THANK_YOU_STICKER_ID)
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—â–∞–ª—å–Ω—ã–π —Å—Ç–∏–∫–µ—Ä: {e}")
            
            final_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            menu_button = types.KeyboardButton("üìñ –ú–µ–Ω—é")
            friend_button = types.KeyboardButton("ü§ù –ü—Ä–∏–≤–µ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∏—â–∞")
            book_button = types.KeyboardButton("üìç –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª")
            ai_help_button = types.KeyboardButton("üó£ –°–ø—Ä–æ—Å–∏ —É –ï–≤–≥–µ–Ω–∏—á–∞")
            final_keyboard.row(menu_button, friend_button)
            final_keyboard.row(ai_help_button, book_button)
            if user_id in ADMIN_IDS:
                restart_button = types.KeyboardButton("/restart")
                final_keyboard.row(restart_button)
            
            info_text = (
                "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, —Ç–æ–≤–∞—Ä–∏—â.\n\n"
                "–ù–∞–∂–∏–º–∞–π ¬´üìñ –ú–µ–Ω—é¬ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ **–ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –≤ —á–∞—Ç, —á–µ–≥–æ –±—ã —Ç–µ–±–µ —Ö–æ—Ç–µ–ª–æ—Å—å** "
                "(–Ω–∞–ø—Ä–∏–º–µ—Ä: _¬´—Ö–æ—á—É —á—Ç–æ-–Ω–∏–±—É–¥—å –∫–∏—Å–ª–æ–µ –∏ —è–≥–æ–¥–Ω–æ–µ¬ª_), –∏ —è –ø–æ–º–æ–≥—É —Å –≤—ã–±–æ—Ä–æ–º!"
            )
            bot.send_message(user_id, info_text, reply_markup=final_keyboard, parse_mode="Markdown")

            referrer_id = get_referrer_id_from_user(user_id)
            if referrer_id:
                logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–≥–∞—Å–∏–ª –Ω–∞–≥—Ä–∞–¥—É. –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–æ–ª–∂–µ–Ω –µ–≥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–ª—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ {referrer_id} —á–µ—Ä–µ–∑ 24—á.")
        else:
            bot.answer_callback_query(call.id, "–≠—Ç–∞ –Ω–∞–≥—Ä–∞–¥–∞ —É–∂–µ –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞.", show_alert=True)

    @bot.callback_query_handler(func=lambda call: call.data == "menu_nastoiki_main")
    def callback_menu_nastoiki_main(call: types.CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –Ω–∞—Å—Ç–æ–µ–∫."""
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        buttons = [types.InlineKeyboardButton(text=category['title'], callback_data=f"menu_category_{index}") for index, category in enumerate(MENU_DATA)]
        keyboard.add(*buttons)
        try:
            bot.edit_message_text(
                "**–ú–µ–Ω—é –Ω–∞—Å—Ç–æ–µ–∫ ¬´–ï–≤–≥–µ–Ω–∏—á¬ª**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode="Markdown"
            )
        except Exception:
            bot.send_message(call.message.chat.id, "**–ú–µ–Ω—é –Ω–∞—Å—Ç–æ–µ–∫ ¬´–ï–≤–≥–µ–Ω–∏—á¬ª**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard, parse_mode="Markdown")
        bot.answer_callback_query(call.id)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("menu_category_"))
    def callback_menu_category(call: types.CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç–æ–µ–∫ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        category_index = int(call.data.split("_")[2])
        category = MENU_DATA[category_index]
        text = f"**{category['title']}**\n_{category.get('category_narrative', '')}_\n\n"
        for item in category['items']:
            text += f"‚Ä¢ **{item['name']}** ‚Äî {item['price']}\n_{item['narrative_desc']}_\n\n"
        keyboard = types.InlineKeyboardMarkup()
        back_button = types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="menu_nastoiki_main")
        keyboard.add(back_button)
        bot.edit_message_text(
            text, call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode="Markdown"
        )
        bot.answer_callback_query(call.id)

    @bot.callback_query_handler(func=lambda call: call.data == "menu_food_main")
    def callback_menu_food_main(call: types.CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∫—É—Ö–Ω–∏."""
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        buttons = [types.InlineKeyboardButton(text=category, callback_data=f"food_category_{category}") for category in FOOD_MENU_DATA.keys()]
        keyboard.add(*buttons)
        bot.edit_message_text(
            "**–ú–µ–Ω—é –ö—É—Ö–Ω–∏**\n\n–í—ã–±–∏—Ä–∞–π, —á–µ–º –±—É–¥–µ—à—å –∑–∞–∫—É—Å—ã–≤–∞—Ç—å:",
            call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode="Markdown"
        )
        bot.answer_callback_query(call.id)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("food_category_"))
    def callback_food_category(call: types.CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–ª—é–¥ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        category_name = call.data.replace("food_category_", "")
        category_items = FOOD_MENU_DATA.get(category_name, [])
        text = f"**{category_name}**\n\n"
        for item in category_items:
            text += f"‚Ä¢ {item['name']} - **{item['price']}‚ÇΩ**\n"
        keyboard = types.InlineKeyboardMarkup()
        back_button = types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∫—É—Ö–Ω–∏", callback_data="menu_food_main")
        keyboard.add(back_button)
        bot.edit_message_text(
            text, call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode="Markdown"
        )
        bot.answer_callback_query(call.id)
        
    # =======================================================================
    # === –õ–û–ì–ò–ö–ê –ü–û–®–ê–ì–û–í–û–ì–û –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø (FINITE STATE MACHINE) ===
    # =======================================================================
    
    def _show_booking_options(message):
        """–®–∞–≥ 1: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton("üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å", callback_data="booking_phone"),
            types.InlineKeyboardButton("üåê –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ —Å–∞–π—Ç", callback_data="booking_site"),
            types.InlineKeyboardButton("üîê –ù–∞–ø–∏—Å–∞—Ç—å –≤ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Ç", callback_data="booking_secret"),
            types.InlineKeyboardButton("ü§ñ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –º–µ–Ω—è", callback_data="booking_bot")
        )
        bot.send_message(message.chat.id, "–ö–æ–Ω–µ—á–Ω–æ, —Ç–æ–≤–∞—Ä–∏—â! –ö–∞–∫ –±—É–¥–µ–º –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å?", reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("booking_"))
    def handle_booking_option(call: types.CallbackQuery):
        """–®–∞–≥ 2: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö."""
        bot.answer_callback_query(call.id)
        bot.delete_message(call.message.chat.id, call.message.message_id)

        if call.data == "booking_phone":
            bot.send_message(call.message.chat.id, "üìû –ó–≤–æ–Ω–∏ –ø–æ –Ω–æ–º–µ—Ä—É: `8 (812) 317-23-53`", parse_mode="Markdown")
        elif call.data == "booking_site":
            bot.send_message(call.message.chat.id, "üåê –í–æ—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–π –±—Ä–æ–Ω–∏: https://evgenichspb.restoplace.ws/")
        elif call.data == "booking_secret":
            keyboard = types.InlineKeyboardMarkup()
            url_button = types.InlineKeyboardButton(text="üëâ –ü–µ—Ä–µ–π—Ç–∏ –≤ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Ç", url="https://t.me/stolik_evgenicha")
            keyboard.add(url_button)
            text = (
                "–û—Ç —Å–µ—Ä–¥—Ü–∞ –æ—Ç—Ä—ã–≤–∞—é, —Ç–æ–≤–∞—Ä–∏—â! ü§´\n\n"
                "–≠—Ç–æ –Ω–∞—à —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Ç –¥–ª—è –±—Ä–æ–Ω–µ–π, —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤–æ–∏—Ö. –ê —Ç—ã —Ç–µ–ø–µ—Ä—å —Å–≤–æ–π. "
                "–°–º–µ–ª–æ –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –ø–∏—à–∏ —Ç—É–¥–∞."
            )
            bot.send_message(call.message.chat.id, text, reply_markup=keyboard)
        elif call.data == "booking_bot":
            prompt_text = (
                "–û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫ —Ç–µ–±—è –∑–≤–∞—Ç—å, —Ç–æ–≤–∞—Ä–∏—â?\n\n"
                "*–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –Ω–∞–ø–∏—à–∏ /cancel*"
            )
            msg = bot.send_message(call.message.chat.id, prompt_text, parse_mode="Markdown")
            bot.register_next_step_handler(msg, process_name_step)

    def process_name_step(message):
        if message.text == '/cancel':
            return _cancel_booking(message)
        user_id = message.from_user.id
        user_booking_data[user_id] = {'name': message.text}
        msg = bot.send_message(message.chat.id, "–ó–∞–ø–∏—Å–∞–ª. –ö–æ–≥–¥–∞ —Ö–æ—á–µ—à—å –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ —Ä—é–º–æ—á–Ω—É—é? (–î–∞—Ç–∞)")
        bot.register_next_step_handler(msg, process_date_step)

    def process_date_step(message):
        if message.text == '/cancel':
            return _cancel_booking(message)
        user_id = message.from_user.id
        user_booking_data[user_id]['date'] = message.text
        msg = bot.send_message(message.chat.id, "–ü—Ä–∏–Ω—è—Ç–æ. –í–æ —Å–∫–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥–∏—à—å? (–í—Ä–µ–º—è)")
        bot.register_next_step_handler(msg, process_time_step)

    def process_time_step(message):
        if message.text == '/cancel':
            return _cancel_booking(message)
        user_id = message.from_user.id
        user_booking_data[user_id]['time'] = message.text
        msg = bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ –≤–∞—Å –±—É–¥–µ—Ç ‚Äî —á—Ç–æ–±—ã —á–µ–±—É—Ä–µ–∫–æ–≤ —Ö–≤–∞—Ç–∏–ª–æ –Ω–∞ –≤—Å–µ—Ö! (–ö–æ–ª-–≤–æ –≥–æ—Å—Ç–µ–π)")
        bot.register_next_step_handler(msg, process_guests_step)

    def process_guests_step(message):
        if message.text == '/cancel':
            return _cancel_booking(message)
        user_id = message.from_user.id
        user_booking_data[user_id]['guests'] = message.text
        msg = bot.send_message(message.chat.id, "–¢–µ–ª–µ—Ñ–æ–Ω—á–∏–∫ –æ—Å—Ç–∞–≤—å, –∞ —Ç–æ –≤ 80-—Ö –±–µ–∑ –Ω–æ–º–µ—Ä–∫–∞ –¥–∞–∂–µ –∫–∞—Å—Å–µ—Ç—ã –Ω–µ –≤—ã–¥–∞–≤–∞–ª–∏.")
        bot.register_next_step_handler(msg, process_phone_step)

    def process_phone_step(message):
        if message.text == '/cancel':
            return _cancel_booking(message)
        user_id = message.from_user.id
        user_booking_data[user_id]['phone'] = message.text
        msg = bot.send_message(message.chat.id, "–ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ: –ø–æ–≤–æ–¥ –¥—É—à–µ–≤–Ω—ã–π –∏–ª–∏ —Ç–æ—Ä–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π?")
        bot.register_next_step_handler(msg, process_reason_step)

    def process_reason_step(message):
        if message.text == '/cancel':
            return _cancel_booking(message)
        user_id = message.from_user.id
        user_booking_data[user_id]['reason'] = message.text
        data = user_booking_data.get(user_id, {})
        confirmation_text = (
            "–í—Å—ë –≤–µ—Ä–Ω–æ, —Ç–æ–≤–∞—Ä–∏—â?\n\n"
            f"üìå –ò–º—è: {data.get('name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üìÜ –î–∞—Ç–∞: {data.get('date', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üïí –í—Ä–µ–º—è: {data.get('time', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üë• –ì–æ—Å—Ç–µ–π: {data.get('guests', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üéâ –ü–æ–≤–æ–¥: {data.get('reason', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}"
        )
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ!", callback_data="confirm_booking"))
        markup.add(types.InlineKeyboardButton("‚ùå –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="cancel_booking"))
        bot.send_message(message.chat.id, confirmation_text, reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data in ["confirm_booking", "cancel_booking"])
    def handle_booking_confirmation(call: types.CallbackQuery):
        user_id = call.from_user.id
        bot.answer_callback_query(call.id)
        bot.delete_message(call.message.chat.id, call.message.message_id)

        if call.data == "confirm_booking":
            data = user_booking_data.get(user_id, {})
            final_text = (
                "üö® –ù–æ–≤–∞—è –±—Ä–æ–Ω—å:\n\n"
                f"–ò–º—è: {data.get('name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"–î–∞—Ç–∞: {data.get('date', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"–í—Ä–µ–º—è: {data.get('time', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"–ì–æ—Å—Ç–∏: {data.get('guests', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"–ü–æ–≤–æ–¥: {data.get('reason', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}"
            )
            bot.send_message(REPORT_CHAT_ID, final_text)
            bot.send_message(user_id, "–Ø –≤—Å—ë –∑–∞–ø–∏—Å–∞–ª –≤ –±–ª–æ–∫–Ω–æ—Ç. –ü–µ—Ä–µ–¥–∞–º –ª–∏—á–Ω–æ. –ù—É —Ç—ã –¥–∞—ë—à—å!")
            if user_id in user_booking_data:
                del user_booking_data[user_id]
        elif call.data == "cancel_booking":
            if user_id in user_booking_data:
                del user_booking_data[user_id]
            prompt_text = (
                "–ë–µ–∑ –ø—Ä–æ–±–ª–µ–º, —Ç–æ–≤–∞—Ä–∏—â. –ù–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞. –ö–∞–∫ —Ç–µ–±—è –∑–≤–∞—Ç—å?\n\n"
                "*–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –Ω–∞–ø–∏—à–∏ /cancel*"
            )
            msg = bot.send_message(user_id, prompt_text, parse_mode="Markdown")
            bot.register_next_step_handler(msg, process_name_step)

    # =======================================================================
    # === –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ –ò –ü–†–û–ß–ò–ï –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
    # =======================================================================

    @bot.message_handler(commands=['admin'])
    def handle_admin(message: types.Message):
        if message.from_user.id not in ADMIN_IDS:
            bot.reply_to(message, "‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        reports_button = types.InlineKeyboardButton("üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—Ç—á–µ—Ç—ã", callback_data="admin_menu_reports")
        analytics_button = types.InlineKeyboardButton("üìà –ì–ª—É–±–æ–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="admin_menu_analytics")
        leaderboard_button = types.InlineKeyboardButton("üèÜ –î–æ—Å–∫–∞ –ø–æ—á–µ—Ç–∞ –≤–µ—Ä–±–æ–≤—â–∏–∫–æ–≤", callback_data="admin_action_leaderboard")
        keyboard.add(reports_button, analytics_button, leaderboard_button)
        bot.send_message(message.chat.id, "üëë **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏**", reply_markup=keyboard, parse_mode="Markdown")

    @bot.message_handler(commands=['restart'])
    def handle_restart_command(message: types.Message):
        if message.from_user.id not in ADMIN_IDS:
            return
        user_id = message.from_user.id
        success, response_message = delete_user(user_id)
        if success:
            bot.reply_to(message, f"‚úÖ –£—Å–ø–µ—Ö: {response_message}\n–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É /start.")
        else:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø—Ä–æ—Ñ–∏–ª—è: {response_message}")

    @bot.callback_query_handler(func=lambda call: call.data.startswith('admin_'))
    def handle_admin_callbacks(call: types.CallbackQuery):
        if call.from_user.id not in ADMIN_IDS:
            bot.answer_callback_query(call.id, "‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return
        
        action = call.data
        main_menu_text = "üëë **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏**"
        
        if action == 'admin_menu_main':
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            reports_button = types.InlineKeyboardButton("üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—Ç—á–µ—Ç—ã", callback_data="admin_menu_reports")
            analytics_button = types.InlineKeyboardButton("üìà –ì–ª—É–±–æ–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="admin_menu_analytics")
            leaderboard_button = types.InlineKeyboardButton("üèÜ –î–æ—Å–∫–∞ –ø–æ—á–µ—Ç–∞ –≤–µ—Ä–±–æ–≤—â–∏–∫–æ–≤", callback_data="admin_action_leaderboard")
            keyboard.add(reports_button, analytics_button, leaderboard_button)
            try: bot.edit_message_text(main_menu_text, call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode="Markdown")
            except: pass
        elif action == 'admin_menu_reports':
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            today_report_button = types.InlineKeyboardButton("üìä –û—Ç—á–µ—Ç –∑–∞ —Ç–µ–∫—É—â—É—é —Å–º–µ–Ω—É", callback_data="admin_report_today")
            week_report_button = types.InlineKeyboardButton("üìÖ –û—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é", callback_data="admin_report_week")
            month_report_button = types.InlineKeyboardButton("üóìÔ∏è –û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü", callback_data="admin_report_month")
            back_button = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_menu_main")
            keyboard.add(today_report_button, week_report_button, month_report_button, back_button)
            bot.edit_message_text("**–ú–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤**", call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode="Markdown")
        elif action == 'admin_menu_analytics':
            keyboard = types.InlineKeyboardMarkup(row_width=1)
            source_button = types.InlineKeyboardButton("–ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º", callback_data="admin_action_sources")
            cohort_button = types.InlineKeyboardButton("–ö–æ–≥–æ—Ä—Ç—ã –ø–æ –Ω–µ–¥–µ–ª—è–º", callback_data="admin_action_cohorts")
            back_button = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_menu_main")
            keyboard.add(source_button, cohort_button, back_button)
            bot.edit_message_text("**–ú–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏**", call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode="Markdown")
        elif action == 'admin_action_leaderboard':
            bot.answer_callback_query(call.id, "–°–æ—Å—Ç–∞–≤–ª—è—é —Ä–µ–π—Ç–∏–Ω–≥...")
            top_list = get_top_referrers(5)
            if not top_list:
                bot.send_message(call.message.chat.id, "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏–≤–µ–ª –¥—Ä—É–∑–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –±—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞—Å—Ç–æ–π–∫—É.")
                return
            response = "**üèÜ –î–æ—Å–∫–∞ –ü–æ—á–µ—Ç–∞ —É–¥–∞—Ä–Ω–∏–∫–æ–≤ —Ç—Ä—É–¥–∞:**\n(—É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥—Ä—É–∑—å—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–≥–∞—Å–∏–ª–∏ –Ω–∞—Å—Ç–æ–π–∫—É)\n\n"
            medals = ["ü•á", "ü•à", "ü•â", "4.", "5."]
            for i, (name, count) in enumerate(top_list):
                response += f"{medals[i]} –¢–æ–≤–∞—Ä–∏—â **{name}** ‚Äî {count} —á–µ–ª.\n"
            bot.send_message(call.message.chat.id, response, parse_mode="Markdown")
        elif action == 'admin_action_sources':
            bot.answer_callback_query(call.id, "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏—Å—Ç–æ—á–Ω–∏–∫–∏...")
            stats = get_stats_by_source()
            if not stats:
                bot.send_message(call.message.chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º.")
                return
            response = "**üìà –ê–Ω–∞–ª–∏–∑ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º (–∑–∞ –≤—Å–µ –≤—Ä–µ–º—è):**\n\n"
            sorted_stats = sorted(stats.items(), key=lambda item: item[1]['issued'], reverse=True)
            for source, data in sorted_stats:
                conversion = round((data['redeemed'] / data['issued']) * 100, 1) if data['issued'] > 0 else 0
                response += f"**{source}:**\n  –ü–æ–¥–ø–∏—Å–∞–ª–æ—Å—å: {data['issued']}\n  –ü–æ–≥–∞—à–µ–Ω–æ: {data['redeemed']} (–ö–æ–Ω–≤–µ—Ä—Å–∏—è: {conversion}%)\n\n"
            bot.send_message(call.message.chat.id, response, parse_mode="Markdown")
        elif action == 'admin_action_cohorts':
            bot.answer_callback_query(call.id, "–°—Ä–∞–≤–Ω–∏–≤–∞—é –∫–æ–≥–æ—Ä—Ç—ã...")
            cohorts = get_weekly_cohort_data()
            if not cohorts:
                bot.send_message(call.message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–≥–æ—Ä—Ç.")
                return
            response = "**üóìÔ∏è –ê–Ω–∞–ª–∏–∑ –ø–æ –Ω–µ–¥–µ–ª—å–Ω—ã–º –∫–æ–≥–æ—Ä—Ç–∞–º:**\n(—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º, –∫–∞–∫ —Ö–æ—Ä–æ—à–æ –≥–æ—Å—Ç–∏ —Ä–∞–∑–Ω—ã—Ö –Ω–µ–¥–µ–ª—å –¥–æ—Ö–æ–¥—è—Ç –¥–æ –±–∞—Ä–∞)\n\n"
            for cohort in cohorts:
                if cohort['issued'] == 0: continue
                conversion = round((cohort['redeemed'] / cohort['issued']) * 100, 1)
                response += f"**–ù–µ–¥–µ–ª—è ({cohort['week']}):**\n  –ù–æ–≤—ã—Ö: {cohort['issued']}, –ü–æ–≥–∞—à–µ–Ω–æ: {cohort['redeemed']} (–ö–æ–Ω–≤–µ—Ä—Å–∏—è: {conversion}%)\n\n"
            bot.send_message(call.message.chat.id, response, parse_mode="Markdown")
        elif call.data.startswith('admin_report'):
            period = call.data.split('_')[-1]
            tz_moscow = pytz.timezone('Europe/Moscow')
            now_moscow = datetime.datetime.now(tz_moscow)
            end_time = now_moscow
            if period == 'today':
                if now_moscow.hour < 12: start_time = (now_moscow - datetime.timedelta(days=1)).replace(hour=12, minute=0, second=0, microsecond=0)
                else: start_time = now_moscow.replace(hour=12, minute=0, second=0, microsecond=0)
            elif period == 'week': start_time = now_moscow - datetime.timedelta(days=7)
            elif period == 'month': start_time = now_moscow - datetime.timedelta(days=30)
            else: return
            send_report(bot, call.message.chat.id, start_time, end_time)

    def issue_coupon(bot, user_id, username, first_name, chat_id):
        update_status(user_id, 'issued')
        coupon_text = ("üéâ –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω-—Ç–æ–≤–∞—Ä–∏—â, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n\n"
                       "–¢–µ–±–µ –¥–æ—Å—Ç–∞–ª–∞—Å—å —Ñ–∏—Ä–º–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç–æ–π–∫–∞ ¬´–ï–≤–≥–µ–Ω–∏—á¬ª ‚Äî –ø–æ—á—Ç–∏ –∫–∞–∫ –ø—É—Ç—ë–≤–∫–∞ –≤ –ø–∏–æ–Ω–µ—Ä–ª–∞–≥–µ—Ä—å, —Ç–æ–ª—å–∫–æ –ø–æ–≤–µ—Å–µ–ª–µ–µ.\n\n"
                       "–ß—Ç–æ –¥–µ–ª–∞—Ç—å ‚Äî –∫–æ—Ä–æ—Ç–∫–æ –∏ —è—Å–Ω–æ:\n"
                       "1. –ü–æ–∫–∞–∂–∏ —ç—Ç–æ—Ç —ç–∫—Ä–∞–Ω –±–∞—Ä–º–µ–Ω—É-–¥–µ–∂—É—Ä–Ω–æ–º—É.\n"
                       "2. –ü–æ –µ–≥–æ —Å–∏–≥–Ω–∞–ª—É –∂–º–∏ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É ‚Äî –∏ —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∞–µ—à—å —Å—Ç–æ–ø–∫—É!")
        redeem_keyboard = types.InlineKeyboardMarkup()
        redeem_button = types.InlineKeyboardButton(text="üîí –ù–ê–õ–ò–¢–¨ –ü–†–ò –ë–ê–†–ú–ï–ù–ï", callback_data="redeem_reward")
        redeem_keyboard.add(redeem_button)
        try:
            bot.send_sticker(chat_id, NASTOYKA_STICKER_ID)
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä-–∫—É–ø–æ–Ω: {e}")
        bot.send_message(chat_id, coupon_text, parse_mode="Markdown", reply_markup=redeem_keyboard)

    def generate_report_text(start_time, end_time, issued, redeemed, redeemed_users, sources, total_redeem_time_seconds):
        conversion_rate = round((redeemed / issued) * 100, 1) if issued > 0 else 0
        avg_redeem_time_str = "–Ω/–¥"
        if redeemed > 0:
            avg_seconds = total_redeem_time_seconds / redeemed
            hours, remainder = divmod(int(avg_seconds), 3600)
            minutes, _ = divmod(remainder, 60)
            avg_redeem_time_str = f"{hours} —á {minutes} –º–∏–Ω"
        report_date = end_time.strftime('%d.%m.%Y')
        header = f"**#–ù–∞—Å—Ç–æ–π–∫–∞_–∑–∞_–ü–æ–¥–ø–∏—Å–∫—É (–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ {report_date})**\n\n"
        period_str = f"**–ü–µ—Ä–∏–æ–¥:** —Å {start_time.strftime('%d.%m %H:%M')} –ø–æ {end_time.strftime('%d.%m %H:%M')}\n\n"
        stats = (f"‚úÖ **–í—ã–¥–∞–Ω–æ –∫—É–ø–æ–Ω–æ–≤:** {issued}\n"
                 f"ü•É **–ü–æ–≥–∞—à–µ–Ω–æ –Ω–∞—Å—Ç–æ–µ–∫:** {redeemed}\n"
                 f"üìà **–ö–æ–Ω–≤–µ—Ä—Å–∏—è:** {conversion_rate}%\n"
                 f"‚è±Ô∏è **–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è:** {avg_redeem_time_str}\n")
        sources_str = ""
        if sources:
            sources_str += "\n**–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:**\n"
            sorted_sources = sorted(sources.items(), key=lambda item: item[1], reverse=True)
            for source, count in sorted_sources:
                sources_str += f"‚Ä¢ {source}: {count}\n"
        users_str = ""
        if redeemed_users:
            users_str += "\n**–ù–∞—Å—Ç–æ–π–∫—É –ø–æ–ª—É—á–∏–ª–∏:**\n"
            for user in redeemed_users[:10]:
                users_str += f"‚Ä¢ {user}\n"
            if len(redeemed_users) > 10:
                users_str += f"...–∏ –µ—â–µ {len(redeemed_users) - 10}."
        return header + period_str + stats + sources_str + users_str

    def send_report(bot, chat_id, start_time, end_time):
        try:
            issued, redeemed, redeemed_users, sources, total_redeem_time = get_report_data_for_period(start_time, end_time)
            if issued == 0:
                bot.send_message(chat_id, f"–ó–∞ –ø–µ—Ä–∏–æ–¥ —Å {start_time.strftime('%d.%m %H:%M')} –ø–æ {end_time.strftime('%d.%m %H:%M')} –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞.")
                return
            report_text = generate_report_text(start_time, end_time, issued, redeemed, redeemed_users, sources, total_redeem_time)
            bot.send_message(chat_id, report_text, parse_mode="Markdown")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –≤ —á–∞—Ç {chat_id}: {e}")

    # =======================================================================
    # === –ì–õ–ê–í–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô –ö –ò–ò (–î–û–õ–ñ–ï–ù –ë–´–¢–¨ –ü–û–°–õ–ï–î–ù–ò–ú) ===
    # =======================================================================
    @bot.message_handler(func=lambda message: True, content_types=['text'])
    def handle_ai_query(message: types.Message):
        user_id = message.from_user.id
        user_text = message.text

        if user_booking_data.get(user_id):
            return
        
        known_buttons = ['üìñ –ú–µ–Ω—é', 'ü§ù –ü—Ä–∏–≤–µ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∏—â–∞', 'üó£ –°–ø—Ä–æ—Å–∏ —É –ï–≤–≥–µ–Ω–∏—á–∞', 'ü•É –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç–æ–π–∫—É –ø–æ —Ç–∞–ª–æ–Ω—É', 'üìç –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª']
        if user_text in known_buttons or user_text.startswith('/'):
            return 
        
        log_conversation_turn(user_id, "user", user_text)
        history = get_conversation_history(user_id, limit=6)
        
        bot.send_chat_action(message.chat.id, 'typing')

        ai_response = get_ai_recommendation(user_text, history)
        
        if "[START_BOOKING_FLOW]" in ai_response:
            _show_booking_options(message)
            log_conversation_turn(user_id, "assistant", "–ü—Ä–µ–¥–ª–æ–∂–∏–ª –≤–∞—Ä–∏–∞–Ω—Ç—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
        else:
            log_conversation_turn(user_id, "assistant", ai_response)
            bot.reply_to(message, ai_response, parse_mode="Markdown")

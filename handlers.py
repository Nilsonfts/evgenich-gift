# handlers.py
import logging
from telebot import types
from config import CHANNEL_ID
from database import user_exists, add_user, check_reward_status, grant_reward
from g_sheets import add_subscription_to_sheet

def register_handlers(bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–Ω–æ–ø–æ–∫."""

    @bot.message_handler(commands=['start'])
    def handle_start(message: types.Message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É."""
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        get_gift_button = types.KeyboardButton("üéÅ –ü–û–õ–£–ß–ò–¢–¨ –ù–ê–°–¢–û–ô–ö–£")
        keyboard.add(get_gift_button)
        bot.send_message(message.chat.id, 
                         "–ü—Ä–∏–≤–µ—Ç! üëã –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫.", 
                         reply_markup=keyboard)

    @bot.message_handler(func=lambda message: message.text == "üéÅ –ü–û–õ–£–ß–ò–¢–¨ –ù–ê–°–¢–û–ô–ö–£")
    def handle_get_gift_press(message: types.Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–û–õ–£–ß–ò–¢–¨ –ù–ê–°–¢–û–ô–ö–£'."""
        user_id = message.from_user.id
        username = message.from_user.username or "N/A"
        first_name = message.from_user.first_name

        if not user_exists(user_id):
            add_user(user_id, username, first_name)
            logging.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {first_name} (@{username}, {user_id})")

        if check_reward_status(user_id):
            bot.send_message(user_id, "–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ —Å–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏! üòâ")
            return

        welcome_text = (
            "–û—Ç–ª–∏—á–Ω–æ! üëç\n\n"
            "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç–æ–π–∫—É, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª. –≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ —Å–µ–∫—É–Ω–¥—É.\n\n"
            "–ö–æ–≥–¥–∞ –ø–æ–¥–ø–∏—à–µ—à—å—Å—è ‚Äî –Ω–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è¬ª –∑–¥–µ—Å—å –∂–µ."
        )

        inline_keyboard = types.InlineKeyboardMarkup()
        channel_url = f"https://t.me/{CHANNEL_ID.lstrip('@')}"
        subscribe_button = types.InlineKeyboardButton(text="‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞–Ω–∞–ª—É", url=channel_url)
        check_button = types.InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å!", callback_data="check_subscription")
        inline_keyboard.add(subscribe_button).add(check_button)
        
        try:
            with open('welcome.jpg', 'rb') as photo:
                bot.send_photo(message.chat.id, photo, caption=welcome_text, reply_markup=inline_keyboard, parse_mode="Markdown")
        except FileNotFoundError:
            logging.warning("–§–∞–π–ª welcome.jpg –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.")
            bot.send_message(message.chat.id, welcome_text, reply_markup=inline_keyboard, parse_mode="Markdown")


    @bot.callback_query_handler(func=lambda call: call.data == "check_subscription")
    def handle_check_subscription(call: types.CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ inline-–∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏."""
        user_id = call.from_user.id

        if check_reward_status(user_id):
            bot.answer_callback_query(call.id)
            bot.edit_message_caption("–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ —Å–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏! üòâ",
                                     call.message.chat.id, call.message.message_id)
            return

        try:
            chat_member = bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)

            if chat_member.status in ['member', 'administrator', 'creator']:
                bot.answer_callback_query(call.id, "–û—Ç–ª–∏—á–Ω–æ, –ø–æ–¥–ø–∏—Å–∫–∞ –µ—Å—Ç—å! ‚úÖ")
                
                # –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –≥—É–≥–ª
                grant_reward(user_id)
                add_subscription_to_sheet(user_id, call.from_user.username or "N/A", call.from_user.first_name)

                coupon_text = (
                    "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ\n\n"
                    "–í–∞—à –ø–æ–¥–∞—Ä–æ–∫ - **—Ñ–∏—Ä–º–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç–æ–π–∫–∞**.\n"
                    "–ü–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–∞—Ä–º–µ–Ω—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π –ø—Ä–∏–∑. –ù–∞–≥—Ä–∞–¥–∞ –≤—ã–¥–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑."
                )
                
                # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
                
                try:
                    with open('tincture.jpg', 'rb') as photo:
                        bot.send_photo(user_id, photo, caption=coupon_text, parse_mode="Markdown")
                except FileNotFoundError:
                    logging.warning("–§–∞–π–ª tincture.jpg –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫—É–ø–æ–Ω.")
                    bot.send_message(user_id, coupon_text, parse_mode="Markdown")

            else:
                bot.answer_callback_query(call.id, "–ü–æ—Ö–æ–∂–µ, –≤—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}: {e}")
            bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

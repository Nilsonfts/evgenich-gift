import logging
import datetime
from telebot import types
import pytz
from config import (
    CHANNEL_ID, HELLO_STICKER_ID, NASTOYKA_STICKER_ID, THANK_YOU_STICKER_ID,
    FRIEND_BONUS_STICKER_ID, ADMIN_IDS, REPORT_CHAT_ID
)
from g_sheets import (
    get_reward_status, add_new_user, redeem_reward, delete_user,
    get_referrer_id_from_user, count_successful_referrals, mark_referral_bonus_claimed,
    get_report_data_for_period
)

def register_handlers(bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–Ω–æ–ø–æ–∫."""

    # === –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ ===
    @bot.message_handler(commands=['start'])
    def handle_start(message: types.Message):
        user_id = message.from_user.id
        referrer_id = None
        source = 'direct'

        args = message.text.split()
        if len(args) > 1:
            payload = args[1]
            if payload.startswith('ref_'):
                try:
                    referrer_id = int(payload.replace('ref_', ''))
                    source = '–†–µ—Ñ–µ—Ä–∞–ª'
                except (ValueError, IndexError):
                    pass
            else:
                allowed_sources = {'qr_tv': 'QR —Å –¢–í', 'qr_bar': 'QR –Ω–∞ –±–∞—Ä–µ', 'qr_toilet': 'QR –≤ —Ç—É–∞–ª–µ—Ç–µ', 'vk': 'VK', 'inst': 'Instagram', 'flyer': '–õ–∏—Å—Ç–æ–≤–∫–∏', 'site': '–°–∞–π—Ç'}
                if payload in allowed_sources:
                    source = allowed_sources[payload]

        if get_reward_status(user_id) == 'not_found':
            add_new_user(user_id, message.from_user.username or "N/A", message.from_user.first_name, source, referrer_id)
            if referrer_id:
                bot.send_message(user_id, "ü§ù –ü—Ä–∏–≤–µ—Ç, —Ç–æ–≤–∞—Ä–∏—â! –í–∏–∂—É, —Ç–µ–±—è –Ω–∞–ø—Ä–∞–≤–∏–ª —Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–π –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω. –ü—Ä–æ—Ö–æ–¥–∏, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è. –£ –Ω–∞—Å —Ç—É—Ç –ø–æ—á—Ç–∏ –∫–æ–º–º—É–Ω–∏–∑–º ‚Äî –ø–µ—Ä–≤–∞—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ.")

        status = get_reward_status(user_id)
        
        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ ---
        if status in ['issued', 'redeemed']:
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –í–ï–†–ù–£–í–®–ï–ì–û–°–Ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            menu_button = types.KeyboardButton("üìñ –ú–µ–Ω—é")
            friend_button = types.KeyboardButton("ü§ù –ü—Ä–∏–≤–µ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∏—â–∞")
            keyboard.row(menu_button, friend_button) # –ß–µ—Ç–∫–æ —É–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
            bot.send_message(user_id, "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞. üòâ", reply_markup=keyboard)
        else:
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ù–û–í–û–ì–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            gift_button = types.KeyboardButton("ü•É –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç–æ–π–∫—É –ø–æ —Ç–∞–ª–æ–Ω—É")
            keyboard.add(gift_button) # –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞
            bot.send_message(message.chat.id, "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, —Ç–æ–≤–∞—Ä–∏—â! –ü–∞—Ä—Ç–∏—è –¥–∞–µ—Ç —Ç–µ–±–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —à–∞–Ω—Å: –æ–±–º–µ–Ω—è—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –¥–µ—Ñ–∏—Ü–∏—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç ‚Äî —Ñ–∏—Ä–º–µ–Ω–Ω—É—é –Ω–∞—Å—Ç–æ–π–∫—É ¬´–ï–≤–≥–µ–Ω–∏—á¬ª! –ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, –Ω–µ —Ç—è–Ω–∏.", reply_markup=keyboard)

    # ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ñ–∞–π–ª–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    # ... (—è –ø—Ä–∏–≤–æ–∂—É –µ–≥–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∏–∂–µ –¥–ª—è —Ç–≤–æ–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞) ...

    @bot.message_handler(commands=['friend'])
    @bot.message_handler(func=lambda message: message.text == "ü§ù –ü—Ä–∏–≤–µ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∏—â–∞")
    def handle_friend_command(message: types.Message):
        user_id = message.from_user.id
        bot_username = bot.get_me().username
        ref_link = f"https://t.me/{bot_username}?start=ref_{user_id}"
        text = (
            "üí™ –†–µ—à–∏–ª –ø–µ—Ä–µ–≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–ª–∞–Ω, —Ç–æ–≤–∞—Ä–∏—â? –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n"
            f"–í–æ—Ç —Ç–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–∏–≤–∞ –Ω–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–æ–π—Ü–∞:\n`{ref_link}`\n\n"
            "–û—Ç–ø—Ä–∞–≤—å –µ–µ –¥—Ä—É–≥—É. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –ø—Ä–æ–π–¥–µ—Ç –≤—Å–µ –∏–Ω—Å—Ç–∞–Ω—Ü–∏–∏ –∏ –ø–æ–ª—É—á–∏—Ç —Å–≤–æ—é –Ω–∞—Å—Ç–æ–π–∫—É (–∏ –≤—ã–¥–µ—Ä–∂–∏—Ç '–∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫' –≤ 24 —á–∞—Å–∞), –ø–∞—Ä—Ç–∏—è —Ç–µ–±—è –æ—Ç–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç –¥–µ—Ñ–∏—Ü–∏—Ç–Ω–æ–π –∑–∞–∫—É—Å–∫–æ–π! ü•ñ\n\n"
            "*–ü–æ–º–Ω–∏, –ø–ª–∞–Ω ‚Äî –Ω–µ –±–æ–ª–µ–µ 5 —Ç–æ–≤–∞—Ä–∏—â–µ–π.*"
        )
        bot.send_message(user_id, text, parse_mode="Markdown")

    @bot.message_handler(commands=['channel'])
    def handle_channel_command(message: types.Message):
        keyboard = types.InlineKeyboardMarkup()
        channel_url = f"https.me/{CHANNEL_ID.lstrip('@')}"
        url_button = types.InlineKeyboardButton(text="‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª", url=channel_url)
        keyboard.add(url_button)
        bot.send_message(message.chat.id, "–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª:", reply_markup=keyboard)

    @bot.message_handler(commands=['menu'])
    @bot.message_handler(func=lambda message: message.text == "üìñ –ú–µ–Ω—é")
    def handle_menu_command(message: types.Message):
        keyboard = types.InlineKeyboardMarkup()
        url_button = types.InlineKeyboardButton(text="üìñ –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –±–∞—Ä–∞", url="https://spb.evgenich.bar/menu")
        keyboard.add(url_button)
        bot.send_message(message.chat.id, "–ù–∞—à–µ –º–µ–Ω—é –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:", reply_markup=keyboard)

    @bot.message_handler(func=lambda message: message.text == "ü•É –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç–æ–π–∫—É –ø–æ —Ç–∞–ª–æ–Ω—É")
    def handle_get_gift_press(message: types.Message):
        user_id = message.from_user.id
        status = get_reward_status(user_id)
        if status in ['issued', 'redeemed']:
            bot.send_message(user_id, "–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ —Å–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏! üòâ")
            return
        try:
            chat_member = bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
            if chat_member.status in ['member', 'administrator', 'creator']:
                bot.send_message(user_id, "–£–≤–∞–∂–∞—é ‚Äî –ø–æ–¥–ø–∏—Å–∞–ª—Å—è! –ü–æ–ª—É—á–∞–π –≥–æ—Å—Ç–∏–Ω–µ—Ü.")
                issue_coupon(bot, user_id, message.from_user.username, message.from_user.first_name, message.chat.id)
                return
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}: {e}")
        welcome_text = ("–û—Ç–ª–∏—á–Ω–æ! üëç\n\n"
                        "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç–æ–π–∫—É, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª. –≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ —Å–µ–∫—É–Ω–¥—É.\n\n"
                        "–ö–æ–≥–¥–∞ –ø–æ–¥–ø–∏—à–µ—à—å—Å—è ‚Äî –Ω–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è¬ª –∑–¥–µ—Å—å –∂–µ.")
        inline_keyboard = types.InlineKeyboardMarkup(row_width=1)
        channel_url = f"https.me/{CHANNEL_ID.lstrip('@')}"
        subscribe_button = types.InlineKeyboardButton(text="‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞–Ω–∞–ª—É", url=channel_url)
        check_button = types.InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å!", callback_data="check_subscription")
        inline_keyboard.add(subscribe_button, check_button)
        try:
            bot.send_sticker(message.chat.id, HELLO_STICKER_ID)
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä: {e}")
        bot.send_message(message.chat.id, welcome_text, reply_markup=inline_keyboard, parse_mode="Markdown")

    @bot.callback_query_handler(func=lambda call: call.data == "check_subscription")
    def handle_check_subscription(call: types.CallbackQuery):
        user_id = call.from_user.id
        bot.answer_callback_query(call.id, text="–ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É...")
        try:
            chat_member = bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
            if chat_member.status in ['member', 'administrator', 'creator']:
                bot.delete_message(call.message.chat.id, call.message.message_id)
                issue_coupon(bot, user_id, call.from_user.username, call.from_user.first_name, call.message.chat.id)
            else:
                bot.answer_callback_query(call.id, "–ù—É –∫—É–¥–∞ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏, —Ä–æ–¥–Ω–æ–π? –¢–∞–º –≤—Å—ë –ø–æ-—á–µ—Å—Ç–Ω–æ–º—É.", show_alert=True)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}: {e}")
            bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

    @bot.callback_query_handler(func=lambda call: call.data == "redeem_reward")
    def handle_redeem_reward(call: types.CallbackQuery):
        user_id = call.from_user.id
        if redeem_reward(user_id):
            final_text = ("‚úÖ –ù—É –≤–æ—Ç –∏ –±–∞—Ö–Ω—É–ª–∏!\n\n"
                          "–ú–µ–∂–¥—É –ø–µ—Ä–≤–æ–π –∏ –≤—Ç–æ—Ä–æ–π, –∫–∞–∫ –∏–∑–≤–µ—Å—Ç–Ω–æ, –ø–µ—Ä–µ—Ä—ã–≤—á–∏–∫ –Ω–µ–±–æ–ª—å—à–æ–π‚Ä¶\n"
                          "üç∑ –ñ–¥—ë–º —Ç–µ–±—è –∑–∞ —Å–ª–µ–¥—É—é—â–µ–π!")
            bot.delete_message(call.message.chat.id, call.message.message_id)
            bot.send_message(call.message.chat.id, final_text)
            try:
                bot.send_sticker(call.message.chat.id, THANK_YOU_STICKER_ID)
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—â–∞–ª—å–Ω—ã–π —Å—Ç–∏–∫–µ—Ä: {e}")
            
            referrer_id = get_referrer_id_from_user(user_id)
            if referrer_id:
                logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–≥–∞—Å–∏–ª –Ω–∞–≥—Ä–∞–¥—É. –í–Ω–µ—à–Ω–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–æ–ª–∂–µ–Ω –±—É–¥–µ—Ç –µ–≥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–ª—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ {referrer_id} —á–µ—Ä–µ–∑ 24—á.")
        else:
            bot.answer_callback_query(call.id, "–≠—Ç–∞ –Ω–∞–≥—Ä–∞–¥–∞ —É–∂–µ –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞.", show_alert=True)

    # === –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ===
    @bot.message_handler(commands=['admin'])
    def handle_admin(message: types.Message):
        if message.from_user.id not in ADMIN_IDS:
            bot.reply_to(message, "‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        today_report_button = types.InlineKeyboardButton("üìä –û—Ç—á–µ—Ç –∑–∞ —Ç–µ–∫—É—â—É—é —Å–º–µ–Ω—É", callback_data="admin_report_today")
        week_report_button = types.InlineKeyboardButton("üìÖ –û—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é", callback_data="admin_report_week")
        month_report_button = types.InlineKeyboardButton("üóìÔ∏è –û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü", callback_data="admin_report_month")
        keyboard.add(today_report_button, week_report_button, month_report_button)
        bot.send_message(message.chat.id, "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=keyboard)

    @bot.message_handler(commands=['restart'])
    def handle_restart_command(message: types.Message):
        if message.from_user.id not in ADMIN_IDS:
            return
        user_id = message.from_user.id
        if delete_user(user_id):
            bot.reply_to(message, "‚úÖ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤ –±–æ—Ç–µ —Å–±—Ä–æ—à–µ–Ω. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É /start.")
        else:
            bot.reply_to(message, "ü§î –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Å–±—Ä–æ—Å–∞. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –µ—â–µ –Ω–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª–∏ —Å –±–æ—Ç–æ–º.")

    @bot.callback_query_handler(func=lambda call: call.data.startswith('admin_report'))
    def handle_admin_report_callbacks(call: types.CallbackQuery):
        if call.from_user.id not in ADMIN_IDS:
            bot.answer_callback_query(call.id, "‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return
        
        period = call.data.split('_')[-1]
        bot.answer_callback_query(call.id, f"–§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á–µ—Ç...")
        
        tz_moscow = pytz.timezone('Europe/Moscow')
        now_moscow = datetime.datetime.now(tz_moscow)
        end_time = now_moscow

        if period == 'today':
            if now_moscow.hour < 12:
                start_time = (now_moscow - datetime.timedelta(days=1)).replace(hour=12, minute=0, second=0, microsecond=0)
            else:
                start_time = now_moscow.replace(hour=12, minute=0, second=0, microsecond=0)
        elif period == 'week':
            start_time = now_moscow - datetime.timedelta(days=7)
        elif period == 'month':
            start_time = now_moscow - datetime.timedelta(days=30)
        else:
            return
        send_report(bot, call.message.chat.id, start_time, end_time)

    # === –°–ö–†–´–¢–´–ï –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê ===
    @bot.message_handler(commands=['send_daily_report'])
    def handle_send_report_command(message):
        tz_moscow = pytz.timezone('Europe/Moscow')
        now_moscow = datetime.datetime.now(tz_moscow)
        end_time = now_moscow.replace(hour=6, minute=0, second=0, microsecond=0)
        start_time = (end_time - datetime.timedelta(days=1)).replace(hour=12, minute=0, second=0, microsecond=0)
        send_report(bot, REPORT_CHAT_ID, start_time, end_time)

    @bot.message_handler(commands=['check_referral_and_give_bonus'])
    def handle_check_referral_command(message):
        try:
            parts = message.text.split()
            if len(parts) < 3: return
            referred_user_id = int(parts[1])
            referrer_id = int(parts[2])
            member = bot.get_chat_member(CHANNEL_ID, referred_user_id)
            if member.status not in ['member', 'administrator', 'creator']:
                logging.info(f"–†–µ—Ñ–µ—Ä–∞–ª {referred_user_id} –æ—Ç–ø–∏—Å–∞–ª—Å—è. –ë–æ–Ω—É—Å –¥–ª—è {referrer_id} –Ω–µ –≤—ã–¥–∞–Ω.")
                return
            ref_count = count_successful_referrals(referrer_id)
            if ref_count >= 5:
                logging.info(f"–†–µ—Ñ–µ—Ä–µ—Ä {referrer_id} –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ –±–æ–Ω—É—Å–æ–≤.")
                return
            bonus_text = ("‚úä –¢–æ–≤–∞—Ä–∏—â! –¢–≤–æ–π –¥—Ä—É–≥ –ø—Ä–æ—è–≤–∏–ª —Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –æ—Å—Ç–∞–ª—Å—è –≤ –Ω–∞—à–∏—Ö —Ä—è–¥–∞—Ö. –ü–∞—Ä—Ç–∏—è —Ç–æ–±–æ–π –≥–æ—Ä–¥–∏—Ç—Å—è!\n\n"
                          "–í–æ—Ç —Ç–≤–æ–π –∑–∞—Å–ª—É–∂–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å. –ü–æ–∫–∞–∂–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–∞—Ä–º–µ–Ω—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å **—Ñ–∏—Ä–º–µ–Ω–Ω—ã–µ –≥—Ä–µ–Ω–∫–∏**.")
            if FRIEND_BONUS_STICKER_ID:
                try: bot.send_sticker(referrer_id, FRIEND_BONUS_STICKER_ID)
                except Exception as e: logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä –∑–∞ –¥—Ä—É–≥–∞: {e}")
            bot.send_message(referrer_id, bonus_text)
            mark_referral_bonus_claimed(referred_user_id)
            logging.info(f"–ë–æ–Ω—É—Å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ {referred_user_id} —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω {referrer_id}.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º: {e}")

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–≤—ã–Ω–µ—Å–µ–Ω—ã –∑–∞ –ø—Ä–µ–¥–µ–ª—ã register_handlers) ===
def issue_coupon(bot, user_id, username, first_name, chat_id):
    status = get_reward_status(user_id)
    if status in ['issued', 'redeemed']: return
    if status == 'not_found':
        add_new_user(user_id, username or "N/A", first_name, 'direct')
    
    coupon_text = ("üéâ –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω-—Ç–æ–≤–∞—Ä–∏—â, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n\n"
                   "–¢–µ–±–µ –¥–æ—Å—Ç–∞–ª–∞—Å—å —Ñ–∏—Ä–º–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç–æ–π–∫–∞ ¬´–ï–≤–≥–µ–Ω–∏—á¬ª ‚Äî –ø–æ—á—Ç–∏ –∫–∞–∫ –ø—É—Ç—ë–≤–∫–∞ –≤ –ø–∏–æ–Ω–µ—Ä–ª–∞–≥–µ—Ä—å, —Ç–æ–ª—å–∫–æ –ø–æ–≤–µ—Å–µ–ª–µ–µ.\n\n"
                   "–ß—Ç–æ –¥–µ–ª–∞—Ç—å ‚Äî –∫–æ—Ä–æ—Ç–∫–æ –∏ —è—Å–Ω–æ:\n"
                   "1. –ü–æ–∫–∞–∂–∏ —ç—Ç–æ—Ç —ç–∫—Ä–∞–Ω –±–∞—Ä–º–µ–Ω—É-–¥–µ–∂—É—Ä–Ω–æ–º—É.\n"
                   "2. –ü–æ –µ–≥–æ —Å–∏–≥–Ω–∞–ª—É –∂–º–∏ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É ‚Äî –∏ —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∞–µ—à—å —Å—Ç–æ–ø–∫—É!")
    redeem_keyboard = types.InlineKeyboardMarkup()
    redeem_button = types.InlineKeyboardButton(text="üîí –ù–ê–õ–ò–¢–¨ –ü–†–ò –ë–ê–†–ú–ï–ù–ï", callback_data="redeem_reward")
    redeem_keyboard.add(redeem_button)
    try:
        bot.send_sticker(chat_id, NASTOYKA_STICKER_ID)
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä-–∫—É–ø–æ–Ω: {e}")
    bot.send_message(chat_id, coupon_text, parse_mode="Markdown", reply_markup=redeem_keyboard)

def generate_report_text(start_time, end_time, issued, redeemed, redeemed_users, sources, total_redeem_time_seconds):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç '—Å—É–ø–µ—Ä-–æ—Ç—á–µ—Ç–∞' –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö."""
    conversion_rate = round((redeemed / issued) * 100, 1) if issued > 0 else 0
    avg_redeem_time_str = "–Ω/–¥"
    if redeemed > 0:
        avg_seconds = total_redeem_time_seconds / redeemed
        hours = int(avg_seconds // 3600)
        minutes = int((avg_seconds % 3600) // 60)
        avg_redeem_time_str = f"{hours} —á {minutes} –º–∏–Ω"
    report_date = end_time.strftime('%d.%m.%Y')
    header = f"**#–ù–∞—Å—Ç–æ–π–∫–∞_–∑–∞_–ü–æ–¥–ø–∏—Å–∫—É ({report_date})**\n\n"
    period_str = f"**–ü–µ—Ä–∏–æ–¥:** —Å {start_time.strftime('%d.%m %H:%M')} –ø–æ {end_time.strftime('%d.%m %H:%M')}\n\n"
    stats = (f"‚úÖ **–í—ã–¥–∞–Ω–æ –∫—É–ø–æ–Ω–æ–≤:** {issued}\n"
             f"ü•É **–ü–æ–≥–∞—à–µ–Ω–æ –Ω–∞—Å—Ç–æ–µ–∫:** {redeemed}\n"
             f"üìà **–ö–æ–Ω–≤–µ—Ä—Å–∏—è:** {conversion_rate}%\n"
             f"‚è±Ô∏è **–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è:** {avg_redeem_time_str}\n")
    sources_str = ""
    if sources:
        sources_str += "\n**–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:**\n"
        sorted_sources = sorted(sources.items(), key=lambda item: item[1], reverse=True)
        for source, count in sorted_sources:
            sources_str += f"‚Ä¢ {source}: {count}\n"
    users_str = ""
    if redeemed_users:
        users_str += "\n**–ù–∞—Å—Ç–æ–π–∫—É –ø–æ–ª—É—á–∏–ª–∏:**\n"
        for user in redeemed_users[:10]:
            users_str += f"‚Ä¢ {user}\n"
        if len(redeemed_users) > 10:
            users_str += f"...–∏ –µ—â–µ {len(redeemed_users) - 10}."
    return header + period_str + stats + sources_str + users_str

def send_report(bot, chat_id, start_time, end_time):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞."""
    try:
        issued, redeemed, redeemed_users, sources, total_redeem_time = get_report_data_for_period(start_time, end_time)
        if issued == 0:
            bot.send_message(chat_id, f"–ó–∞ –ø–µ—Ä–∏–æ–¥ —Å {start_time.strftime('%d.%m %H:%M')} –ø–æ {end_time.strftime('%d.%m %H:%M')} –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞.")
            return
        report_text = generate_report_text(start_time, end_time, issued, redeemed, redeemed_users, sources, total_redeem_time)
        bot.send_message(chat_id, report_text, parse_mode="Markdown")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –≤ —á–∞—Ç {chat_id}: {e}")

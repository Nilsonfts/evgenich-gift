import logging
import datetime
from telebot import types
import pytz
from config import (
    CHANNEL_ID, HELLO_STICKER_ID, NASTOYKA_STICKER_ID, THANK_YOU_STICKER_ID,
    ADMIN_IDS, REPORT_CHAT_ID
)
from g_sheets import get_reward_status, add_new_user, redeem_reward, get_report_data_for_period

def register_handlers(bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–Ω–æ–ø–æ–∫."""

    # === –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ ===
    @bot.message_handler(commands=['start'])
    def handle_start(message: types.Message):
        user_id = message.from_user.id
        status = get_reward_status(user_id)
        if status in ['issued', 'redeemed']:
            bot.send_message(user_id, "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞. üòâ\n\n–ï—Å–ª–∏ –∏—â–µ—à—å —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /channel.")
        else:
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            get_gift_button = types.KeyboardButton("ü•É –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç–æ–π–∫—É –ø–æ —Ç–∞–ª–æ–Ω—É")
            keyboard.add(get_gift_button)
            bot.send_message(message.chat.id,
                             "–ü—Ä–∏–≤–µ—Ç, —Ç–æ–≤–∞—Ä–∏—â! –ì–æ—Ç–æ–≤ –æ–±–º–µ–Ω—è—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≤–∫—É—Å –¥–µ—Ç—Å—Ç–≤–∞?",
                             reply_markup=keyboard)

    @bot.message_handler(commands=['channel'])
    def handle_channel_command(message):
        keyboard = types.InlineKeyboardMarkup()
        channel_url = f"https://t.me/{CHANNEL_ID.lstrip('@')}"
        url_button = types.InlineKeyboardButton(text="‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª", url=channel_url)
        keyboard.add(url_button)
        bot.send_message(message.chat.id, "–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª:", reply_markup=keyboard)

    @bot.message_handler(func=lambda message: message.text == "ü•É –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç–æ–π–∫—É –ø–æ —Ç–∞–ª–æ–Ω—É")
    def handle_get_gift_press(message: types.Message):
        user_id = message.from_user.id
        status = get_reward_status(user_id)
        if status in ['issued', 'redeemed']:
            bot.send_message(user_id, "–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ —Å–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏! üòâ")
            return
        try:
            chat_member = bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
            if chat_member.status in ['member', 'administrator', 'creator']:
                bot.send_message(user_id, "–£–≤–∞–∂–∞—é ‚Äî –ø–æ–¥–ø–∏—Å–∞–ª—Å—è! –ü–æ–ª—É—á–∞–π –≥–æ—Å—Ç–∏–Ω–µ—Ü.")
                issue_coupon(bot, user_id, message.from_user.username, message.from_user.first_name, message.chat.id)
                return
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}: {e}")
        welcome_text = ("–û—Ç–ª–∏—á–Ω–æ! üëç\n\n"
                        "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç–æ–π–∫—É, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª. –≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ —Å–µ–∫—É–Ω–¥—É.\n\n"
                        "–ö–æ–≥–¥–∞ –ø–æ–¥–ø–∏—à–µ—à—å—Å—è ‚Äî –Ω–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è¬ª –∑–¥–µ—Å—å –∂–µ.")
        inline_keyboard = types.InlineKeyboardMarkup(row_width=1)
        channel_url = f"https://t.me/{CHANNEL_ID.lstrip('@')}"
        subscribe_button = types.InlineKeyboardButton(text="‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞–Ω–∞–ª—É", url=channel_url)
        check_button = types.InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å!", callback_data="check_subscription")
        inline_keyboard.add(subscribe_button, check_button)
        try:
            bot.send_sticker(message.chat.id, HELLO_STICKER_ID)
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä: {e}")
        bot.send_message(message.chat.id, welcome_text, reply_markup=inline_keyboard, parse_mode="Markdown")

    @bot.callback_query_handler(func=lambda call: call.data == "check_subscription")
    def handle_check_subscription(call: types.CallbackQuery):
        user_id = call.from_user.id
        bot.answer_callback_query(call.id, text="–ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É...")
        try:
            chat_member = bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
            if chat_member.status in ['member', 'administrator', 'creator']:
                bot.delete_message(call.message.chat.id, call.message.message_id)
                issue_coupon(bot, user_id, call.from_user.username, call.from_user.first_name, call.message.chat.id)
            else:
                bot.answer_callback_query(call.id, "–ù—É –∫—É–¥–∞ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏, —Ä–æ–¥–Ω–æ–π? –¢–∞–º –≤—Å—ë –ø–æ-—á–µ—Å—Ç–Ω–æ–º—É.", show_alert=True)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}: {e}")
            bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

    @bot.callback_query_handler(func=lambda call: call.data == "redeem_reward")
    def handle_redeem_reward(call: types.CallbackQuery):
        user_id = call.from_user.id
        if redeem_reward(user_id):
            final_text = "‚úÖ –ù–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏. üòâ"
            bot.delete_message(call.message.chat.id, call.message.message_id)
            bot.send_message(call.message.chat.id, final_text)
            try:
                bot.send_sticker(call.message.chat.id, THANK_YOU_STICKER_ID)
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—â–∞–ª—å–Ω—ã–π —Å—Ç–∏–∫–µ—Ä: {e}")
        else:
            bot.answer_callback_query(call.id, "–≠—Ç–∞ –Ω–∞–≥—Ä–∞–¥–∞ —É–∂–µ –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞.", show_alert=True)

    # === –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ===
    @bot.message_handler(commands=['admin'])
    def handle_admin(message: types.Message):
        if message.from_user.id not in ADMIN_IDS:
            bot.reply_to(message, "‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return
        keyboard = types.InlineKeyboardMarkup()
        report_button = types.InlineKeyboardButton("üìä –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –∑–∞ —Ç–µ–∫—É—â—É—é —Å–º–µ–Ω—É", callback_data="admin_report")
        keyboard.add(report_button)
        bot.send_message(message.chat.id, "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=keyboard)

    @bot.callback_query_handler(func=lambda call: call.data.startswith('admin_'))
    def handle_admin_callbacks(call: types.CallbackQuery):
        if call.from_user.id not in ADMIN_IDS:
            bot.answer_callback_query(call.id, "‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return
        action = call.data.split('_')[1]
        if action == 'report':
            bot.answer_callback_query(call.id, "–§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á–µ—Ç...")
            send_manual_report(bot, call.message.chat.id)

    # === –°–ö–†–´–¢–ê–Ø –ö–û–ú–ê–ù–î–ê –î–õ–Ø –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê ===
    @bot.message_handler(commands=['send_daily_report'])
    def handle_send_report_command(message):
        send_scheduled_report(bot)

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
def issue_coupon(bot, user_id, username, first_name, chat_id):
    """–í—ã–¥–∞–µ—Ç –∫—É–ø–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    status = get_reward_status(user_id)
    if status in ['issued', 'redeemed']: return
    add_new_user(user_id, username or "N/A", first_name)
    
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ó–î–ï–°–¨ ---
    coupon_text = (
        "üéâ –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω-—Ç–æ–≤–∞—Ä–∏—â, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n\n"
        "–¢–µ–±–µ –¥–æ—Å—Ç–∞–ª–∞—Å—å —Ñ–∏—Ä–º–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç–æ–π–∫–∞ ¬´–ï–≤–≥–µ–Ω–∏—á¬ª ‚Äî –ø–æ—á—Ç–∏ –∫–∞–∫ –ø—É—Ç—ë–≤–∫–∞ –≤ –ø–∏–æ–Ω–µ—Ä–ª–∞–≥–µ—Ä—å, —Ç–æ–ª—å–∫–æ –ø–æ–≤–µ—Å–µ–ª–µ–µ.\n\n"
        "–ß—Ç–æ –¥–µ–ª–∞—Ç—å ‚Äî –∫–æ—Ä–æ—Ç–∫–æ –∏ —è—Å–Ω–æ:\n"
        "1. –ü–æ–∫–∞–∂–∏ —ç—Ç–æ—Ç —ç–∫—Ä–∞–Ω –±–∞—Ä–º–µ–Ω—É-–¥–µ–∂—É—Ä–Ω–æ–º—É.\n"
        "2. –ü–æ –µ–≥–æ —Å–∏–≥–Ω–∞–ª—É –∂–º–∏ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É ‚Äî –∏ —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∞–µ—à—å —Å—Ç–æ–ø–∫—É!"
    )
    redeem_keyboard = types.InlineKeyboardMarkup()
    redeem_button = types.InlineKeyboardButton(
        text="üîí –ù–ê–õ–ò–¢–¨ –ü–†–ò –ë–ê–†–ú–ï–ù–ï", # <-- –ò–ó–ú–ï–ù–ï–ù–ù–ê–Ø –ö–ù–û–ü–ö–ê
        callback_data="redeem_reward"
    )
    redeem_keyboard.add(redeem_button)
    
    try:
        bot.send_sticker(chat_id, NASTOYKA_STICKER_ID)
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä-–∫—É–ø–æ–Ω: {e}")
        
    bot.send_message(chat_id, coupon_text, parse_mode="Markdown", reply_markup=redeem_keyboard)

def generate_report_text(start_time, end_time, issued, redeemed):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö."""
    return (f"**#–û—Ç—á–µ—Ç_–¢–ì_–ù–∞—Å—Ç–æ–π–∫–∞_–∑–∞_–ü–æ–¥–ø–∏—Å–∫—É**\n\n"
            f"**–ü–µ—Ä–∏–æ–¥:** —Å {start_time.strftime('%d.%m %H:%M')} –ø–æ {end_time.strftime('%d.%m %H:%M')}\n\n"
            f"‚úÖ **–í—ã–¥–∞–Ω–æ –∫—É–ø–æ–Ω–æ–≤ (–ø–æ–¥–ø–∏—Å–∞–ª–æ—Å—å):** {issued}\n"
            f"ü•É **–ü–æ–≥–∞—à–µ–Ω–æ (–≤—ã–ø–∏—Ç–æ –Ω–∞—Å—Ç–æ–µ–∫):** {redeemed}")

def send_scheduled_report(bot):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –∑–∞ –ø—Ä–æ—à–µ–¥—à—É—é —Å–º–µ–Ω—É –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é."""
    tz_moscow = pytz.timezone('Europe/Moscow')
    now_moscow = datetime.datetime.now(tz_moscow)
    end_time = now_moscow.replace(hour=6, minute=0, second=0, microsecond=0)
    start_time = (end_time - datetime.timedelta(days=1)).replace(hour=12, minute=0, second=0, microsecond=0)
    issued, redeemed = get_report_data_for_period(start_time, end_time)
    report_text = generate_report_text(start_time, end_time, issued, redeemed)
    try:
        bot.send_message(REPORT_CHAT_ID, report_text, parse_mode="Markdown")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–ª–∞–Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç –≤ —á–∞—Ç {REPORT_CHAT_ID}: {e}")

def send_manual_report(bot, chat_id):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –∑–∞ —Ç–µ–∫—É—â—É—é —Å–º–µ–Ω—É –≤—Ä—É—á–Ω—É—é."""
    tz_moscow = pytz.timezone('Europe/Moscow')
    now_moscow = datetime.datetime.now(tz_moscow)
    end_time = now_moscow
    if now_moscow.hour < 12:
        start_time = (now_moscow - datetime.timedelta(days=1)).replace(hour=12, minute=0, second=0, microsecond=0)
    else:
        start_time = now_moscow.replace(hour=12, minute=0, second=0, microsecond=0)
    issued, redeemed = get_report_data_for_period(start_time, end_time)
    report_text = generate_report_text(start_time, end_time, issued, redeemed)
    try:
        bot.send_message(chat_id, report_text, parse_mode="Markdown")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä—É—á–Ω–æ–π –æ—Ç—á–µ—Ç –≤ —á–∞—Ç {chat_id}: {e}")

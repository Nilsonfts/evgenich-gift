# handlers.py (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
"""
–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–Ω–æ–ø–æ–∫ (—Ö–µ–Ω–¥–ª–µ—Ä—ã) –¥–ª—è –±–æ—Ç–∞.
–û–Ω –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π.
"""
import logging
import os
import datetime
import random
import pytz
import threading
import time
import pandas as pd
from telebot import types
from collections import Counter

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–∏—Ö —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
from config import *
from state import *
from g_sheets import get_sheet
from utils import (
    is_admin, admin_required, get_username, get_chat_title,
    init_user_data, init_shift_data, handle_user_return,
    save_history_event, save_json_data, generate_detailed_report
)
from scheduler import send_end_of_shift_report_for_chat

# –ò—Å–ø–æ–ª—å–∑—É–µ–º openai, –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
try:
    import openai
    client = openai.OpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY and openai else None
except ImportError:
    client = None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ –ø–µ—Ä–µ–¥–∞—á–µ —Å–º–µ–Ω—ã
# –§–æ—Ä–º–∞—Ç: { chat_id: { 'from_id': int, 'to_id': int, 'message_id': int, 'timer': Timer } }
pending_transfers = {}


def register_handlers(bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–ª–±—ç–∫–æ–≤ –¥–ª—è –±–æ—Ç–∞."""

    # ========================================
    #   –í–ù–£–¢–†–ï–ù–ù–ò–ï –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
    # ========================================
    def analyze_voice_thread(audio_path: str, user_data: dict, chat_id: int):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞."""
        if not client or not ad_templates:
            if os.path.exists(audio_path): os.remove(audio_path)
            return

        chat_config = chat_configs.get(chat_id, {})
        brand, city = chat_config.get("brand"), chat_config.get("city")
        if not brand or not city:
            if os.path.exists(audio_path): os.remove(audio_path)
            return

        templates_for_location = ad_templates.get(brand, {}).get(city)
        if not templates_for_location:
            if os.path.exists(audio_path): os.remove(audio_path)
            return

        try:
            with open(audio_path, "rb") as audio_file:
                transcript = client.audio.transcriptions.create(model="whisper-1", file=audio_file)
            
            recognized_text = transcript.text
            if not recognized_text.strip(): return

            system_prompt = "–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ö–æ–¥–∏—Ç –≤ —Ç–µ–∫—Å—Ç–µ –¥–∏–∫—Ç–æ—Ä–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞. –í –æ—Ç–≤–µ—Ç –≤–µ—Ä–Ω–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –í–°–ï–• –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤, –∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏. –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ—Ç, –≤–µ—Ä–Ω–∏ 'None'."
            ad_list_for_prompt = "\n".join([f"- {name}: '{text}'" for name, text in templates_for_location.items()])
            user_prompt = f"–¢–µ–∫—Å—Ç –¥–∏–∫—Ç–æ—Ä–∞: '{recognized_text}'.\n\n–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤:\n{ad_list_for_prompt}\n\n–ö–∞–∫–∏–µ —à–∞–±–ª–æ–Ω—ã –±—ã–ª–∏ —É–ø–æ–º—è–Ω—É—Ç—ã?"

            completion = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "system", "content": system_prompt}, {"role": "user", "content": user_prompt}],
                temperature=0
            )
            analysis_result_text = completion.choices[0].message.content.strip()

            if analysis_result_text != 'None':
                found_templates = [line.strip() for line in analysis_result_text.splitlines() if line.strip() in templates_for_location]
                if found_templates:
                    user_data['recognized_ads'].extend(found_templates)
                    logging.info(f"GPT ({chat_id}) –æ–ø—Ä–µ–¥–µ–ª–∏–ª —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {found_templates}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ OpenAI ({chat_id}): {e}")
            try:
                if BOSS_ID: bot.send_message(BOSS_ID, f"‚ùóÔ∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ—á–∏ OpenAI –≤ —á–∞—Ç–µ {get_chat_title(bot, chat_id)}:\n`{e}`")
            except Exception as send_e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° –æ–± –æ—à–∏–±–∫–µ: {send_e}")
        finally:
            if os.path.exists(audio_path):
                os.remove(audio_path)

    # ========================================
    #   –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô
    # ========================================
    @bot.message_handler(content_types=['voice'])
    def handle_voice_message(message: types.Message):
        chat_id = message.chat.id
        if chat_id > 0: return

        user_id = message.from_user.id
        username = get_username(message.from_user)
        now_moscow = datetime.datetime.now(pytz.timezone('Europe/Moscow'))

        if chat_id not in chat_data: init_shift_data(chat_id)
        if user_id not in chat_data[chat_id]['users']:
            chat_data[chat_id]['users'][user_id] = init_user_data(user_id, username)

        is_new_main = False
        if chat_data[chat_id].get('main_id') is None:
            chat_data[chat_id]['main_id'] = user_id
            chat_data[chat_id]['main_username'] = username
            is_new_main = True

        if chat_data[chat_id]['main_id'] == user_id:
            if is_new_main:
                phrase = random.choice(soviet_phrases.get("system_messages", {}).get('first_voice_new_main', ["üëë {username} —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≥–ª–∞–≤–Ω—ã–º, –∑–∞–ø–∏—Å–∞–≤ –ø–µ—Ä–≤–æ–µ –ì–°!"]))
                bot.send_message(chat_id, phrase.format(username=username))
                save_history_event(chat_id, user_id, username, "–°—Ç–∞–ª –≥–ª–∞–≤–Ω—ã–º (–ø–µ—Ä–≤–æ–µ –ì–°)")

            user_data = chat_data[chat_id]['users'][user_id]
            
            last_voice_time_str = user_data.get('last_voice_time')
            if not is_new_main and last_voice_time_str:
                last_voice_time = datetime.datetime.fromisoformat(last_voice_time_str)
                time_since_last = (now_moscow - last_voice_time).total_seconds()
                if time_since_last < VOICE_COOLDOWN_SECONDS:
                    remaining = int(VOICE_COOLDOWN_SECONDS - time_since_last)
                    phrase = random.choice(soviet_phrases.get("system_messages", {}).get('voice_cooldown', ["–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ! –ü–∞—É–∑–∞ {remaining} —Å–µ–∫."]))
                    bot.reply_to(message, phrase.format(remaining=remaining), disable_notification=True)
                    return

            if message.voice.duration < VOICE_MIN_DURATION_SECONDS:
                bot.reply_to(message, f"*{random.choice(soviet_phrases.get('too_short', ['–ö–æ—Ä–æ—Ç–∫–æ']))}* ({message.voice.duration} —Å–µ–∫)")
                return

            bot.send_message(chat_id, f"*{random.choice(soviet_phrases.get('accept', ['–ü—Ä–∏–Ω—è—Ç–æ']))}*", reply_to_message_id=message.message_id)

            if user_data.get('last_voice_time'):
                delta_minutes = (now_moscow - datetime.datetime.fromisoformat(user_data['last_voice_time'])).total_seconds() / 60
                user_data['voice_deltas'].append(delta_minutes)

            user_data['count'] += 1
            user_data['last_voice_time'] = now_moscow.isoformat() # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
            user_data['voice_durations'].append(message.voice.duration)
            user_data['voice_timeout_reminder_sent'] = False

            if client:
                try:
                    file_info = bot.get_file(message.voice.file_id)
                    downloaded_file = bot.download_file(file_info.file_path)
                    file_path = f"voice_{message.message_id}.ogg"
                    with open(file_path, 'wb') as new_file:
                        new_file.write(downloaded_file)
                    threading.Thread(target=analyze_voice_thread, args=(file_path, user_data, chat_id)).start()
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞: {e}")

    @bot.message_handler(func=lambda m: m.text and any(word in m.text.lower().split() for word in BREAK_KEYWORDS))
    def handle_break_request(message: types.Message):
        chat_id = message.chat.id
        user_id = message.from_user.id
        if chat_id > 0 or chat_data.get(chat_id, {}).get('main_id') != user_id: return
        
        user_data = chat_data[chat_id]['users'][user_id]
        
        if user_data.get('on_break'):
            phrase = random.choice(soviet_phrases.get("system_messages", {}).get('break_already_on', ["–í—ã —É–∂–µ –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤–µ."]))
            return bot.reply_to(message, phrase)
            
        now_moscow = datetime.datetime.now(pytz.timezone('Europe/Moscow'))
        last_break_str = user_data.get('last_break_time')
        
        if last_break_str:
            last_break_time = datetime.datetime.fromisoformat(last_break_str)
            if (now_moscow - last_break_time).total_seconds() / 60 < BREAK_DELAY_MINUTES:
                remaining_time = int(BREAK_DELAY_MINUTES - (now_moscow - last_break_time).total_seconds() / 60)
                phrase = random.choice(soviet_phrases.get("system_messages", {}).get('break_cooldown', ["–°–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–µ—Ä—ã–≤ –º–æ–∂–Ω–æ –≤–∑—è—Ç—å —á–µ—Ä–µ–∑ {remaining_time} –º–∏–Ω."]))
                return bot.reply_to(message, phrase.format(remaining_time=remaining_time))
            
        user_data.update({
            'on_break': True, 
            'break_start_time': now_moscow.isoformat(), # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
            'last_break_time': now_moscow.isoformat(), # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
            'breaks_count': user_data['breaks_count'] + 1,
            'last_break_reminder_time': None
        })
        response_phrase = random.choice(soviet_phrases.get('break_acknowledgement', ['–ü–µ—Ä–µ—Ä—ã–≤ –Ω–∞—á–∞—Ç.']))
        bot.reply_to(message, f"{response_phrase} –Ω–∞ {BREAK_DURATION_MINUTES} –º–∏–Ω—É—Ç.")

    @bot.message_handler(func=lambda m: m.text and any(word in m.text.lower().split() for word in RETURN_CONFIRM_WORDS))
    def handle_return_message(message: types.Message):
        chat_id = message.chat.id
        user_id = message.from_user.id
        if chat_id > 0 or chat_data.get(chat_id, {}).get('main_id') != user_id: return
        
        handle_user_return(bot, chat_id, user_id)

    # ========================================
    #   –§–£–ù–ö–¶–ò–û–ù–ê–õ: –ü–ï–†–ï–î–ê–ß–ê –°–ú–ï–ù–´
    # ========================================
    def cancel_transfer(chat_id: int):
        """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–¥–∞—á–µ —Å–º–µ–Ω—ã –ø–æ —Ç–∞–π–º–∞—É—Ç—É."""
        if chat_id in pending_transfers:
            transfer_info = pending_transfers.pop(chat_id)
            try:
                bot.edit_message_reply_markup(chat_id, transfer_info['message_id'], reply_markup=None)
                phrase = random.choice(soviet_phrases.get("system_messages", {}).get('shift_transfer_timeout', ["–í—Ä–µ–º—è –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ —Å–º–µ–Ω—ã –≤—ã—à–ª–æ. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–æ."]))
                bot.send_message(chat_id, phrase)
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –ø–µ—Ä–µ–¥–∞—á—É —Å–º–µ–Ω—ã (—Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–≥–ª–æ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ): {e}")

    @bot.message_handler(commands=['–ø–µ—Ä–µ–¥–∞—Ç—å'])
    def handle_shift_transfer_request(message: types.Message):
        chat_id = message.chat.id
        from_user = message.from_user
        
        if chat_data.get(chat_id, {}).get('main_id') != from_user.id:
            return bot.reply_to(message, "–¢–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π –≥–ª–∞–≤–Ω—ã–π –Ω–∞ —Å–º–µ–Ω–µ –º–æ–∂–µ—Ç –ø–µ—Ä–µ–¥–∞—Ç—å –µ–µ.")

        if not message.reply_to_message:
            return bot.reply_to(message, "–ß—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å —Å–º–µ–Ω—É, –æ—Ç–≤–µ—Ç—å—Ç–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –µ–µ –ø–µ—Ä–µ–¥–∞—Ç—å.")

        to_user = message.reply_to_message.from_user
        if to_user.is_bot: return bot.reply_to(message, "–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–¥–∞—Ç—å —Å–º–µ–Ω—É –±–æ—Ç—É.")
        if to_user.id == from_user.id: return bot.reply_to(message, "–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–¥–∞—Ç—å —Å–º–µ–Ω—É —Å–∞–º–æ–º—É —Å–µ–±–µ.")
        if chat_id in pending_transfers: return bot.reply_to(message, "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–¥–∞—á–µ —Å–º–µ–Ω—ã. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")

        from_username = get_username(from_user)
        to_username = get_username(to_user)

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å —Å–º–µ–Ω—É", callback_data=f"transfer_accept_{to_user.id}"))
        
        phrase_template = random.choice(soviet_phrases.get("system_messages", {}).get('shift_transfer_offer', ["."]))
        text = phrase_template.format(from_username=from_username, to_username=to_username)
        
        sent_message = bot.send_message(chat_id, text, reply_markup=markup)
        
        timer = threading.Timer(300, cancel_transfer, args=[chat_id])
        timer.start()
        
        pending_transfers[chat_id] = {
            'from_id': from_user.id, 'from_username': from_username,
            'to_id': to_user.id, 'to_username': to_username,
            'message_id': sent_message.message_id, 'timer': timer
        }

    @bot.callback_query_handler(func=lambda call: call.data.startswith('transfer_accept_'))
    def handle_shift_transfer_accept(call: types.CallbackQuery):
        chat_id = call.message.chat.id
        user_id = call.from_user.id
        
        if chat_id not in pending_transfers:
            return bot.answer_callback_query(call.id, "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–¥–∞—á–µ —Å–º–µ–Ω—ã —É–∂–µ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ.", show_alert=True)
        
        transfer_info = pending_transfers[chat_id]
        
        if user_id != transfer_info['to_id']:
            return bot.answer_callback_query(call.id, "–≠—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –Ω–µ –≤–∞–º.", show_alert=True)
            
        transfer_info['timer'].cancel()

        chat_data[chat_id]['main_id'] = transfer_info['to_id']
        chat_data[chat_id]['main_username'] = transfer_info['to_username']
        
        if transfer_info['to_id'] not in chat_data[chat_id]['users']:
            chat_data[chat_id]['users'][transfer_info['to_id']] = init_user_data(transfer_info['to_id'], transfer_info['to_username'])

        del pending_transfers[chat_id]
        
        bot.answer_callback_query(call.id, "–°–º–µ–Ω–∞ –ø—Ä–∏–Ω—è—Ç–∞!")
        try: bot.delete_message(chat_id, call.message.message_id)
        except Exception: pass
        
        phrase_template = random.choice(soviet_phrases.get("system_messages", {}).get('shift_transfer_success', ["."]))
        text = phrase_template.format(from_username=transfer_info['from_username'], to_username=transfer_info['to_username'])
        bot.send_message(chat_id, text)
        save_history_event(chat_id, user_id, transfer_info['to_username'], f"–ü—Ä–∏–Ω—è–ª —Å–º–µ–Ω—É –æ—Ç {transfer_info['from_username']}")


    # ========================================
    #   –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –ö–û–ú–ê–ù–î–´
    # ========================================
    @bot.message_handler(commands=['start', '—Å—Ç–∞—Ä—Ç'])
    def handle_start(message: types.Message):
        chat_id = message.chat.id
        if chat_id > 0: 
            phrase = random.choice(soviet_phrases.get("system_messages", {}).get('group_only_command', ["–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ."]))
            return bot.reply_to(message, phrase)
            
        from_user = message.from_user
        username = get_username(from_user)
        
        if chat_id not in chat_data: init_shift_data(chat_id)
        if from_user.id not in chat_data[chat_id]['users']:
            chat_data[chat_id]['users'][from_user.id] = init_user_data(from_user.id, username)
            
        if chat_data[chat_id].get('main_id') is not None:
            main_username = chat_data[chat_id].get('main_username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            phrase = random.choice(soviet_phrases.get("system_messages", {}).get('start_shift_fail_taken', ["–°–º–µ–Ω–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞. –¢–µ–∫—É—â–∏–π –≥–ª–∞–≤–Ω—ã–π: {main_username}."]))
            return bot.reply_to(message, phrase.format(main_username=main_username))
            
        chat_data[chat_id]['main_id'] = from_user.id
        chat_data[chat_id]['main_username'] = username
        
        phrase = random.choice(soviet_phrases.get("system_messages", {}).get('start_shift_success', ["üëë {username}, –≤—ã –∑–∞—Å—Ç—É–ø–∏–ª–∏ –Ω–∞ —Å–º–µ–Ω—É! –£–¥–∞—á–∏!"]))
        bot.send_message(chat_id, phrase.format(username=username))
        save_history_event(chat_id, from_user.id, username, "–°—Ç–∞–ª –≥–ª–∞–≤–Ω—ã–º –Ω–∞ —Å–º–µ–Ω–µ (–∫–æ–º–∞–Ω–¥–∞ /start)")

    @bot.message_handler(commands=['–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π', 'check'])
    def handle_check(message: types.Message):
        chat_id = message.chat.id
        user_id = message.from_user.id
        data = chat_data.get(chat_id)
        
        if not data or not data.get('main_id'):
            phrase = random.choice(soviet_phrases.get("system_messages", {}).get('shift_not_started', ["–°–º–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å."]))
            return bot.reply_to(message, phrase)
            
        main_user_id = data['main_id']
        if user_id != main_user_id:
            main_username = data.get('main_username')
            phrase = random.choice(soviet_phrases.get("system_messages", {}).get('only_for_main_user', ["–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π –≥–ª–∞–≤–Ω—ã–π –Ω–∞ —Å–º–µ–Ω–µ: {main_username}."]))
            return bot.reply_to(message, phrase.format(main_username=main_username))
            
        main_user_data = data.get('users', {}).get(main_user_id)
        shift_goal = data.get('shift_goal', EXPECTED_VOICES_PER_SHIFT)
        plan_percent = (main_user_data['count'] / shift_goal * 100) if shift_goal > 0 else 0
        report_lines = [
            f"üìã *–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –≤–∞—Å* ({datetime.datetime.now(pytz.timezone('Europe/Moscow')).strftime('%H:%M')})",
            f"üó£Ô∏è **–ì–æ–ª–æ—Å–æ–≤—ã—Ö:** {main_user_data['count']} –∏–∑ {shift_goal} ({plan_percent:.0f}%)",
            f"‚òï **–ü–µ—Ä–µ—Ä—ã–≤–æ–≤:** {main_user_data['breaks_count']}",
            f"‚è≥ **–û–ø–æ–∑–¥–∞–Ω–∏–π —Å –ø–µ—Ä–µ—Ä—ã–≤–∞:** {main_user_data['late_returns']}"
        ]
        ad_counts = Counter(main_user_data.get('recognized_ads', []))
        if ad_counts:
            report_lines.append("\n**üìù –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:**")
            for ad, count in ad_counts.items():
                report_lines.append(f"‚úîÔ∏è {ad} (x{count})")
        bot.reply_to(message, "\n".join(report_lines), parse_mode="Markdown")

    @bot.message_handler(commands=['—Å–≤–æ–¥–∫–∞'])
    def my_total_stats(message: types.Message):
        if not pd: return bot.reply_to(message, "–ú–æ–¥—É–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö (pandas) –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.")
        user_id = message.from_user.id
        username = get_username(message.from_user)
        bot.reply_to(message, f"üìä –°–æ–±–∏—Ä–∞—é –≤–∞—à—É –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã, {username}. –ú–∏–Ω—É—Ç–∫—É...")
        worksheet = get_sheet()
        if not worksheet: return bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google –¢–∞–±–ª–∏—Ü–µ.")
        try:
            df = pd.DataFrame(worksheet.get_all_records())
            if df.empty or 'ID –í–µ–¥—É—â–µ–≥–æ' not in df.columns: return bot.send_message(message.chat.id, "–í —Ç–∞–±–ª–∏—Ü–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            df['ID –í–µ–¥—É—â–µ–≥–æ'] = pd.to_numeric(df['ID –í–µ–¥—É—â–µ–≥–æ'], errors='coerce')
            user_df = df[df['ID –í–µ–¥—É—â–µ–≥–æ'] == user_id].copy()
            if user_df.empty: return bot.send_message(message.chat.id, f"{username}, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞—à–∏—Ö —Å–º–µ–Ω –≤ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.")
            numeric_cols = ['–ì–æ–ª–æ—Å–æ–≤—ã—Ö (—à—Ç)', '–ü–µ—Ä–µ—Ä—ã–≤–æ–≤ (—à—Ç)', '–û–ø–æ–∑–¥–∞–Ω–∏–π (—à—Ç)']
            for col in numeric_cols: user_df[col] = pd.to_numeric(user_df[col], errors='coerce').fillna(0)
            total_shifts = len(user_df)
            total_voices = user_df['–ì–æ–ª–æ—Å–æ–≤—ã—Ö (—à—Ç)'].sum()
            total_breaks = user_df['–ü–µ—Ä–µ—Ä—ã–≤–æ–≤ (—à—Ç)'].sum()
            total_lates = user_df['–û–ø–æ–∑–¥–∞–Ω–∏–π (—à—Ç)'].sum()
            report_text = (
                f"‚≠êÔ∏è **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {username}** ‚≠êÔ∏è\n\n"
                f"üëë **–í—Å–µ–≥–æ —Å–º–µ–Ω –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ:** {total_shifts}\n"
                f"üó£Ô∏è **–í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∑–∞–ø–∏—Å–∞–Ω–æ:** {int(total_voices)}\n"
                f"‚òïÔ∏è **–í—Å–µ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤:** {int(total_breaks)}\n"
                f"‚è≥ **–í—Å–µ–≥–æ –æ–ø–æ–∑–¥–∞–Ω–∏–π —Å –ø–µ—Ä–µ—Ä—ã–≤–∞:** {int(total_lates)}"
            )
            bot.send_message(message.chat.id, report_text, parse_mode="Markdown")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ Google Sheets –¥–ª—è /—Å–≤–æ–¥–∫–∞: {e}")
            phrase = random.choice(soviet_phrases.get("system_messages", {}).get('generic_error', ["–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã."]))
            bot.send_message(message.chat.id, phrase)

    @bot.message_handler(commands=['help'])
    def handle_help(message: types.Message):
        help_text_lines = [
            "üìò **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–µ–¥—É—â–µ–≥–æ:**\n",
            "`/start` –∏–ª–∏ `/—Å—Ç–∞—Ä—Ç`",
            "–ó–∞–Ω—è—Ç—å —Å–º–µ–Ω—É, –µ—Å–ª–∏ –æ–Ω–∞ —Å–≤–æ–±–æ–¥–Ω–∞.\n",
            "`/–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π` –∏–ª–∏ `/check`",
            "–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –ª–∏—á–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω–µ.\n",
            "`/—Å–≤–æ–¥–∫–∞`",
            "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è.\n",
            "`/–ø–µ—Ä–µ–¥–∞—Ç—å`",
            "–ü–µ—Ä–µ–¥–∞—Ç—å —Å–º–µ–Ω—É –¥—Ä—É–≥–æ–º—É (–Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ).\n",
            "‚òïÔ∏è –î–ª—è –ø–µ—Ä–µ—Ä—ã–≤–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç `–ø–µ—Ä–µ—Ä—ã–≤`, `–æ–±–µ–¥` –∏–ª–∏ `–æ—Ç–¥—ã—Ö`.",
            "‚úÖ –î–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è ‚Äî `–≤–µ—Ä–Ω—É–ª—Å—è`, `–Ω–∞ –º–µ—Å—Ç–µ`."
        ]
        bot.reply_to(message, "\n".join(help_text_lines), parse_mode="Markdown")

    # ========================================
    #   –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–´–ï –ö–û–ú–ê–ù–î–´
    # ========================================

    @bot.message_handler(commands=['admin'])
    @admin_required(bot)
    def handle_admin_panel(message: types.Message):
        user_id = message.from_user.id
        panel_text = [
            "**‚öúÔ∏è –ü–∞–Ω–µ–ª—å —Ä–∞–±–æ—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ‚öúÔ∏è**\n",
            "`/status` ‚Äî üìä –°—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω—ã",
            "`/rating` ‚Äî üìà –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
            "`/ads` ‚Äî üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω—ã–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏",
            "`/problems` ‚Äî üö® –ü–æ–∏—Å–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–æ–Ω",
            "`/restart` ‚Äî üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–º–µ–Ω—É",
            "`/report` ‚Äî ‚û°Ô∏è –û—Ç—á–µ—Ç –¥–æ—Å—Ä–æ—á–Ω–æ",
            "`/log` ‚Äî üìú –í—ã–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥ —Å–º–µ–Ω—ã",
            "`/setup_wizard` ‚Äî üßô‚Äç‚ôÇÔ∏è –ú–∞—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞",
        ]
        if user_id == BOSS_ID:
             panel_text.append("`/broadcast` ‚Äî üì¢ –†–∞—Å—Å—ã–ª–∫–∞ (BOSS)")
        
        panel_text.append("\n*–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –≤–≤–µ–¥–∏—Ç–µ /adminhelp*")
        bot.reply_to(message, "\n".join(panel_text), parse_mode="Markdown")

    @bot.message_handler(commands=['adminhelp'])
    @admin_required(bot)
    def handle_admin_help(message: types.Message):
        help_text = [
            "**üõ†Ô∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n"
            "====================\n"
            "**–ê–ù–ê–õ–ò–¢–ò–ö–ê –ò –û–¢–ß–ï–¢–´:**\n",
            "`/status` ‚Äî üìä –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å—Ç–∞—Ç—É—Å *—Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω—ã*: –∫—Ç–æ –Ω–∞ —Å–º–µ–Ω–µ, —Å–∫–æ–ª—å–∫–æ —Å–¥–µ–ª–∞–Ω–æ, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–∞—É–∑–∞–º –∏ —Ç.–¥.",
            "`/rating` ‚Äî üìà –í—ã–≤–æ–¥–∏—Ç –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –≤—Å–µ—Ö –≤–µ–¥—É—â–∏—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã.",
            "`/problems` ‚Äî üö® –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã –∏ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç —Å–º–µ–Ω—ã —Å –Ω–∏–∑–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é, –æ–ø–æ–∑–¥–∞–Ω–∏—è–º–∏ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–∏–º–∏ –ø–∞—É–∑–∞–º–∏.",
            "`/log` ‚Äî üìú –í—ã–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å –∏—Å—Ç–æ—Ä–∏–µ–π –≤—Å–µ—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –∑–∞ *—Ç–µ–∫—É—â—É—é* —Å–º–µ–Ω—É.",
            "\n**–£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ú–ï–ù–û–ô:**\n",
            "`/restart` ‚Äî üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç *—Ç–µ–∫—É—â—É—é* —Å–º–µ–Ω—É. –ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–æ–≤—ã–π `/start` –¥–ª—è –Ω–∞—á–∞–ª–∞.",
            "`/report` ‚Äî ‚û°Ô∏è –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–º–µ–Ω—É –¥–æ—Å—Ä–æ—á–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç.",
            "\n**–£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ù–¢–ï–ù–¢–û–ú –ò –ù–ê–°–¢–†–û–ô–ö–ò:**\n",
            "`/ads` ‚Äî üìù –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω—ã–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏ (–ø—Ä–æ—Å–º–æ—Ç—Ä, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ).",
            "`/setup_wizard` ‚Äî üßô‚Äç‚ôÇÔ∏è –ó–∞–ø—É—Å–∫–∞–µ—Ç —É–¥–æ–±–Ω—ã–π –ø–æ—à–∞–≥–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä –¥–ª—è –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è).",
        ]
        if message.from_user.id == BOSS_ID:
            help_text.append("`/broadcast` ‚Äî üì¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Å–µ —á–∞—Ç—ã, –≥–¥–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è BOSS).")
        
        bot.reply_to(message, "\n".join(help_text), parse_mode="Markdown")

    @bot.message_handler(commands=['status'])
    @admin_required(bot)
    def command_status(message: types.Message):
        chat_id = message.chat.id
        data = chat_data.get(chat_id)
        if not data or not data.get('main_id'):
            phrase = random.choice(soviet_phrases.get("system_messages", {}).get('shift_not_started', ["–°–º–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å."]))
            return bot.send_message(chat_id, phrase)
        
        report_lines = generate_detailed_report(chat_id, data)
        report_text = "\n".join(report_lines)
        bot.send_message(chat_id, report_text, parse_mode="Markdown")
    
    @bot.message_handler(commands=['rating'])
    @admin_required(bot)
    def command_rating(message: types.Message):
        chat_id = message.chat.id
        if not pd: return bot.send_message(chat_id, "–ú–æ–¥—É–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö (pandas) –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.")
        bot.send_message(chat_id, "üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã...")
        worksheet = get_sheet()
        if not worksheet: return bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google –¢–∞–±–ª–∏—Ü–µ.")
        try:
            df = pd.DataFrame(worksheet.get_all_records())
            if df.empty or '–¢–µ–≥ –í–µ–¥—É—â–µ–≥–æ' not in df.columns: return bot.send_message(chat_id, "–í —Ç–∞–±–ª–∏—Ü–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            numeric_cols = ['–ì–æ–ª–æ—Å–æ–≤—ã—Ö (—à—Ç)', '–û–ø–æ–∑–¥–∞–Ω–∏–π (—à—Ç)']
            for col in numeric_cols: df[col] = pd.to_numeric(df[col], errors='coerce')
            df.dropna(subset=numeric_cols, inplace=True)
            summary = df.groupby('–¢–µ–≥ –í–µ–¥—É—â–µ–≥–æ').agg(
                total_shifts=('–î–∞—Ç–∞', 'count'),
                total_voices=('–ì–æ–ª–æ—Å–æ–≤—ã—Ö (—à—Ç)', 'sum'),
                total_lates=('–û–ø–æ–∑–¥–∞–Ω–∏–π (—à—Ç)', 'sum')
            ).reset_index()
            summary['avg_voices'] = summary['total_voices'] / summary['total_shifts']
            summary['lateness_percent'] = (summary['total_lates'] / summary['total_shifts']) * 100
            summary = summary.sort_values(by='avg_voices', ascending=False).reset_index(drop=True)
            report_lines = ["üìä **–û–±—â–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º**\n_(–ù–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets)_\n"]
            medals = {0: "ü•á", 1: "ü•à", 2: "ü•â"}
            for i, row in summary.iterrows():
                rank_icon = medals.get(i, f" {i+1}.")
                report_lines.append(f"*{rank_icon}* {row['–¢–µ–≥ –í–µ–¥—É—â–µ–≥–æ']} ‚Äî *–°—Ä. –ì–°:* `{row['avg_voices']:.1f}` | *–û–ø–æ–∑–¥–∞–Ω–∏—è:* `{row['lateness_percent']:.0f}%` | *–°–º–µ–Ω:* `{row['total_shifts']}`")
            bot.send_message(chat_id, "\n".join(report_lines), parse_mode="Markdown")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ Google Sheets –¥–ª—è /rating: {e}")
            phrase = random.choice(soviet_phrases.get("system_messages", {}).get('generic_error', ["–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã."]))
            bot.send_message(chat_id, phrase)
        
    @bot.message_handler(commands=['problems'])
    @admin_required(bot)
    def command_problems(message: types.Message):
        chat_id = message.chat.id
        if not pd: return bot.send_message(chat_id, "–ú–æ–¥—É–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö (pandas) –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.")
        bot.send_message(chat_id, "üö® –ò—â—É –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–æ–Ω—ã –≤ Google –¢–∞–±–ª–∏—Ü–µ...")
        worksheet = get_sheet()
        if not worksheet: return bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google –¢–∞–±–ª–∏—Ü–µ.")
        try:
            df = pd.DataFrame(worksheet.get_all_records())
            if df.empty: return bot.send_message(chat_id, "–í —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
            numeric_cols = ['–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (%)', '–û–ø–æ–∑–¥–∞–Ω–∏–π (—à—Ç)', '–ú–∞–∫—Å. –ø–∞—É–∑–∞ (–º–∏–Ω)']
            for col in numeric_cols:
                df[col] = df[col].astype(str).str.replace('%', '', regex=False)
                df[col] = pd.to_numeric(df[col], errors='coerce')
            df.dropna(subset=numeric_cols, inplace=True)
            low_perf = df[df['–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (%)'] < 80]
            latecomers = df[df['–û–ø–æ–∑–¥–∞–Ω–∏–π (—à—Ç)'] > 0]
            long_pauses = df[df['–ú–∞–∫—Å. –ø–∞—É–∑–∞ (–º–∏–Ω)'] > (VOICE_TIMEOUT_MINUTES * 1.5)]
            report_lines = ["üö® **–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–æ–Ω**\n"]
            if not low_perf.empty:
                report_lines.append("*üìâ –ù–∏–∑–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ (<80%):*")
                for _, row in low_perf.sort_values(by='–î–∞—Ç–∞', ascending=False).iterrows():
                    report_lines.append(f" - {row.get('–î–∞—Ç–∞', 'N/A')} {row.get('–¢–µ–≥ –í–µ–¥—É—â–µ–≥–æ', 'N/A')}: *{row['–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (%)']:.0f}%*")
            if not latecomers.empty:
                report_lines.append("\n*‚è≥ –û–ø–æ–∑–¥–∞–Ω–∏—è —Å –ø–µ—Ä–µ—Ä—ã–≤–æ–≤:*")
                for _, row in latecomers.sort_values(by='–î–∞—Ç–∞', ascending=False).iterrows():
                    report_lines.append(f" - {row.get('–î–∞—Ç–∞', 'N/A')} {row.get('–¢–µ–≥ –í–µ–¥—É—â–µ–≥–æ', 'N/A')}: *{int(row['–û–ø–æ–∑–¥–∞–Ω–∏–π (—à—Ç)'])}* —Ä–∞–∑(–∞)")
            if not long_pauses.empty:
                report_lines.append("\n*‚è±Ô∏è –°–ª–∏—à–∫–æ–º –¥–æ–ª–≥–∏–µ –ø–∞—É–∑—ã:*")
                for _, row in long_pauses.sort_values(by='–î–∞—Ç–∞', ascending=False).iterrows():
                    report_lines.append(f" - {row.get('–î–∞—Ç–∞', 'N/A')} {row.get('–¢–µ–≥ –í–µ–¥—É—â–µ–≥–æ', 'N/A')}: –º–∞–∫—Å. –ø–∞—É–∑–∞ *{row['–ú–∞–∫—Å. –ø–∞—É–∑–∞ (–º–∏–Ω)']:.0f} –º–∏–Ω*")
            if len(report_lines) == 1:
                bot.send_message(chat_id, "‚úÖ –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–æ–Ω –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!")
            else:
                bot.send_message(chat_id, "\n".join(report_lines), parse_mode="Markdown")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–æ–Ω: {e}")
            bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        
    @bot.message_handler(commands=['restart'])
    @admin_required(bot)
    def command_restart(message: types.Message):
        chat_id = message.chat.id
        if chat_id in chat_data and chat_data[chat_id].get('main_id') is not None:
            init_shift_data(chat_id)
            bot.send_message(chat_id, "üîÑ –°–º–µ–Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –¢–µ–∫—É—â–∏–π –≥–ª–∞–≤–Ω—ã–π –∏ –ø–ª–∞–Ω —Å–±—Ä–æ—à–µ–Ω—ã.")
            save_history_event(chat_id, message.from_user.id, get_username(message.from_user), "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–ª —Å–º–µ–Ω—É")
        else:
            bot.send_message(chat_id, "–ê–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ –∏ —Ç–∞–∫ –Ω–µ –±—ã–ª–æ.")

    @bot.message_handler(commands=['report'])
    @admin_required(bot)
    def command_report(message: types.Message):
        bot.send_message(message.chat.id, "‚è≥ –§–æ—Ä–º–∏—Ä—É—é —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –¥–æ—Å—Ä–æ—á–Ω–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
        send_end_of_shift_report_for_chat(bot, message.chat.id)

    @bot.message_handler(commands=['log'])
    @admin_required(bot)
    def command_log(message: types.Message):
        chat_id = message.chat.id
        history = user_history.get(chat_id)
        if not history:
            return bot.send_message(chat_id, "–ò—Å—Ç–æ—Ä–∏—è —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω—ã –ø—É—Å—Ç–∞.")
        try:
            filename = f"history_{chat_id}_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(f"–ò—Å—Ç–æ—Ä–∏—è —Å–æ–±—ã—Ç–∏–π –¥–ª—è —á–∞—Ç–∞: {get_chat_title(bot, chat_id)}\n" + "="*40 + "\n" + "\n".join(history))
            with open(filename, 'rb') as f_rb:
                bot.send_document(chat_id, f_rb, caption="–õ–æ–≥ —Å–æ–±—ã—Ç–∏–π —Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω—ã.")
            os.remove(filename)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∏—Å—Ç–æ—Ä–∏–∏.")
            
    @bot.message_handler(commands=['broadcast'])
    @admin_required(bot)
    def command_broadcast(message: types.Message):
        if message.from_user.id != BOSS_ID:
            return bot.send_message(message.chat.id, "‚õîÔ∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è BOSS.")
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º —á–∞—Ç–∞–º. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel.")
        bot.register_next_step_handler(msg, process_broadcast_text)
        
    def process_broadcast_text(message: types.Message):
        if message.text == '/cancel':
            return bot.send_message(message.chat.id, "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        if message.from_user.id != BOSS_ID: return
        text_to_send = message.text
        if not text_to_send: return bot.reply_to(message, "–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        sent_count = 0
        total_chats = len(list(chat_configs.keys()))
        bot.send_message(message.chat.id, f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –≤ {total_chats} —á–∞—Ç–æ–≤...")
        for chat_id_str in chat_configs.keys():
            try:
                bot.send_message(int(chat_id_str), f"‚ùóÔ∏è **–í–∞–∂–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞:**\n\n{text_to_send}", parse_mode="Markdown")
                sent_count += 1
                time.sleep(0.1)
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤ —á–∞—Ç {chat_id_str}: {e}")
        bot.send_message(message.chat.id, f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ {sent_count} –∏–∑ {total_chats} —á–∞—Ç–æ–≤.")

    # ========================================
    #   –ù–û–í–´–ô –ú–ê–°–¢–ï–† –ù–ê–°–¢–†–û–ô–ö–ò –ß–ê–¢–ê
    # ========================================

    @bot.message_handler(commands=['setup_wizard'])
    @admin_required(bot)
    def handle_setup_wizard(message: types.Message):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø–æ—à–∞–≥–æ–≤—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É —á–∞—Ç–∞."""
        chat_id = message.chat.id
        user_id = message.from_user.id
        
        user_states[user_id] = {"state": "wizard_awaiting_brand_city", "chat_id": chat_id, "data": {}}
        
        text = ("üßô‚Äç‚ôÇÔ∏è **–ú–∞—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞**\n\n"
                "–Ø –∑–∞–¥–∞–º –≤–∞–º 4 –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. "
                "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –Ω–∞ –ª—é–±–æ–º —à–∞–≥–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel.\n\n"
                "**–®–∞–≥ 1 –∏–∑ 4:** –í–≤–µ–¥–∏—Ç–µ **–±—Ä–µ–Ω–¥** –∏ **–≥–æ—Ä–æ–¥** –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞.\n"
                "*–ü—Ä–∏–º–µ—Ä:* `my-brand moscow`")
        msg = bot.send_message(chat_id, text, parse_mode="Markdown")
        bot.register_next_step_handler(msg, process_wizard_brand_city)

    def process_wizard_brand_city(message: types.Message):
        """–®–∞–≥ 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–µ–Ω–¥–∞ –∏ –≥–æ—Ä–æ–¥–∞."""
        user_id = message.from_user.id
        state = user_states.get(user_id, {})
        if state.get("state") != "wizard_awaiting_brand_city": return
        if message.text == '/cancel':
            del user_states[user_id]
            return bot.reply_to(message, "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

        try:
            brand, city = message.text.split(maxsplit=2)
            state["data"]["brand"] = brand.lower()
            state["data"]["city"] = city.lower()
            
            state["state"] = "wizard_awaiting_timezone"
            text = ("‚úÖ **–®–∞–≥ 2 –∏–∑ 4:** –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ **—á–∞—Å–æ–≤–æ–π –ø–æ—è—Å**.\n"
                    "–í–≤–µ–¥–∏—Ç–µ —Å–º–µ—â–µ–Ω–∏–µ –æ—Ç –ú–æ—Å–∫–≤—ã. *–ü—Ä–∏–º–µ—Ä:* `+3` –∏–ª–∏ `-1`")
            msg = bot.reply_to(message, text, parse_mode="Markdown")
            bot.register_next_step_handler(msg, process_wizard_timezone)
        except ValueError:
            msg = bot.reply_to(message, "‚ùå **–û—à–∏–±–∫–∞.** –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —Å–ª–æ–≤–∞: –±—Ä–µ–Ω–¥ –∏ –≥–æ—Ä–æ–¥. *–ü—Ä–∏–º–µ—Ä:* `my-brand moscow`", parse_mode="Markdown")
            bot.register_next_step_handler(msg, process_wizard_brand_city)
            
    def process_wizard_timezone(message: types.Message):
        """–®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞."""
        user_id = message.from_user.id
        state = user_states.get(user_id, {})
        if state.get("state") != "wizard_awaiting_timezone": return
        if message.text == '/cancel':
            del user_states[user_id]
            return bot.reply_to(message, "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            
        offset = message.text.strip()
        tz_name = TIMEZONE_MAP.get(offset)
        if not tz_name:
            msg = bot.reply_to(message, f"‚ùå **–û—à–∏–±–∫–∞.** –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–º–µ—â–µ–Ω–∏—è. –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: {list(TIMEZONE_MAP.keys())}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", parse_mode="Markdown")
            bot.register_next_step_handler(msg, process_wizard_timezone)
            return
            
        state["data"]["timezone"] = tz_name
        
        state["state"] = "wizard_awaiting_timing"
        text = ("‚úÖ **–®–∞–≥ 3 –∏–∑ 4:** –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –¢–µ–ø–µ—Ä—å –∑–∞–¥–∞–π—Ç–µ **–≥—Ä–∞—Ñ–∏–∫ —Å–º–µ–Ω—ã**.\n"
                "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞. *–ü—Ä–∏–º–µ—Ä:* `19:00 04:00`")
        msg = bot.reply_to(message, text, parse_mode="Markdown")
        bot.register_next_step_handler(msg, process_wizard_timing)

    def process_wizard_timing(message: types.Message):
        """–®–∞–≥ 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–º–µ–Ω—ã."""
        user_id = message.from_user.id
        state = user_states.get(user_id, {})
        if state.get("state") != "wizard_awaiting_timing": return
        if message.text == '/cancel':
            del user_states[user_id]
            return bot.reply_to(message, "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

        try:
            start_time_str, end_time_str = message.text.split()
            datetime.datetime.strptime(start_time_str, '%H:%M')
            datetime.datetime.strptime(end_time_str, '%H:%M')
            state["data"]["start_time"] = start_time_str
            state["data"]["end_time"] = end_time_str
            
            state["state"] = "wizard_awaiting_goal"
            text = ("‚úÖ **–®–∞–≥ 4 –∏–∑ 4:** –ì—Ä–∞—Ñ–∏–∫ –∑–∞–¥–∞–Ω! –ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ: —É–∫–∞–∂–∏—Ç–µ **–ø–ª–∞–Ω (–Ω–æ—Ä–º—É) –ì–°** –∑–∞ —Å–º–µ–Ω—É.\n"
                    "–í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ —á–∏—Å–ª–æ. *–ü—Ä–∏–º–µ—Ä:* `25`")
            msg = bot.reply_to(message, text, parse_mode="Markdown")
            bot.register_next_step_handler(msg, process_wizard_goal)
        except (ValueError, IndexError):
            msg = bot.reply_to(message, "‚ùå **–û—à–∏–±–∫–∞.** –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ –≤—Ä–µ–º–µ–Ω–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. *–ü—Ä–∏–º–µ—Ä:* `19:00 04:00`", parse_mode="Markdown")
            bot.register_next_step_handler(msg, process_wizard_timing)

    def process_wizard_goal(message: types.Message):
        """–®–∞–≥ 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–ª–∏ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ."""
        user_id = message.from_user.id
        state = user_states.get(user_id, {})
        if state.get("state") != "wizard_awaiting_goal": return
        if message.text == '/cancel':
            del user_states[user_id]
            return bot.reply_to(message, "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            
        try:
            goal = int(message.text)
            if goal <= 0: raise ValueError
            state["data"]["default_goal"] = goal
            
            chat_id_to_configure = state["chat_id"]
            if chat_id_to_configure not in chat_configs:
                chat_configs[chat_id_to_configure] = {}
            chat_configs[chat_id_to_configure].update(state["data"])
            save_json_data(CHAT_CONFIG_FILE, chat_configs)
            
            final_text = ("üéâ **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
                          "–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:\n"
                          f"  - –ë—Ä–µ–Ω–¥: `{state['data']['brand']}`\n"
                          f"  - –ì–æ—Ä–æ–¥: `{state['data']['city']}`\n"
                          f"  - –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: `{state['data']['timezone']}`\n"
                          f"  - –ì—Ä–∞—Ñ–∏–∫: `{state['data']['start_time']}` - `{state['data']['end_time']}`\n"
                          f"  - –ù–æ—Ä–º–∞ –ì–°: `{state['data']['default_goal']}`\n\n"
                          "–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ!")
            bot.reply_to(message, final_text, parse_mode="Markdown")
            
        except (ValueError, IndexError):
            msg = bot.reply_to(message, "‚ùå **–û—à–∏–±–∫–∞.** –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. *–ü—Ä–∏–º–µ—Ä:* `25`", parse_mode="Markdown")
            bot.register_next_step_handler(msg, process_wizard_goal)
        finally:
            if user_id in user_states:
                del user_states[user_id]
    
    # ========================================
    #   –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ï–ö–õ–ê–ú–û–ô (ADS)
    # ========================================
    @bot.message_handler(commands=['ads'])
    @admin_required(bot)
    def command_ads(message: types.Message):
        markup = types.InlineKeyboardMarkup(row_width=2)
        brands = list(ad_templates.keys())
        for brand in brands:
            markup.add(types.InlineKeyboardButton(brand.upper(), callback_data=f"ad_brand_{brand}"))
        markup.add(types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –±—Ä–µ–Ω–¥", callback_data="ad_addbrand_form"))
        bot.send_message(message.chat.id, "üìù –í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–æ–π:", reply_markup=markup)
    
    def show_ad_cities_menu(chat_id: int, brand: str):
        markup = types.InlineKeyboardMarkup(row_width=2)
        cities = list(ad_templates.get(brand, {}).keys())
        for city in cities:
            markup.add(types.InlineKeyboardButton(city.capitalize(), callback_data=f"ad_city_{brand}_{city}"))
        markup.add(types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥", callback_data=f"ad_addcity_form_{brand}"))
        markup.add(types.InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ –±—Ä–µ–Ω–¥–∞–º", callback_data="ad_backtobrand"))
        bot.send_message(chat_id, f"–ë—Ä–µ–Ω–¥: *{brand.upper()}*\n–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=markup, parse_mode="Markdown")
    
    def show_ad_actions_menu(chat_id: int, brand: str, city: str):
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton("üëÅÔ∏è‚Äçüó®Ô∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —à–∞–±–ª–æ–Ω—ã", callback_data=f"ad_view_{brand}_{city}"),
            types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω", callback_data=f"ad_addform_{brand}_{city}"),
            types.InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω", callback_data=f"ad_delform_{brand}_{city}"),
            types.InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ –≥–æ—Ä–æ–¥–∞–º", callback_data=f"ad_backtocity_{brand}")
        )
        bot.send_message(chat_id, f"–ë—Ä–µ–Ω–¥: *{brand.upper()}* / –ì–æ—Ä–æ–¥: *{city.capitalize()}*\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup, parse_mode="Markdown")

    def show_templates_for_deletion(chat_id: int, brand: str, city: str):
        templates = ad_templates.get(brand, {}).get(city, {})
        if not templates:
            bot.send_message(chat_id, "–ó–¥–µ—Å—å –Ω–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return
        markup = types.InlineKeyboardMarkup(row_width=1)
        for tpl_key in templates.keys():
            markup.add(types.InlineKeyboardButton(f"‚ùå {tpl_key}", callback_data=f"ad_delete_{brand}_{city}_{tpl_key}"))
        markup.add(types.InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=f"ad_city_{brand}_{city}"))
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data.startswith('ad_'))
    def handle_ad_callbacks(call: types.CallbackQuery):
        if not is_admin(bot, call.from_user.id, call.message.chat.id):
            return bot.answer_callback_query(call.id, "‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        
        chat_id = call.message.chat.id
        message_id = call.message.message_id
        
        bot.answer_callback_query(call.id)
        parts = call.data.split('_')
        action = parts[1]

        try: bot.delete_message(chat_id, message_id)
        except Exception: pass

        if action == "brand":
            brand = parts[2]
            show_ad_cities_menu(chat_id, brand)
        elif action == "city":
            brand, city = parts[2], parts[3]
            show_ad_actions_menu(chat_id, brand, city)
        elif action == "view":
            brand, city = parts[2], parts[3]
            templates = ad_templates.get(brand, {}).get(city, {})
            if not templates: text = "–®–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –ø–æ–∫–∞ –Ω–µ—Ç."
            else:
                text_lines = [f"üìÑ **–®–∞–±–ª–æ–Ω—ã –¥–ª—è {brand.upper()} / {city.capitalize()}**\n"]
                for name, content in templates.items():
                    text_lines.append(f"üîπ *{name}*:\n`{content}`\n")
                text = "\n".join(text_lines)
            bot.send_message(chat_id, text, parse_mode="Markdown")
        elif action == "addform":
            brand, city = parts[2], parts[3]
            user_id = call.from_user.id
            user_states[user_id] = {"state": "awaiting_ad_template", "brand": brand, "city": city}
            bot.send_message(chat_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n`–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞`\n`–¢–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞...`\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel", parse_mode="Markdown")
        elif action == "delform":
            brand, city = parts[2], parts[3]
            show_templates_for_deletion(chat_id, brand, city)
        elif action == "delete":
            brand, city, tpl_key = parts[2], parts[3], "_".join(parts[4:])
            if tpl_key in ad_templates.get(brand, {}).get(city, {}):
                del ad_templates[brand][city][tpl_key]
                if save_json_data(AD_TEMPLATES_FILE, ad_templates):
                     bot.send_message(chat_id, f"–®–∞–±–ª–æ–Ω '{tpl_key}' —É–¥–∞–ª–µ–Ω.")
                     show_templates_for_deletion(chat_id, brand, city)
                else:
                    bot.send_message(chat_id, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")
        elif action == 'backtobrand':
            command_ads(call.message)
        elif action == 'backtocity':
            brand = parts[2]
            show_ad_cities_menu(chat_id, brand)

    @bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get("state") == "awaiting_ad_template")
    def receive_ad_template_to_add(message: types.Message):
        user_id = message.from_user.id
        if message.text == '/cancel':
            del user_states[user_id]
            return bot.send_message(message.chat.id, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        try:
            name, text = message.text.split('\n', 1)
            name, text = name.strip(), text.strip()
            if not name or not text: raise ValueError
            state_data = user_states[user_id]
            brand, city = state_data['brand'], state_data['city']
            if brand not in ad_templates: ad_templates[brand] = {}
            if city not in ad_templates[brand]: ad_templates[brand][city] = {}
            ad_templates[brand][city][name] = text
            if save_json_data(AD_TEMPLATES_FILE, ad_templates):
                bot.send_message(message.chat.id, f"‚úÖ –®–∞–±–ª–æ–Ω *'{name}'* —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è *{brand.upper()}/{city.capitalize()}*.", parse_mode="Markdown")
            else:
                bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —à–∞–±–ª–æ–Ω–æ–≤.")
            del user_states[user_id]
        except (ValueError, KeyError):
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n`–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞`\n`–¢–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞...`", parse_mode="Markdown")
            if user_id in user_states: del user_states[user_id]
            
    @bot.callback_query_handler(func=lambda call: True)
    def _debug_all_callbacks(call: types.CallbackQuery):
        try:
            bot.answer_callback_query(call.id, f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∫–æ–ª–±—ç–∫: {call.data}", show_alert=False)
        except Exception:
            pass
        logging.warning(f"–ü–æ–ª—É—á–µ–Ω –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π callback_data -> {call.data} –æ—Ç {get_username(call.from_user)} –≤ —á–∞—Ç–µ {call.message.chat.id}")

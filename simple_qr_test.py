#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã QR-–∫–æ–¥–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
"""

import sqlite3
import datetime
import pytz

def test_database_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    print("=== –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –ë–ê–ó–´ –î–ê–ù–ù–´–• ===")
    
    try:
        conn = sqlite3.connect('bot_database.db')
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É staff
        cur.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='staff'")
        if cur.fetchone():
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'staff' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            cur.execute("PRAGMA table_info(staff)")
            staff_columns = [row[1] for row in cur.fetchall()]
            required_columns = ['staff_id', 'full_name', 'short_name', 'unique_code', 'position', 'status']
            
            for col in required_columns:
                if col in staff_columns:
                    print(f"  ‚úÖ –ö–æ–ª–æ–Ω–∫–∞ '{col}' –µ—Å—Ç—å")
                else:
                    print(f"  ‚ùå –ö–æ–ª–æ–Ω–∫–∞ '{col}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        else:
            print("‚ùå –¢–∞–±–ª–∏—Ü–∞ 'staff' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É users
        cur.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='users'")
        if cur.fetchone():
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'users' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            cur.execute("PRAGMA table_info(users)")
            user_columns = [row[1] for row in cur.fetchall()]
            required_columns = ['user_id', 'source', 'brought_by_staff_id']
            
            for col in required_columns:
                if col in user_columns:
                    print(f"  ‚úÖ –ö–æ–ª–æ–Ω–∫–∞ '{col}' –µ—Å—Ç—å")
                else:
                    print(f"  ‚ùå –ö–æ–ª–æ–Ω–∫–∞ '{col}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        else:
            print("‚ùå –¢–∞–±–ª–∏—Ü–∞ 'users' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return False
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
        return False

def test_staff_data():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤."""
    print("\n=== –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• –°–û–¢–†–£–î–ù–ò–ö–û–í ===")
    
    try:
        conn = sqlite3.connect('bot_database.db')
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        cur.execute("SELECT COUNT(*) as total FROM staff")
        total_staff = cur.fetchone()['total']
        print(f"üìä –í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –±–∞–∑–µ: {total_staff}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        cur.execute("SELECT COUNT(*) as active FROM staff WHERE status = 'active'")
        active_staff = cur.fetchone()['active']
        print(f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {active_staff}")
        
        if active_staff == 0:
            print("‚ö†Ô∏è  –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤!")
            print("üí° –î–æ–±–∞–≤—å—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –±–æ—Ç–∞:")
            print("   /admin ‚Üí üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º ‚Üí ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
            return False
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        cur.execute("SELECT * FROM staff WHERE status = 'active'")
        staff_list = cur.fetchall()
        
        print(f"\nüë• –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:")
        for staff in staff_list:
            qr_url = f"https://t.me/EvgenichTapBarBot?start=w_{staff['unique_code']}"
            print(f"  ‚Ä¢ {staff['full_name']} ({staff['position']})")
            print(f"    –ö–æ–¥: {staff['unique_code']}")
            print(f"    QR-—Å—Å—ã–ª–∫–∞: {qr_url}")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {e}")
        return False

def test_qr_statistics():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ QR-–∫–æ–¥–∞–º."""
    print("\n=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê QR-–ö–û–î–û–í ===")
    
    try:
        conn = sqlite3.connect('bot_database.db')
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        week_ago = datetime.datetime.now() - datetime.timedelta(days=7)
        
        # –£—Å–ø–µ—à–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –ø–æ QR-–∫–æ–¥–∞–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        cur.execute("""
            SELECT source, COUNT(*) as count 
            FROM users 
            WHERE signup_date >= ? AND source LIKE '–°–æ—Ç—Ä—É–¥–Ω–∏–∫:%'
            GROUP BY source
            ORDER BY count DESC
        """, (week_ago,))
        successful_qr = cur.fetchall()
        
        if successful_qr:
            total_success = sum(row['count'] for row in successful_qr)
            print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ QR-–∫–æ–¥–∞–º –∑–∞ 7 –¥–Ω–µ–π: {total_success}")
            for row in successful_qr:
                staff_name = row['source'].replace('–°–æ—Ç—Ä—É–¥–Ω–∏–∫: ', '')
                print(f"  ‚Ä¢ {staff_name}: {row['count']}")
        else:
            print("‚ö†Ô∏è  –£—Å–ø–µ—à–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ QR-–∫–æ–¥–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –ü–µ—Ä–µ—Ö–æ–¥—ã —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –∫–æ–¥–∞–º–∏
        cur.execute("""
            SELECT source, COUNT(*) as count 
            FROM users 
            WHERE signup_date >= ? AND source LIKE '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π_—Å–æ—Ç—Ä—É–¥–Ω–∏–∫_%'
            GROUP BY source
            ORDER BY count DESC
        """, (week_ago,))
        invalid_codes = cur.fetchall()
        
        if invalid_codes:
            total_invalid = sum(row['count'] for row in invalid_codes)
            print(f"‚ùå –ü–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –∫–æ–¥–∞–º–∏: {total_invalid}")
            for row in invalid_codes:
                invalid_code = row['source'].replace('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π_—Å–æ—Ç—Ä—É–¥–Ω–∏–∫_', '')
                print(f"  ‚Ä¢ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥ '{invalid_code}': {row['count']} –ø–æ–ø—ã—Ç–æ–∫")
        else:
            print("‚úÖ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∫–æ–¥–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
        
        # –ü—Ä—è–º—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
        cur.execute("""
            SELECT COUNT(*) as count 
            FROM users 
            WHERE signup_date >= ? AND source = 'direct'
        """, (week_ago,))
        direct_count = cur.fetchone()['count']
        print(f"üì± –ü—Ä—è–º—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤: {direct_count}")
        
        # –í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        cur.execute("""
            SELECT source, COUNT(*) as count 
            FROM users 
            WHERE signup_date >= ?
            GROUP BY source
            ORDER BY count DESC
        """, (week_ago,))
        all_sources = cur.fetchall()
        
        if all_sources:
            print(f"\nüìä –í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∑–∞ 7 –¥–Ω–µ–π:")
            for row in all_sources:
                print(f"  ‚Ä¢ {row['source']}: {row['count']}")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ QR-–ö–û–î–û–í –°–û–¢–†–£–î–ù–ò–ö–û–í")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    structure_ok = test_database_structure()
    
    if not structure_ok:
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    staff_ok = test_staff_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats_ok = test_qr_statistics()
    
    print("\n" + "=" * 50)
    print("üìã –ò–¢–û–ì–ò –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
    print(f"  –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î: {'‚úÖ OK' if structure_ok else '‚ùå –û–®–ò–ë–ö–ê'}")
    print(f"  –î–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {'‚úÖ OK' if staff_ok else '‚ùå –û–®–ò–ë–ö–ê'}")
    print(f"  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {'‚úÖ OK' if stats_ok else '‚ùå –û–®–ò–ë–ö–ê'}")
    
    if structure_ok and staff_ok and stats_ok:
        print("\nüéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("\nüí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print("  1. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥")
        print("  2. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –≥–æ—Å—Ç—è –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ")
        print("  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
    else:
        print("\n‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º")
    
    print("=" * 50)

if __name__ == "__main__":
    main()
